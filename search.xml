<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/02/27/C/Array/"/>
      <url>/2023/02/27/C/Array/</url>
      
        <content type="html"><![CDATA[<h2 id="本文只记录注意点"><a href="#本文只记录注意点" class="headerlink" title="本文只记录注意点"></a>本文只记录注意点</h2><h2 id="1-数组的定义过程"><a href="#1-数组的定义过程" class="headerlink" title="1.数组的定义过程"></a>1.数组的定义过程</h2><h3 id="1-定义数组"><a href="#1-定义数组" class="headerlink" title="1.定义数组"></a>1.定义数组</h3><blockquote><p>数组大小必须确定</p></blockquote><p>手动指定大小</p><ol><li>[类型] 名字 [大小]；</li><li>[类型] 名字 [大小]&#x3D;{1，,1}</li></ol><p>编译器指定 </p><ol><li>[类型] Name []&#x3D;{1,12,12}</li></ol><p>一种特别的定义方式</p><ol><li>[Type] Name {} &#x3D;{[指定下标]&#x3D;1,[指定下标]}  int array3[]&#x3D;{[1]&#x3D;1,[4]&#x3D;3}; 数组的长度默认是 最大下标+1</li></ol><blockquote><p>作为函数参数的时候可以 int array[] 。其他情况不行。</p></blockquote><h3 id="2-更改名字"><a href="#2-更改名字" class="headerlink" title="2.更改名字"></a>2.更改名字</h3><p>数组在声明时，编译器自动为 数组分配了内存地址，<strong>这个地址与数组名是绑定的，不可更改。</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">12</span>,<span class="number">12</span>,<span class="number">123</span>&#125;</span><br><span class="line"><span class="type">int</span> b[<span class="number">2</span>]=a;</span><br><span class="line">[Error] incompatible types when assigning to type <span class="string">&#x27;int[2]&#x27;</span> from type <span class="string">&#x27;int *&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">12</span>,<span class="number">12</span>,<span class="number">123</span>&#125;</span><br><span class="line"><span class="type">int</span> b[<span class="number">2</span>];</span><br><span class="line">b=a;</span><br><span class="line">都会报错</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>How?</p><p>使用指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">12</span>,<span class="number">12</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> *b;</span><br><span class="line">b=a;</span><br></pre></td></tr></table></figure><blockquote><p>但这里会存在一个问题，数组变量变成指针变量后，大小会发生改变。当数组被当成参数传递后，默认传递的是一个 &#x3D;&#x3D;指针变量&#x3D;&#x3D;则使用 sizeof 得到的结果会发生变化。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> array1[]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">12</span>&#125;;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;转换指针前的大小 %zd \n&quot;</span>,<span class="keyword">sizeof</span>(array1));</span><br><span class="line"> <span class="type">int</span> *ppp=array1;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;转换指针后的大小 %zd \n&quot;</span>,<span class="keyword">sizeof</span>(ppp));</span><br><span class="line">=================================================</span><br><span class="line">转换指针前的大小 <span class="number">24</span></span><br><span class="line">转换指针后的大小 <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="type">void</span> testAaary(<span class="type">int</span> *array1, <span class="type">int</span> array2[])&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;传递后array1大小为 %zu \n&quot;</span>,<span class="keyword">sizeof</span>(array1));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;传递后array2大小为 %zu \n&quot;</span>,<span class="keyword">sizeof</span>(array2));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> array1[]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">12</span>&#125;;</span><br><span class="line">    <span class="type">int</span> array2[]=&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">26</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;array1传递前数组的大小为 %zd \n&quot;</span>,<span class="keyword">sizeof</span>(array1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;array2传递前数组的大小为 %zd \n&quot;</span>,<span class="keyword">sizeof</span>(array2));</span><br><span class="line">    testAaary(array1,array2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">===========================================</span><br><span class="line">array1传递前数组的大小为 <span class="number">24</span></span><br><span class="line">array2传递前数组的大小为 <span class="number">24</span></span><br><span class="line">传递后array1大小为 <span class="number">8</span></span><br><span class="line">传递后array2大小为 <span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="2-参数传递"><a href="#2-参数传递" class="headerlink" title="2.参数传递"></a>2.参数传递</h2><ol><li><p>一维度数组传递作为参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">arrayTest</span><span class="params">(<span class="type">int</span> array1[],<span class="type">int</span> len)</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>二维或多维度  —-&gt; &#x3D;&#x3D;除了第一维度可以使用参数传递，其他的都需要在定义的时候就写好！</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">arrayTest</span><span class="params">(<span class="type">int</span> array1[][<span class="number">3</span>],<span class="type">int</span> len)</span></span><br></pre></td></tr></table></figure><ol start="3"><li>直接使用 字面量 进行传参</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sum_array</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a=sum_array( (<span class="type">int</span> [])&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="3-多维数组"><a href="#3-多维数组" class="headerlink" title="3.多维数组"></a>3.多维数组</h3><p>并没有什么区别，只是  如果使用 一个 array[0] 访问则是 一整个数组的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//多维数组</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;==========多维数组===================\n&quot;</span>);</span><br><span class="line"><span class="type">int</span> array5[][<span class="number">2</span>]=&#123;&#123;<span class="number">123</span>,<span class="number">123</span>&#125;,&#123;<span class="number">124</span>,<span class="number">124</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//访问变量。 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,array5[<span class="number">0</span>][<span class="number">0</span>]); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,**array5 );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(array5[<span class="number">0</span>]) );</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>配置V2rayA</title>
      <link href="/2023/02/26/%E6%A0%91%E8%8E%93%E6%B4%BE/%E9%85%8D%E7%BD%AEV2rayA/"/>
      <url>/2023/02/26/%E6%A0%91%E8%8E%93%E6%B4%BE/%E9%85%8D%E7%BD%AEV2rayA/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>配置 V2rayA ,通过 V2ray 实现翻墙。</p><h2 id="1-安装-V2ray"><a href="#1-安装-V2ray" class="headerlink" title="1.安装 V2ray"></a>1.安装 V2ray</h2><h3 id="V2ray官方安装"><a href="#V2ray官方安装" class="headerlink" title="V2ray官方安装"></a>V2ray官方安装</h3><blockquote><p>安装教程</p><p><a href="https://github.com/v2fly/fhs-install-v2ray">https://github.com/v2fly/fhs-install-v2ray</a></p></blockquote><h3 id="2-V2rayA-提供的镜像"><a href="#2-V2rayA-提供的镜像" class="headerlink" title="2.V2rayA 提供的镜像"></a>2.V2rayA 提供的镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -Ls https://mirrors.v2raya.org/go.sh | sudo bash</span><br></pre></td></tr></table></figure><p>安装后可以关掉服务，因为 v2rayA 不依赖于该 systemd 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">disable</span> v2ray --now</span><br></pre></td></tr></table></figure><h2 id="2-安装-V2rayA"><a href="#2-安装-V2rayA" class="headerlink" title="2.安装 V2rayA"></a>2.安装 V2rayA</h2><h3 id="方法一：通过软件源安装"><a href="#方法一：通过软件源安装" class="headerlink" title="方法一：通过软件源安装"></a>方法一：通过软件源安装</h3><h4 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥#"></a>添加公钥<a href="https://v2raya.org/docs/prologue/installation/debian/#%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5">#</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo <span class="built_in">tee</span> /etc/apt/trusted.gpg.d/v2raya.asc</span><br></pre></td></tr></table></figure><h4 id="添加-V2RayA-软件源"><a href="#添加-V2RayA-软件源" class="headerlink" title="添加 V2RayA 软件源"></a>添加 V2RayA 软件源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb https://apt.v2raya.org/ v2raya main&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/v2raya.list</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h4 id="安装-V2RayA"><a href="#安装-V2RayA" class="headerlink" title="安装 V2RayA"></a>安装 V2RayA</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install v2raya</span><br></pre></td></tr></table></figure><h3 id="方法二：手动安装-deb-包"><a href="#方法二：手动安装-deb-包" class="headerlink" title="方法二：手动安装 deb 包"></a>方法二：手动安装 deb 包</h3><p><a href="https://github.com/v2rayA/v2rayA/releases">下载 deb 包</a> 后可以使用 Gdebi、QApt 等图形化工具来安装，也可以使用命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install /path/download/installer_debian_xxx_vxxx.deb <span class="comment">### 自行替换 deb 包所在的实际路径</span></span><br></pre></td></tr></table></figure><h2 id="启动-v2rayA-x2F-设置-v2rayA-自动启动"><a href="#启动-v2rayA-x2F-设置-v2rayA-自动启动" class="headerlink" title="启动 v2rayA &#x2F; 设置 v2rayA 自动启动"></a>启动 v2rayA &#x2F; 设置 v2rayA 自动启动</h2><blockquote><p>从 1.5 版开始将不再默认为用户启动 v2rayA 及设置开机自动。</p></blockquote><ul><li><p>启动 v2rayA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start v2raya.service</span><br></pre></td></tr></table></figure></li><li><p>设置开机自动启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> v2raya.service</span><br></pre></td></tr></table></figure></li></ul><h3 id="方法二：手动安装-deb-包-1"><a href="#方法二：手动安装-deb-包-1" class="headerlink" title="方法二：手动安装 deb 包"></a>方法二：手动安装 deb 包</h3><p><a href="https://github.com/v2rayA/v2rayA/releases">下载 deb 包</a> 后可以使用 Gdebi、QApt 等图形化工具来安装，也可以使用命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install /path/download/installer_debian_xxx_vxxx.deb <span class="comment">### 自行替换 deb 包所在的实际路径</span></span><br></pre></td></tr></table></figure><ul><li><pre><code class="bash">sudo systemctl enable v2raya.service</code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-力扣刷题笔记</title>
      <link href="/2023/02/25/leetCode/1-%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/25/leetCode/1-%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="力扣刷题"><a href="#力扣刷题" class="headerlink" title="力扣刷题"></a>力扣刷题</h1><h2 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h2><h3 id="①双指针"><a href="#①双指针" class="headerlink" title="①双指针"></a>①双指针</h3><h4 id="1-移动0"><a href="#1-移动0" class="headerlink" title="1.移动0"></a>1.移动0</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</span><br><span class="line"></span><br><span class="line">请注意 ，必须在不复制数组的情况下原地对数组进行操作。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: nums = [0]</span><br><span class="line">输出: [0]</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode.cn/problems/move-zeroes</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>解法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">         <span class="comment">//使用双指针法，index1 ,index2 同时指向开头</span></span><br><span class="line">        <span class="comment">//index1， 遍历数组，遇到非0 的就将 index1上的放到 index2上，同时 index1和index2向前移动一位</span></span><br><span class="line">        <span class="comment">//执行完后，再把 index2 到末尾的全部改成0</span></span><br><span class="line">        <span class="keyword">if</span> (nums==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> index1=<span class="number">0</span>,index2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;index1&lt;nums.length;index1++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[index1]!=<span class="number">0</span>)&#123;</span><br><span class="line">                nums[index2++]=nums[index1];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (;index2&lt; nums.length;index2++)&#123;</span><br><span class="line">            nums[index2]=<span class="number">0</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析；</p><p> &#x2F;&#x2F;使用双指针法，index1 ,index2 同时指向开头<br>        &#x2F;&#x2F;index1， 遍历数组，遇到非0 的就将 index1上的放到 index2上，同时 index1和index2向前移动一位<br>        &#x2F;&#x2F;执行完后，再把 index2 到末尾的全部改成0</p><p><img src="/2023/02/25/leetCode/1-%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/image-20230225144711188.png" alt="image-20230225144711188"></p><p>原始</p><p>4 3 2 7 8 2 3 1</p><p>0 1 2 3 4 5 6 7</p><p>第一次执行</p><p>int x&#x3D;(4-1)%8&#x3D;3;</p><p>num[3]&#x3D;7+8&#x3D;15;</p><p>4 3 2 15 8 2 3 1</p><p>0 1 2 3 4 5 6 7</p><p>第二次执行</p><p>int x&#x3D;(3-1)%8&#x3D;2;</p><p>num[2]&#x3D;2+8&#x3D;10;</p><p>4 3 10 15 8 2 3 1</p><p>0 1 2 3 4 5 6 7</p><p>第三次执行</p><p>int x&#x3D;(10-1)%8&#x3D;1;</p><p>num[1]&#x3D;4+8&#x3D;12</p><p>4 12 10 15 8 2 3 1</p><p>0 1    2   3  4 5 6 7</p><p>第四次执行</p><p>int x&#x3D;(15-1)%8&#x3D;6;</p><p>num[6]&#x3D;3+8&#x3D;11;</p><p>4 9 18 11 8 2 11 1</p><p>0 1 2 3 4 5 6 7</p><p>第五次执行</p><p>int x&#x3D;(8-1)%8&#x3D;7;</p><p>num[7]&#x3D;1+8&#x3D;9;</p><p>4 9 18 11 8 2 11 9</p><p>0 1 2 3 4 5 6  7</p><p>第六次执行</p><p>int x&#x3D;(2-1)%8&#x3D;1;</p><p>num[1]&#x3D;9+8&#x3D;17;</p><p>4 17 18 11 8 2 11 9</p><p>0 1 2 3 4 5 6  7</p><p>第七次执行</p><p>int x&#x3D;(3-1)%8&#x3D;2;</p><p>num[2]&#x3D;18+8&#x3D;26;</p><p>4 17 26 11 8 2 11 9</p><p>0 1 2 3 4 5 6  7</p><p>第八次执行</p><p>int x&#x3D;(9-1)%8&#x3D;0;</p><p>num[0]&#x3D;4+8&#x3D;12;</p><p>12 17 26 11 8 2 11 9</p><p>0   1   2    3  4 5  6  7</p><p>4+8&#x3D;12</p><p>11%8&#x3D;3</p><h4 id="2-查找消失的数字-448"><a href="#2-查找消失的数字-448" class="headerlink" title="2.查找消失的数字(448)"></a>2.查找消失的数字(448)</h4><p>给你一个含 n 个整数的数组 nums ，其中 nums[i] 在区间 [1, n] 内。请你找出所有在 [1, n] 范围内但没有出现在 nums 中的数字，并以数组的形式返回结果。</p><p>示例 1：</p><blockquote><p>输入：nums &#x3D; [4,3,2,7,8,2,3,1]<br>输出：[5,6]</p></blockquote><p>示例 2：</p><blockquote><p>输入：nums &#x3D; [1,1]<br>输出：[2]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  查找消失的数字</span></span><br><span class="line">   <span class="comment">//numbs长度 为n ,每个值为 1~n。 遇到1 就让 nums[0]+=n;</span></span><br><span class="line">   <span class="comment">// 2 nums[2-1]+=n;</span></span><br><span class="line">   <span class="comment">//1.遍历 numbs ,每遇到一个x 就让 numbs[x-1] 增加 n，由于numbs 全部在 1~n 必定大于n 。</span></span><br><span class="line">   <span class="comment">//如果没有 i+1 的下标数，那该nums 中下表为 i+1的数则不会增加</span></span><br><span class="line">   <span class="comment">//2.遍历 numbs，若 nums[i] 小于 n，则说明 numbs 中没有 i+1的数。</span></span><br><span class="line">   <span class="comment">//3.还要注意取回修改后的原值。</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findDisappearedNumbers</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">       <span class="type">int</span> n=nums.length;</span><br><span class="line">       List&lt;Integer&gt; integers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> num:nums)&#123;</span><br><span class="line">           <span class="type">int</span> x=(num-<span class="number">1</span>)%n;</span><br><span class="line">           nums[x]+=n;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span> (nums[i]&lt;=n)&#123;</span><br><span class="line">               integers.add(i+<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   <span class="keyword">return</span> integers;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="二、链表"><a href="#二、链表" class="headerlink" title="二、链表"></a>二、链表</h3><h4 id="1-合并两个有序列表-21"><a href="#1-合并两个有序列表-21" class="headerlink" title="1.合并两个有序列表(21)"></a>1.合并两个有序列表(21)</h4><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p>示例 1：</p><p>输入：l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]<br>输出：[1,1,2,3,4,4]</p><p><img src="/2023/02/25/leetCode/1-%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/merge_ex1.jpg" alt="img"></p><p>链表的合并与数组类似，都可以使用双指针方法进行快速的排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并两个有序链表</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">    <span class="comment">//使用循环+双指针</span></span><br><span class="line">        <span class="comment">//1.使用一个临时变量resultNode 进行储存结果。</span></span><br><span class="line">        <span class="comment">//2.1使用两个指针，同时从 list1 和list2 出发，如果 list1 &gt;= list2，则把 list2 放在 resultNode 后，并将 list 2移动一位</span></span><br><span class="line">        <span class="comment">//2.2.反正则 把 list1 放在 resultNode 后 ，list1 移动一位。</span></span><br><span class="line">        <span class="comment">//3.resultNode移动</span></span><br><span class="line">         <span class="keyword">if</span> (list1==<span class="literal">null</span>) <span class="keyword">return</span>  list2;</span><br><span class="line">         <span class="keyword">if</span> (list2==<span class="literal">null</span>) <span class="keyword">return</span>  list1;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">resultNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode p=resultNode;</span><br><span class="line">        <span class="keyword">while</span> (list1!=<span class="literal">null</span>&amp;&amp;list2!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val&gt;= list2.val)&#123;</span><br><span class="line">                p.next=list2;</span><br><span class="line">                list2=list2.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                p.next=list1;</span><br><span class="line">                list1=list1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            p=p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list1!=<span class="literal">null</span>) p.next=list1;</span><br><span class="line">        <span class="keyword">if</span> (list2!=<span class="literal">null</span>) p.next=list2;</span><br><span class="line">        <span class="keyword">return</span> resultNode.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2-常用注解</title>
      <link href="/2023/02/07/SSM/MyBatis/2-%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>/2023/02/07/SSM/MyBatis/2-%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>1@ Mapkey(“”)</strong></p><hr><p>将返回的结果创建为一个大 map, 使用此标签 限定这个 大map 的 key。  </p><ol start="2"><li>结构映射</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-MyBatis基本使用</title>
      <link href="/2023/02/05/SSM/MyBatis/1-MyBatis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/02/05/SSM/MyBatis/1-MyBatis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>学习思路</p><hr><ol><li>学会怎么用</li><li>为什么这样用</li></ol><hr><p>使用步骤</p><ol><li>创建 “mybatis-config.xml” 配置文件</li><li>创建好 “mapper.xml映射文件”，并在 “mybatis-config.xml”配置文件中配置好 mapper.xml 的路径</li><li>使用  SqlSessionFactoryBuilder创建—-&gt;sqlSessionFactory—-&gt; sqlSession</li><li>调用 sqlSession(“mapper.xml中的id,如果有 namespace 则使用 namespace.id。”,”需要传递的参数“) 进行 CRUD</li></ol><p>基本使用例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.创建SqlSessionFactoryBuilder对象</span></span><br><span class="line"> <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="comment">// 2.创建SqlSessionFactory对象</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line"><span class="comment">// 3.创建SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span>  <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">// 4.执行SQL</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;insertCar&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;更新了几条记录：&quot;</span> + count);</span><br><span class="line"><span class="comment">// 5.提交</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 回滚</span></span><br><span class="line"><span class="keyword">if</span> (sqlSession != <span class="literal">null</span>) &#123;</span><br><span class="line">sqlSession.rollback();</span><br><span class="line">&#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6.关闭</span></span><br><span class="line">            <span class="keyword">if</span> (sqlSession != <span class="literal">null</span>) &#123;</span><br><span class="line">                sqlSession.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="①、一些基本使用方法"><a href="#①、一些基本使用方法" class="headerlink" title="①、一些基本使用方法"></a>①、一些基本使用方法</h3><p>1.切换环境</p><p><strong>sqlSessionFactoryBuilder.build(Resources.getResourceAsStream(“mybatis-config.xml”), &#x3D;&#x3D;”environmentID”&#x3D;&#x3D;);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用指定数据库</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory1</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>), <span class="string">&quot;dev&quot;</span>);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> sqlSessionFactory1.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> sqlSession1.insert(<span class="string">&quot;insertCar&quot;</span>, car);</span><br><span class="line">        System.out.println(<span class="string">&quot;插入了几条记录：&quot;</span> + count1);</span><br></pre></td></tr></table></figure><h2 id="②、各个环节详细解释"><a href="#②、各个环节详细解释" class="headerlink" title="②、各个环节详细解释"></a>②、各个环节详细解释</h2><h4 id="1-mybatis-config-xml-配置文件"><a href="#1-mybatis-config-xml-配置文件" class="headerlink" title="1.mybatis-config.xml 配置文件"></a>1.mybatis-config.xml 配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认使用开发环境--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;environments default=&quot;dev&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认使用生产环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;production&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">==========================================</span><br><span class="line">            <span class="comment">&lt;!--配置事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">===========================================     </span><br><span class="line">             <span class="comment">&lt;!--配置dataSoure数据源--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/powernode&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--生产环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;production&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">==========================================</span><br><span class="line">     <span class="comment">&lt;!--配置 mapper.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;CarMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意</p><ol><li><p><environments default="production"> default 配置默认的 environment id</environments></p></li><li><p><transactionManager type="JDBC"> 事务管理器</transactionManager></p><ol><li><p>采用JDBC的原生事务机制：</p></li><li><ul><li>开启事务：conn.setAutoCommit(false);</li><li>处理业务……</li><li>提交事务：conn.commit();</li></ul></li><li><p>MANAGED 交给容器去管理事务 —&gt;一般可以交给 spring 或者 springboot 去管理，当 mybatis 找不到容器支持时:也是没有事务。</p></li><li><p>不区分大小写</p></li></ol></li><li><p>可以 使用 properties 外部文件</p><ol><li><p>导入文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部属性资源文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbc.username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbc.password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">   &lt;/properties</span><br></pre></td></tr></table></figure><ol><li>properties 有两个属性 resource 和 url<ol><li>resource 从类的根路径开始找</li><li>url 则<strong>从指定的url加载，假设文件放在d:&#x2F;jdbc.properties，这个url可以写成：file:&#x2F;&#x2F;&#x2F;d:&#x2F;jdbc.properties。注意是三个斜杠哦。</strong></li></ol></li></ol></li><li><p>使用 变量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$&#123;parametersName&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--$&#123;key&#125;使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>mappers 也有两个属性 与 properties 相同。</p><ol><li>resource 从类的根路径开始找</li><li>url 则**从指定的url加载</li></ol></li></ol></blockquote><h4 id="1-1重要-修改数据源"><a href="#1-1重要-修改数据源" class="headerlink" title="1.1重要 修改数据源"></a>1.1重要 修改数据源</h4><blockquote><p>但凡为 程序提供 Connection 对象的都叫做数据源</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>type 设置类别三选一 type&#x3D;”[UNPOOLED|POOLED|JNDI</p><ul><li><strong>UNPOOLED</strong><ul><li>不使用连接池。</li></ul></li><li><strong>POOLED</strong><ul><li>使用 mybatis 自己实现的数据库连接池</li></ul></li><li><strong>JNDI</strong> – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：<ul><li><code>initial_context</code> – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。</li><li><code>data_source</code> – 这是引用数据源实例位置的上下文路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。</li></ul></li></ul><h4 id="2-mapper-xml-文件配置-与使用-配置传入参数"><a href="#2-mapper-xml-文件配置-与使用-配置传入参数" class="headerlink" title="2.mapper.xml 文件配置 与使用 配置传入参数"></a>2.mapper.xml 文件配置 与使用 配置传入参数</h4><hr><p>使用步骤</p><ul><li>1.配置扫描路径<ul><li>1.可以在 mybatis-config.xml 或 直接在 springboot 的配置文件中进行配置</li></ul></li><li>2.编写 sql语句</li><li>3.调用并<strong>传参</strong>。</li></ul><hr><p><strong>传参</strong></p><p>类别</p><p>按数量划分</p><hr><h5 id="一、多参数"><a href="#一、多参数" class="headerlink" title="一、多参数"></a>一、<strong>多参数</strong></h5><h6 id="方案：一、直接传参"><a href="#方案：一、直接传参" class="headerlink" title="方案：一、直接传参"></a>方案：一、直接传参</h6><p>​底层原理:</p><blockquote><p>在多个参数的情况下，mybatis 会在底层创建一个 mapper 集合。</p><p>将传入的参数 封装为 arg0&#x2F;param0 为key的集合。</p><p>#{xxx}</p><p>xxx应该写 arg0 按传入参数的下表开始。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t_student where name = #&#123;arg0&#125; and sex = #&#123;arg1&#125;</span><br></pre></td></tr></table></figure><p>是好处也是痛处 —-&gt;解决方案 @Param 注解 来写名字</p></blockquote><p>案例分析</p><p>需求：通过name和sex查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据name和sex查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectByNameAndSex</span><span class="params">(String name, Character sex)</span>;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByNameAndSex</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Student&gt; students = mapper.selectByNameAndSex(<span class="string">&quot;张三&quot;</span>, <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line">    students.forEach(student -&gt; System.out.println(student));</span><br><span class="line">&#125;</span><br><span class="line">&lt;select id=<span class="string">&quot;selectByNameAndSex&quot;</span> resultType=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">  select * from t_student <span class="type">where</span> <span class="variable">name</span> <span class="operator">=</span> #&#123;name&#125; <span class="type">and</span> <span class="variable">sex</span> <span class="operator">=</span> #&#123;sex&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/02/05/SSM/MyBatis/1-MyBatis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/1660641021618-ce3ac913-fe10-45f5-9760-3e51ef2dd864.png" alt="img"></p><p>异常信息描述了：name参数找不到，可用的参数包括[arg1, arg0, param1, param2]</p><p>修改StudentMapper.xml配置文件：尝试使用[arg1, arg0, param1, param2]去参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByNameAndSex&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--select * from t_student where name = #&#123;name&#125; and sex = #&#123;sex&#125;--&gt;</span></span><br><span class="line">  select * from t_student where name = #&#123;arg0&#125; and sex = #&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/05/SSM/MyBatis/1-MyBatis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/1660641284279-64a7312a-d036-448f-aaef-a1bcde8abba2.png" alt="img"></p><p>再次尝试修改StudentMapper.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByNameAndSex&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--select * from t_student where name = #&#123;name&#125; and sex = #&#123;sex&#125;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--select * from t_student where name = #&#123;arg0&#125; and sex = #&#123;arg1&#125;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--select * from t_student where name = #&#123;param1&#125; and sex = #&#123;param2&#125;--&gt;</span></span><br><span class="line">  select * from t_student where name = #&#123;arg0&#125; and sex = #&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过测试可以看到：</p><ul><li>arg0 是第一个参数</li><li>param1是第一个参数</li><li>arg1 是第二个参数</li><li>param2是第二个参数</li></ul><p>实现原理：<strong>实际上在mybatis底层会创建一个map集合，以arg0&#x2F;param1为key，以方法上的参数为value</strong>，例如以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;arg0&quot;</span>, name);</span><br><span class="line">map.put(<span class="string">&quot;arg1&quot;</span>, sex);</span><br><span class="line">map.put(<span class="string">&quot;param1&quot;</span>, name);</span><br><span class="line">map.put(<span class="string">&quot;param2&quot;</span>, sex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以可以这样取值：#&#123;arg0&#125; #&#123;arg1&#125; #&#123;param1&#125; #&#123;param2&#125;</span></span><br><span class="line"><span class="comment">// 其本质就是#&#123;map集合的key&#125;</span></span><br></pre></td></tr></table></figure><p>注意：<strong>使用mybatis****3.4.2之前的版本时：要用#{0}和#{1}这种形式。</strong></p><h5 id="Param注解—–-gt-解决方案一的痛点"><a href="#Param注解—–-gt-解决方案一的痛点" class="headerlink" title="@Param注解—–&gt;解决方案一的痛点"></a>@Param注解—–&gt;解决方案一的痛点</h5><p>可以不用arg0 arg1 param1 param2吗？这个map集合的key我们自定义可以吗？当然可以。使用@Param注解即可。这样可以增强可读性。</p><hr><p>实际上在mybatis底层会创建一个map集合，以arg0&#x2F;param1为key，以方法上的参数为value.</p><hr><p>可以通过 @Param 指定 传入参数 在 mybatis 底层创建 的mapper 对应的 keyName。</p><p>​使用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Param(&quot;keyName&quot;)</span></span><br></pre></td></tr></table></figure><p>使用案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; <span class="title function_">selectByNameAndAge</span><span class="params">(<span class="meta">@Param(value=&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;age&quot;)</span> <span class="type">int</span> age)</span>;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>使用 @param 直接后，arg0 和 argxxx 会失效，但 param0 和 param1 还可以使用。</p><p>注解的原理。</p><p><img src="/2023/02/05/SSM/MyBatis/1-MyBatis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20230206235943191.png" alt="image-20230206235943191"></p><h6 id="方案：二、使用mapper集合"><a href="#方案：二、使用mapper集合" class="headerlink" title="方案：二、使用mapper集合"></a>方案：二、使用mapper集合</h6><h6 id="方案：三、使用-pojo-domain-类"><a href="#方案：三、使用-pojo-domain-类" class="headerlink" title="方案：三、使用 pojo(domain) 类"></a>方案：三、使用 pojo(domain) 类</h6><h5 id="二、单参数"><a href="#二、单参数" class="headerlink" title="二、单参数"></a>二、<strong>单参数</strong></h5><p>直接传入参数即可，mybatis 会直接将传入的值添加到 对应的地方。</p><blockquote><p>底层是 将占位符 #{xxx} 直接转换为 ？然后调用 selectOne 方法。即xxx里填什么都没关系。</p></blockquote><h2 id="③、一些技巧"><a href="#③、一些技巧" class="headerlink" title="③、一些技巧"></a>③、一些技巧</h2><h3 id="1-使用-sql-自动生成的主键，并将其保存到一个地方。"><a href="#1-使用-sql-自动生成的主键，并将其保存到一个地方。" class="headerlink" title="1.使用 sql 自动生成的主键，并将其保存到一个地方。"></a>1.使用 sql 自动生成的主键，并将其保存到一个地方。</h3><blockquote><p>前提是：主键是自动生成的。</p><p>业务背景：一个用户有多个角色。</p></blockquote><p><img src="/2023/02/05/SSM/MyBatis/1-MyBatis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/1660808179627-69b14158-fbd4-4189-83cf-aa944fe26fa1.png" alt="E9F189EB-F5E2-465f-828C-127DB34968FE.png"></p><p>插入一条新的记录之后，自动生成了主键，而这个主键需要在其他表中使用时。</p><p>插入一个用户数据的同时需要给该用户分配角色：需要将生成的用户的id插入到角色表的user_id字段上。</p><hr><p>第一种方式：可以先插入用户数据，再写一条查询语句获取id，然后再插入user_id字段。【比较麻烦】</p><p>第二种方式：mybatis提供了一种方式更加便捷。</p><p>方法步骤</p><ul><li><p>在 mapper.xml 映射文件中</p><ul><li>1.配置   useGeneratedKeys&#x3D;”true”<br>             keyProperty&#x3D;”储存主键的字段名。” <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUseGeneratedKeys&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">  insert into t_car(id,car_num,brand,guide_price,produce_time,car_type) values(null,#&#123;carNum&#125;,#&#123;brand&#125;,#&#123;guidePrice&#125;,#&#123;produceTime&#125;,#&#123;carType&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">即可在传入的 对象中使用 对象.id 得到</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUseGeneratedKeys</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.class);</span><br><span class="line">    <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">    car.setCarNum(<span class="string">&quot;5262&quot;</span>);</span><br><span class="line">    car.setBrand(<span class="string">&quot;BYD汉&quot;</span>);</span><br><span class="line">    car.setGuidePrice(<span class="number">30.3</span>);</span><br><span class="line">    car.setProduceTime(<span class="string">&quot;2020-10-11&quot;</span>);</span><br><span class="line">    car.setCarType(<span class="string">&quot;新能源&quot;</span>);</span><br><span class="line">    mapper.insertUseGeneratedKeys(car);</span><br><span class="line">    SqlSessionUtil.openSession().commit();</span><br><span class="line">    ====================</span><br><span class="line">    System.out.println(car.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-结果映射"><a href="#2-结果映射" class="headerlink" title="2.结果映射"></a>2.结果映射</h3><hr><h4 id="1-使用-resultmapper"><a href="#1-使用-resultmapper" class="headerlink" title="1).使用 resultmapper"></a>1).使用 resultmapper</h4><h4 id="②-使用驼峰命名自动映射。、"><a href="#②-使用驼峰命名自动映射。、" class="headerlink" title="② 使用驼峰命名自动映射。、"></a>② 使用驼峰命名自动映射。、</h4><p>使用这种方式的前提是：属性名遵循Java的命名规范，数据库表的列名遵循SQL的命名规范。</p><p>Java命名规范：首字母小写，后面每个单词首字母大写，遵循驼峰命名方式。</p><p>SQL命名规范：全部小写，单词之间采用下划线分割。</p><p>比如以下的对应关系：</p><table><thead><tr><th><strong>实体类中的属性名</strong></th><th><strong>数据库表的列名</strong></th></tr></thead><tbody><tr><td>carNum</td><td>car_num</td></tr><tr><td>carType</td><td>car_type</td></tr><tr><td>produceTime</td><td>produce_time</td></tr></tbody></table><h3 id="3-创建-大-maper"><a href="#3-创建-大-maper" class="headerlink" title="3.创建 大 maper"></a>3.创建 大 maper</h3><h3 id="4-模糊查询"><a href="#4-模糊查询" class="headerlink" title="4.模糊查询"></a>4.模糊查询</h3><hr><p>两种拼接方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.双引号大法  ---&gt; 单引号不行，已经试过了。</span><br><span class="line">&quot;%&quot;#&#123;&#125; &quot;#&quot;</span><br><span class="line">2.concat 拼接大法</span><br><span class="line">concat(&#x27;#&#x27;,#&#123;band&#125;,&#x27;%&#x27;)</span><br></pre></td></tr></table></figure><hr><p>需求：查询奔驰系列的汽车。【只要品牌brand中含有奔驰两个字的都查询出来。】</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用${}"></a>使用${}</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据品牌进行模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> likeBrank</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">List&lt;Car&gt; <span class="title function_">selectLikeByBrand</span><span class="params">(String likeBrank)</span>;</span><br><span class="line">&lt;select id=<span class="string">&quot;selectLikeByBrand&quot;</span> resultType=<span class="string">&quot;Car&quot;</span>&gt;</span><br><span class="line">  select</span><br><span class="line">  id,car_num as carNum,brand,guide_price as guidePrice,produce_time as produceTime,car_type as carType</span><br><span class="line">  from</span><br><span class="line">  t_car</span><br><span class="line">  where</span><br><span class="line">  brand like <span class="string">&#x27;%$&#123;brand&#125;%&#x27;</span></span><br><span class="line">&lt;/select&gt;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectLikeByBrand</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">CarMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSessionUtil.openSession().getMapper(CarMapper.class);</span><br><span class="line">    List&lt;Car&gt; cars = mapper.selectLikeByBrand(<span class="string">&quot;奔驰&quot;</span>);</span><br><span class="line">    cars.forEach(car -&gt; System.out.println(car));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/02/05/SSM/MyBatis/1-MyBatis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/1660804429027-895f9a7b-5a1d-4ecd-b5b4-81dbca8ee101.png" alt="img"></p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用#{}"></a>使用#{}</h4><p>第一种：concat函数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectLikeByBrand&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">  id,car_num as carNum,brand,guide_price as guidePrice,produce_time as produceTime,car_type as carType</span><br><span class="line">  from</span><br><span class="line">  t_car</span><br><span class="line">  where</span><br><span class="line">  brand like concat(&#x27;%&#x27;,#&#123;brand&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/02/05/SSM/MyBatis/1-MyBatis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/1660804562331-8febb980-24d8-4e18-8e4b-6416f28aa251.png" alt="img"></p><p>第二种：双引号方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectLikeByBrand&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Car&quot;</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">  id,car_num as carNum,brand,guide_price as guidePrice,produce_time as produceTime,car_type as carType</span><br><span class="line">  from</span><br><span class="line">  t_car</span><br><span class="line">  where</span><br><span class="line">  brand like &quot;%&quot;#&#123;brand&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/05/SSM/MyBatis/1-MyBatis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/1660804873326-12cbff35-f4fe-4019-90a4-7b758d7c4e39.png" alt="img"></p><h2 id="④、底层原理"><a href="#④、底层原理" class="headerlink" title="④、底层原理"></a>④、底层原理</h2><h3 id="一、getMapper-的原理"><a href="#一、getMapper-的原理" class="headerlink" title="一、getMapper 的原理"></a>一、getMapper 的原理</h3><hr><p>简要描述:</p><p>​通过 javassit 生成 dao 接口的代理类。然后 使用字符拼接的方式实现 dao 接口 要实现的方法体。 </p><hr><p>细节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mybatis基本程序</span><br><span class="line"><span class="comment">// 1.创建SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="comment">// 2.创建SqlSessionFactory对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line"><span class="comment">// 3.创建SqlSession对象           </span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">// 4.执行SQL</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;insertCar&quot;</span>);</span><br><span class="line"></span><br><span class="line">抽离核心</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;insertCar&quot;</span>);</span><br><span class="line">这两部每一个都不一样，其他<span class="number">1</span> <span class="number">2</span>部相同。</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 获取sqlId（这里非常重要：因为这行代码导致以后namespace必须是接口的全限定接口名，sqlId必须是接口中方法的方法名。）</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sqlId</span> <span class="operator">=</span> daoInterface.getName() + <span class="string">&quot;.&quot;</span> + methodName;</span><br><span class="line"><span class="comment">// 获取SqlCommondType</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sqlCommondTypeName</span> <span class="operator">=</span> sqlSession.getConfiguration().getMappedStatement(sqlId).getSqlCommandType().name();</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;SELECT&quot;</span>.equals(sqlCommondTypeName)) &#123;</span><br><span class="line">methodStr.append(<span class="string">&quot;org.apache.ibatis.session.SqlSession sqlSession = com.powernode.bank.utils.SqlSessionUtil.openSession();&quot;</span>);</span><br><span class="line">methodStr.append(<span class="string">&quot;Object obj = sqlSession.selectOne(\&quot;&quot;</span> + sqlId + <span class="string">&quot;\&quot;, arg0);&quot;</span>);</span><br><span class="line">methodStr.append(<span class="string">&quot;return (&quot;</span> + returnTypeName + <span class="string">&quot;)obj;&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;UPDATE&quot;</span>.equals(sqlCommondTypeName)) &#123;</span><br><span class="line">    methodStr.append(<span class="string">&quot;org.apache.ibatis.session.SqlSession sqlSession = com.powernode.bank.utils.SqlSessionUtil.openSession();&quot;</span>);</span><br><span class="line">methodStr.append(<span class="string">&quot;int count = sqlSession.update(\&quot;&quot;</span> + sqlId + <span class="string">&quot;\&quot;, arg0);&quot;</span>);</span><br><span class="line">methodStr.append(<span class="string">&quot;return count;&quot;</span>);</span><br><span class="line">            &#125;    </span><br></pre></td></tr></table></figure><blockquote><p>String sqlId &#x3D; daoInterface.getName() + “.” + methodName; </p><ul><li>daointerface.getName() 获取了接口的全类名</li><li>methodName 前面获取了 daointerface 中对应的方法名</li></ul><p>&#x3D;&#x3D;这一步 限定了 mapper 文件里 的namespacce必须为接口的全类名，id为方法名。&#x3D;&#x3D;</p><p>eg:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.salgradeMapper&quot;</span>&gt;</span> --&gt;接口的全类名</span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>→<span class="attr">方法名</span> &lt;/<span class="attr">insert</span>&gt;</span> useGeneratedKeys=&quot;true&quot; keyProperty=&quot;grade&quot; &gt;</span><br><span class="line">      insert into</span><br><span class="line">          salgrade(grade,losal,hisal)</span><br><span class="line">        values</span><br><span class="line">            (null,#&#123;losal&#125;,#&#123;hisal&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="⑤动态-SQL"><a href="#⑤动态-SQL" class="headerlink" title="⑤动态 SQL"></a>⑤动态 SQL</h2><h3 id="1-拼接-where"><a href="#1-拼接-where" class="headerlink" title="1.拼接 where"></a>1.拼接 where</h3><hr><p>一个技巧</p><p>where 1&#x3D;1 不会影响条件</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-mybatis基本使用.md</title>
      <link href="/2023/02/05/SSM/MyBatis/"/>
      <url>/2023/02/05/SSM/MyBatis/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.xml/xerces/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.xml/xerces/</url>
      
        <content type="html"><![CDATA[<h2 id="Apache-Xerces-v2-12-1"><a href="#Apache-Xerces-v2-12-1" class="headerlink" title="Apache Xerces v2.12.1"></a>Apache Xerces v2.12.1</h2><h3 id="Apache-Xerces-Notice"><a href="#Apache-Xerces-Notice" class="headerlink" title="Apache Xerces Notice"></a>Apache Xerces Notice</h3><pre>    =========================================================================    == NOTICE file corresponding to section 4(d) of the Apache License,    ==    == Version 2.0, in this case for the Apache Xerces Java distribution.  ==    =========================================================================        Apache Xerces Java    Copyright 1999-2020 The Apache Software Foundation    This product includes software developed at    The Apache Software Foundation (http://www.apache.org/).    Portions of this software were originally based on the following:    - software copyright (c) 1999, IBM Corporation., http://www.ibm.com.    - software copyright (c) 1999, Sun Microsystems., http://www.sun.com.    - voluntary contributions made by Paul Eng on behalf of the    Apache Software Foundation that were originally developed at iClick, Inc.,    software copyright (c) 1999.</pre><h3 id="Apache-2-0-License"><a href="#Apache-2-0-License" class="headerlink" title="Apache 2.0 License"></a>Apache 2.0 License</h3><pre>                              Apache License                        Version 2.0, January 2004                     http://www.apache.org/licenses/TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION1. Definitions.   "License" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.   "Licensor" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.   "Legal Entity" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   "control" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.   "You" (or "Your") shall mean an individual or Legal Entity   exercising permissions granted by this License.   "Source" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.   "Object" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.   "Work" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).   "Derivative Works" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.   "Contribution" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, "submitted"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as "Not a Contribution."   "Contributor" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.2. Grant of Copyright License. Subject to the terms and conditions of   this License, each Contributor hereby grants to You a perpetual,   worldwide, non-exclusive, no-charge, royalty-free, irrevocable   copyright license to reproduce, prepare Derivative Works of,   publicly display, publicly perform, sublicense, and distribute the   Work and such Derivative Works in Source or Object form.3. Grant of Patent License. Subject to the terms and conditions of   this License, each Contributor hereby grants to You a perpetual,   worldwide, non-exclusive, no-charge, royalty-free, irrevocable   (except as stated in this section) patent license to make, have made,   use, offer to sell, sell, import, and otherwise transfer the Work,   where such license applies only to those patent claims licensable   by such Contributor that are necessarily infringed by their   Contribution(s) alone or by combination of their Contribution(s)   with the Work to which such Contribution(s) was submitted. If You   institute patent litigation against any entity (including a   cross-claim or counterclaim in a lawsuit) alleging that the Work   or a Contribution incorporated within the Work constitutes direct   or contributory patent infringement, then any patent licenses   granted to You under this License for that Work shall terminate   as of the date such litigation is filed.4. Redistribution. You may reproduce and distribute copies of the   Work or Derivative Works thereof in any medium, with or without   modifications, and in Source or Object form, provided that You   meet the following conditions:   (a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and   (b) You must cause any modified files to carry prominent notices       stating that You changed the files; and   (c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and   (d) If the Work includes a "NOTICE" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.   You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.5. Submission of Contributions. Unless You explicitly state otherwise,   any Contribution intentionally submitted for inclusion in the Work   by You to the Licensor shall be under the terms and conditions of   this License, without any additional terms or conditions.   Notwithstanding the above, nothing herein shall supersede or modify   the terms of any separate license agreement you may have executed   with Licensor regarding such Contributions.6. Trademarks. This License does not grant permission to use the trade   names, trademarks, service marks, or product names of the Licensor,   except as required for reasonable and customary use in describing the   origin of the Work and reproducing the content of the NOTICE file.7. Disclaimer of Warranty. Unless required by applicable law or   agreed to in writing, Licensor provides the Work (and each   Contributor provides its Contributions) on an "AS IS" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or   implied, including, without limitation, any warranties or conditions   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A   PARTICULAR PURPOSE. You are solely responsible for determining the   appropriateness of using or redistributing the Work and assume any   risks associated with Your exercise of permissions under this License.8. Limitation of Liability. In no event and under no legal theory,   whether in tort (including negligence), contract, or otherwise,   unless required by applicable law (such as deliberate and grossly   negligent acts) or agreed to in writing, shall any Contributor be   liable to You for damages, including any direct, indirect, special,   incidental, or consequential damages of any character arising as a   result of this License or out of the use or inability to use the   Work (including but not limited to damages for loss of goodwill,   work stoppage, computer failure or malfunction, or any and all   other commercial damages or losses), even if such Contributor   has been advised of the possibility of such damages.9. Accepting Warranty or Additional Liability. While redistributing   the Work or Derivative Works thereof, You may choose to offer,   and charge a fee for, acceptance of support, warranty, indemnity,   or other liability obligations and/or rights consistent with this   License. However, in accepting such obligations, You may act only   on Your own behalf and on Your sole responsibility, not on behalf   of any other Contributor, and only if You agree to indemnify,   defend, and hold each Contributor harmless for any liability   incurred by, or claims asserted against, such Contributor by reason   of your accepting any such warranty or additional liability.END OF TERMS AND CONDITIONSAPPENDIX: How to apply the Apache License to your work.   To apply the Apache License to your work, attach the following   boilerplate notice, with the fields enclosed by brackets "[]"   replaced with your own identifying information. (Don't include   the brackets!)  The text should be enclosed in the appropriate   comment syntax for the file format. We also recommend that a   file or class name and description of purpose be included on the   same "printed page" as the copyright notice for easier   identification within third-party archives.Copyright [yyyy] [name of copyright owner]Licensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.xml/xalan/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.xml/xalan/</url>
      
        <content type="html"><![CDATA[<h2 id="Apache-Xalan-v2-7-2"><a href="#Apache-Xalan-v2-7-2" class="headerlink" title="Apache Xalan v2.7.2"></a>Apache Xalan v2.7.2</h2><h3 id="Apache-Xalan-Notice"><a href="#Apache-Xalan-Notice" class="headerlink" title="Apache Xalan Notice"></a>Apache Xalan Notice</h3><pre>    ======================================================================================    ==  NOTICE file corresponding to the section 4d of the Apache License, Version 2.0, ==    ==  in this case for the Apache Xalan distribution.                                 ==    ======================================================================================   This product includes software developed by   The Apache Software Foundation (http://www.apache.org/).   Specifically, we only include the XSLTC portion of the source from the Xalan distribution.    The Xalan project has two processors: an interpretive one (Xalan Interpretive) and a    compiled one (The XSLT Compiler (XSLTC)). We *only* use the XSLTC part of Xalan; We use   the source from the packages that are part of the XSLTC sources.   Portions of this software was originally based on the following:     - software copyright (c) 1999-2002, Lotus Development Corporation., http://www.lotus.com.     - software copyright (c) 2001-2002, Sun Microsystems., http://www.sun.com.     - software copyright (c) 2003, IBM Corporation., http://www.ibm.com.     - voluntary contributions made by Ovidiu Predescu (ovidiu@cup.hp.com) on behalf of the       Apache Software Foundation and was originally developed at Hewlett Packard Company.</pre><h3 id="Apache-2-0-License"><a href="#Apache-2-0-License" class="headerlink" title="Apache 2.0 License"></a>Apache 2.0 License</h3><pre>                              Apache License                        Version 2.0, January 2004                     http://www.apache.org/licenses/TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION1. Definitions.   "License" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.   "Licensor" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.   "Legal Entity" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   "control" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.   "You" (or "Your") shall mean an individual or Legal Entity   exercising permissions granted by this License.   "Source" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.   "Object" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.   "Work" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).   "Derivative Works" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.   "Contribution" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, "submitted"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as "Not a Contribution."   "Contributor" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.2. Grant of Copyright License. Subject to the terms and conditions of   this License, each Contributor hereby grants to You a perpetual,   worldwide, non-exclusive, no-charge, royalty-free, irrevocable   copyright license to reproduce, prepare Derivative Works of,   publicly display, publicly perform, sublicense, and distribute the   Work and such Derivative Works in Source or Object form.3. Grant of Patent License. Subject to the terms and conditions of   this License, each Contributor hereby grants to You a perpetual,   worldwide, non-exclusive, no-charge, royalty-free, irrevocable   (except as stated in this section) patent license to make, have made,   use, offer to sell, sell, import, and otherwise transfer the Work,   where such license applies only to those patent claims licensable   by such Contributor that are necessarily infringed by their   Contribution(s) alone or by combination of their Contribution(s)   with the Work to which such Contribution(s) was submitted. If You   institute patent litigation against any entity (including a   cross-claim or counterclaim in a lawsuit) alleging that the Work   or a Contribution incorporated within the Work constitutes direct   or contributory patent infringement, then any patent licenses   granted to You under this License for that Work shall terminate   as of the date such litigation is filed.4. Redistribution. You may reproduce and distribute copies of the   Work or Derivative Works thereof in any medium, with or without   modifications, and in Source or Object form, provided that You   meet the following conditions:   (a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and   (b) You must cause any modified files to carry prominent notices       stating that You changed the files; and   (c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and   (d) If the Work includes a "NOTICE" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.   You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.5. Submission of Contributions. Unless You explicitly state otherwise,   any Contribution intentionally submitted for inclusion in the Work   by You to the Licensor shall be under the terms and conditions of   this License, without any additional terms or conditions.   Notwithstanding the above, nothing herein shall supersede or modify   the terms of any separate license agreement you may have executed   with Licensor regarding such Contributions.6. Trademarks. This License does not grant permission to use the trade   names, trademarks, service marks, or product names of the Licensor,   except as required for reasonable and customary use in describing the   origin of the Work and reproducing the content of the NOTICE file.7. Disclaimer of Warranty. Unless required by applicable law or   agreed to in writing, Licensor provides the Work (and each   Contributor provides its Contributions) on an "AS IS" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or   implied, including, without limitation, any warranties or conditions   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A   PARTICULAR PURPOSE. You are solely responsible for determining the   appropriateness of using or redistributing the Work and assume any   risks associated with Your exercise of permissions under this License.8. Limitation of Liability. In no event and under no legal theory,   whether in tort (including negligence), contract, or otherwise,   unless required by applicable law (such as deliberate and grossly   negligent acts) or agreed to in writing, shall any Contributor be   liable to You for damages, including any direct, indirect, special,   incidental, or consequential damages of any character arising as a   result of this License or out of the use or inability to use the   Work (including but not limited to damages for loss of goodwill,   work stoppage, computer failure or malfunction, or any and all   other commercial damages or losses), even if such Contributor   has been advised of the possibility of such damages.9. Accepting Warranty or Additional Liability. While redistributing   the Work or Derivative Works thereof, You may choose to offer,   and charge a fee for, acceptance of support, warranty, indemnity,   or other liability obligations and/or rights consistent with this   License. However, in accepting such obligations, You may act only   on Your own behalf and on Your sole responsibility, not on behalf   of any other Contributor, and only if You agree to indemnify,   defend, and hold each Contributor harmless for any liability   incurred by, or claims asserted against, such Contributor by reason   of your accepting any such warranty or additional liability.END OF TERMS AND CONDITIONSAPPENDIX: How to apply the Apache License to your work.   To apply the Apache License to your work, attach the following   boilerplate notice, with the fields enclosed by brackets "[]"   replaced with your own identifying information. (Don't include   the brackets!)  The text should be enclosed in the appropriate   comment syntax for the file format. We also recommend that a   file or class name and description of purpose be included on the   same "printed page" as the copyright notice for easier   identification within third-party archives.Copyright [yyyy] [name of copyright owner]Licensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.JLEX COPYRIGHT NOTICE, LICENSE AND DISCLAIMER.Copyright 1996-2003 by Elliot Joel Berk and C. Scott AnanianPermission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both the copyright notice and this permission notice and warranty disclaimer appear in supporting documentation, and that the name of the authors or their employers not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission.The authors and their employers disclaim all warranties with regard to this software, including all implied warranties of merchantability and fitness. In no event shall the authors or their employers be liable for any special, indirect or consequential damages or any damages whatsoever resulting from loss of use, data or profits, whether in an action of contract, negligence or other tortious action, arising out of or in connection with the use or performance of this software.The portions of JLex output which are hard-coded into the JLex source code are (naturally) covered by this same license.</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.xml/jcup/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.xml/jcup/</url>
      
        <content type="html"><![CDATA[<h2 id="CUP-Parser-Generator-for-Java-v-0-11b"><a href="#CUP-Parser-Generator-for-Java-v-0-11b" class="headerlink" title="CUP Parser Generator for Java v 0.11b"></a>CUP Parser Generator for Java v 0.11b</h2><h3 id="CUP-Parser-Generator-License"><a href="#CUP-Parser-Generator-License" class="headerlink" title="CUP Parser Generator License"></a>CUP Parser Generator License</h3><pre>Copyright 1996-2015 by Scott Hudson, Frank Flannery, C. Scott Ananian, Michael PetterPermission to use, copy, modify, and distribute this software and itsdocumentation for any purpose and without fee is hereby granted, providedthat the above copyright notice appear in all copies and that boththe copyright notice and this permission notice and warranty disclaimerappear in supporting documentation, and that the names of the authors ortheir employers not be used in advertising or publicity pertaining todistribution of the software without specific, written prior permission.The authors and their employers disclaim all warranties with regard tothis software, including all implied warranties of merchantability andfitness. In no event shall the authors or their employers be liable forany special, indirect or consequential damages or any damages whatsoeverresulting from loss of use, data or profits, whether in an action ofcontract, negligence or other tortious action, arising out of or inconnection with the use or performance of this software.</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.xml/dom/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.xml/dom/</url>
      
        <content type="html"><![CDATA[<h2 id="DOM-Level-3-Core-Specification-v1-0"><a href="#DOM-Level-3-Core-Specification-v1-0" class="headerlink" title="DOM Level 3 Core Specification v1.0"></a>DOM Level 3 Core Specification v1.0</h2><h3 id="W3C-License"><a href="#W3C-License" class="headerlink" title="W3C License"></a>W3C License</h3><pre>W3C SOFTWARE NOTICE AND LICENSEhttp://www.w3.org/Consortium/Legal/2002/copyright-software-20021231This work (and included software, documentation such as READMEs, or otherrelated items) is being provided by the copyright holders under the followinglicense. By obtaining, using and/or copying this work, you (the licensee)agree that you have read, understood, and will comply with the following termsand conditions.Permission to copy, modify, and distribute this software and itsdocumentation, with or without modification, for any purpose and without feeor royalty is hereby granted, provided that you include the following on ALLcopies of the software and documentation or portions thereof, includingmodifications:   1.The full text of this NOTICE in a location viewable to users of the   redistributed or derivative work.   2.Any pre-existing intellectual property disclaimers, notices, or terms and   conditions. If none exist, the W3C Software Short Notice should be included   (hypertext is preferred, text is permitted) within the body of any   redistributed or derivative code.   3.Notice of any changes or modifications to the files, including the date   changes were made. (We recommend you provide URIs to the location from   which the code is derived.)THIS SOFTWARE AND DOCUMENTATION IS PROVIDED "AS IS," AND COPYRIGHT HOLDERSMAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOTLIMITED TO, WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULARPURPOSE OR THAT THE USE OF THE SOFTWARE OR DOCUMENTATION WILL NOT INFRINGE ANYTHIRD PARTY PATENTS,COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIALOR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE ORDOCUMENTATION.  The name and trademarks of copyright holders may NOT be usedin advertising or publicity pertaining to the software without specific,written prior permission. Title to copyright in this software and anyassociated documentation will at all times remain with copyright holders.____________________________________This formulation of W3C's notice and license became active on December 312002. This version removes the copyright ownership notice such that thislicense can be used with materials other than those owned by the W3C, reflectsthat ERCIM is now a host of the W3C, includes references to this specificdated version of the license, and removes the ambiguous grant of "use".Otherwise, this version is the same as the previous version and is written soas to preserve the Free Software Foundation's assessment of GPL compatibilityand OSI's certification under the Open Source Definition. Please see ourCopyright FAQ for common questions about using materials from our site,including specific terms and conditions for packages like libwww, Amaya, andJigsaw. Other questions about this notice can be directed tosite-policy@w3.org.</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.xml/bcel/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.xml/bcel/</url>
      
        <content type="html"><![CDATA[<h2 id="Apache-Commons-Byte-Code-Engineering-Library-BCEL-Version-6-5-0"><a href="#Apache-Commons-Byte-Code-Engineering-Library-BCEL-Version-6-5-0" class="headerlink" title="Apache Commons Byte Code Engineering Library (BCEL) Version 6.5.0"></a>Apache Commons Byte Code Engineering Library (BCEL) Version 6.5.0</h2><h3 id="Apache-Commons-BCEL-Notice"><a href="#Apache-Commons-BCEL-Notice" class="headerlink" title="Apache Commons BCEL Notice"></a>Apache Commons BCEL Notice</h3><pre>    Apache Commons BCEL    Copyright 2004-2020 The Apache Software Foundation    This product includes software developed at    The Apache Software Foundation (https://www.apache.org/).</pre><h3 id="Apache-2-0-License"><a href="#Apache-2-0-License" class="headerlink" title="Apache 2.0 License"></a>Apache 2.0 License</h3><pre>                              Apache License                        Version 2.0, January 2004                     http://www.apache.org/licenses/TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION1. Definitions.   "License" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.   "Licensor" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.   "Legal Entity" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   "control" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.   "You" (or "Your") shall mean an individual or Legal Entity   exercising permissions granted by this License.   "Source" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.   "Object" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.   "Work" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).   "Derivative Works" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.   "Contribution" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, "submitted"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as "Not a Contribution."   "Contributor" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.2. Grant of Copyright License. Subject to the terms and conditions of   this License, each Contributor hereby grants to You a perpetual,   worldwide, non-exclusive, no-charge, royalty-free, irrevocable   copyright license to reproduce, prepare Derivative Works of,   publicly display, publicly perform, sublicense, and distribute the   Work and such Derivative Works in Source or Object form.3. Grant of Patent License. Subject to the terms and conditions of   this License, each Contributor hereby grants to You a perpetual,   worldwide, non-exclusive, no-charge, royalty-free, irrevocable   (except as stated in this section) patent license to make, have made,   use, offer to sell, sell, import, and otherwise transfer the Work,   where such license applies only to those patent claims licensable   by such Contributor that are necessarily infringed by their   Contribution(s) alone or by combination of their Contribution(s)   with the Work to which such Contribution(s) was submitted. If You   institute patent litigation against any entity (including a   cross-claim or counterclaim in a lawsuit) alleging that the Work   or a Contribution incorporated within the Work constitutes direct   or contributory patent infringement, then any patent licenses   granted to You under this License for that Work shall terminate   as of the date such litigation is filed.4. Redistribution. You may reproduce and distribute copies of the   Work or Derivative Works thereof in any medium, with or without   modifications, and in Source or Object form, provided that You   meet the following conditions:   (a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and   (b) You must cause any modified files to carry prominent notices       stating that You changed the files; and   (c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and   (d) If the Work includes a "NOTICE" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.   You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.5. Submission of Contributions. Unless You explicitly state otherwise,   any Contribution intentionally submitted for inclusion in the Work   by You to the Licensor shall be under the terms and conditions of   this License, without any additional terms or conditions.   Notwithstanding the above, nothing herein shall supersede or modify   the terms of any separate license agreement you may have executed   with Licensor regarding such Contributions.6. Trademarks. This License does not grant permission to use the trade   names, trademarks, service marks, or product names of the Licensor,   except as required for reasonable and customary use in describing the   origin of the Work and reproducing the content of the NOTICE file.7. Disclaimer of Warranty. Unless required by applicable law or   agreed to in writing, Licensor provides the Work (and each   Contributor provides its Contributions) on an "AS IS" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or   implied, including, without limitation, any warranties or conditions   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A   PARTICULAR PURPOSE. You are solely responsible for determining the   appropriateness of using or redistributing the Work and assume any   risks associated with Your exercise of permissions under this License.8. Limitation of Liability. In no event and under no legal theory,   whether in tort (including negligence), contract, or otherwise,   unless required by applicable law (such as deliberate and grossly   negligent acts) or agreed to in writing, shall any Contributor be   liable to You for damages, including any direct, indirect, special,   incidental, or consequential damages of any character arising as a   result of this License or out of the use or inability to use the   Work (including but not limited to damages for loss of goodwill,   work stoppage, computer failure or malfunction, or any and all   other commercial damages or losses), even if such Contributor   has been advised of the possibility of such damages.9. Accepting Warranty or Additional Liability. While redistributing   the Work or Derivative Works thereof, You may choose to offer,   and charge a fee for, acceptance of support, warranty, indemnity,   or other liability obligations and/or rights consistent with this   License. However, in accepting such obligations, You may act only   on Your own behalf and on Your sole responsibility, not on behalf   of any other Contributor, and only if You agree to indemnify,   defend, and hold each Contributor harmless for any liability   incurred by, or claims asserted against, such Contributor by reason   of your accepting any such warranty or additional liability.END OF TERMS AND CONDITIONSAPPENDIX: How to apply the Apache License to your work.   To apply the Apache License to your work, attach the following   boilerplate notice, with the fields enclosed by brackets "[]"   replaced with your own identifying information. (Don't include   the brackets!)  The text should be enclosed in the appropriate   comment syntax for the file format. We also recommend that a   file or class name and description of purpose be included on the   same "printed page" as the copyright notice for easier   identification within third-party archives.Copyright [yyyy] [name of copyright owner]Licensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.desktop/libpng/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.desktop/libpng/</url>
      
        <content type="html"><![CDATA[<h2 id="libpng-v1-6-37"><a href="#libpng-v1-6-37" class="headerlink" title="libpng v1.6.37"></a>libpng v1.6.37</h2><h3 id="libpng-License"><a href="#libpng-License" class="headerlink" title="libpng License"></a>libpng License</h3><pre>COPYRIGHT NOTICE, DISCLAIMER, and LICENSE=========================================PNG Reference Library License version 2--------------------------------------- * Copyright (c) 1995-2019 The PNG Reference Library Authors. * Copyright (c) 2018-2019 Cosmin Truta. * Copyright (c) 2000-2002, 2004, 2006-2018 Glenn Randers-Pehrson. * Copyright (c) 1996-1997 Andreas Dilger. * Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.The software is supplied "as is", without warranty of any kind,express or implied, including, without limitation, the warrantiesof merchantability, fitness for a particular purpose, title, andnon-infringement.  In no event shall the Copyright owners, oranyone distributing the software, be liable for any damages orother liability, whether in contract, tort or otherwise, arisingfrom, out of, or in connection with the software, or the use orother dealings in the software, even if advised of the possibilityof such damage.Permission is hereby granted to use, copy, modify, and distributethis software, or portions hereof, for any purpose, without fee,subject to the following restrictions: 1. The origin of this software must not be misrepresented; you    must not claim that you wrote the original software.  If you    use this software in a product, an acknowledgment in the product    documentation would be appreciated, but is not required. 2. Altered source versions must be plainly marked as such, and must    not be misrepresented as being the original software. 3. This Copyright notice may not be removed or altered from any    source or altered source distribution.PNG Reference Library License version 1 (for libpng 0.5 through 1.6.35)-----------------------------------------------------------------------libpng versions 1.0.7, July 1, 2000, through 1.6.35, July 15, 2018 areCopyright (c) 2000-2002, 2004, 2006-2018 Glenn Randers-Pehrson, arederived from libpng-1.0.6, and are distributed according to the samedisclaimer and license as libpng-1.0.6 with the following individualsadded to the list of Contributing Authors:    Simon-Pierre Cadieux    Eric S. Raymond    Mans Rullgard    Cosmin Truta    Gilles Vollant    James Yu    Mandar Sahastrabuddhe    Google Inc.    Vadim Barkovand with the following additions to the disclaimer:    There is no warranty against interference with your enjoyment of    the library or against infringement.  There is no warranty that our    efforts or the library will fulfill any of your particular purposes    or needs.  This library is provided with all faults, and the entire    risk of satisfactory quality, performance, accuracy, and effort is    with the user.Some files in the "contrib" directory and some configure-generatedfiles that are distributed with libpng have other copyright owners, andare released under other open source licenses.libpng versions 0.97, January 1998, through 1.0.6, March 20, 2000, areCopyright (c) 1998-2000 Glenn Randers-Pehrson, are derived fromlibpng-0.96, and are distributed according to the same disclaimer andlicense as libpng-0.96, with the following individuals added to thelist of Contributing Authors:    Tom Lane    Glenn Randers-Pehrson    Willem van Schaiklibpng versions 0.89, June 1996, through 0.96, May 1997, areCopyright (c) 1996-1997 Andreas Dilger, are derived from libpng-0.88,and are distributed according to the same disclaimer and license aslibpng-0.88, with the following individuals added to the list ofContributing Authors:    John Bowler    Kevin Bracey    Sam Bushell    Magnus Holmgren    Greg Roelofs    Tom TannerSome files in the "scripts" directory have other copyright owners,but are released under this license.libpng versions 0.5, May 1995, through 0.88, January 1996, areCopyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.For the purposes of this copyright and license, "Contributing Authors"is defined as the following set of individuals:    Andreas Dilger    Dave Martindale    Guy Eric Schalnat    Paul Schmidt    Tim WegnerThe PNG Reference Library is supplied "AS IS".  The ContributingAuthors and Group 42, Inc. disclaim all warranties, expressed orimplied, including, without limitation, the warranties ofmerchantability and of fitness for any purpose.  The ContributingAuthors and Group 42, Inc. assume no liability for direct, indirect,incidental, special, exemplary, or consequential damages, which mayresult from the use of the PNG Reference Library, even if advised ofthe possibility of such damage.Permission is hereby granted to use, copy, modify, and distribute thissource code, or portions hereof, for any purpose, without fee, subjectto the following restrictions: 1. The origin of this source code must not be misrepresented. 2. Altered versions must be plainly marked as such and must not    be misrepresented as being the original source. 3. This Copyright notice may not be removed or altered from any    source or altered source distribution.The Contributing Authors and Group 42, Inc. specifically permit,without fee, and encourage the use of this source code as a componentto supporting the PNG file format in commercial products.  If you usethis source code in a product, acknowledgment is not required but wouldbe appreciated.</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.desktop/lcms/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.desktop/lcms/</url>
      
        <content type="html"><![CDATA[<h2 id="Little-Color-Management-System-LCMS-v2-12"><a href="#Little-Color-Management-System-LCMS-v2-12" class="headerlink" title="Little Color Management System (LCMS) v2.12"></a>Little Color Management System (LCMS) v2.12</h2><h3 id="LCMS-License"><a href="#LCMS-License" class="headerlink" title="LCMS License"></a>LCMS License</h3><pre>Little Color Management SystemCopyright (c) 1998-2020 Marti Maria SaguerPermission is hereby granted, free of charge, to any person obtaininga copy of this software and associated documentation files (the "Software"),to deal in the Software without restriction, including without limitationthe rights to use, copy, modify, merge, publish, distribute, sublicense,and/or sell copies of the Software, and to permit persons to whom the Softwareis furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TOTHE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE ANDNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BELIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTIONOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTIONWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.desktop/jpeg/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.desktop/jpeg/</url>
      
        <content type="html"><![CDATA[<h2 id="Independent-JPEG-Group-JPEG-release-6b"><a href="#Independent-JPEG-Group-JPEG-release-6b" class="headerlink" title="Independent JPEG Group: JPEG release 6b"></a>Independent JPEG Group: JPEG release 6b</h2><h3 id="JPEG-License"><a href="#JPEG-License" class="headerlink" title="JPEG License"></a>JPEG License</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">****************************************************************************</span><br><span class="line"></span><br><span class="line">Copyright (C) 1991-1998, Thomas G. Lane.</span><br><span class="line"></span><br><span class="line">This software is the work of Tom Lane, Philip Gladstone, Jim Boucher,</span><br><span class="line">Lee Crocker, Julian Minguillon, Luis Ortiz, George Phillips, Davide Rossi,</span><br><span class="line">Guido Vollbeding, Ge&#x27; Weijers, and other members of the Independent JPEG</span><br><span class="line">Group.</span><br><span class="line"></span><br><span class="line">IJG is not affiliated with the official ISO JPEG standards committee. </span><br><span class="line"></span><br><span class="line">The authors make NO WARRANTY or representation, either express or implied,</span><br><span class="line">with respect to this software, its quality, accuracy, merchantability, or</span><br><span class="line">fitness for a particular purpose.  This software is provided &quot;AS IS&quot;,</span><br><span class="line">and you, its user, assume the entire risk as to its quality and accuracy.</span><br><span class="line"></span><br><span class="line">This software is copyright (C) 1991-1998, Thomas G. Lane.</span><br><span class="line">All Rights Reserved except as specified below.</span><br><span class="line"></span><br><span class="line">Permission is hereby granted to use, copy, modify, and distribute</span><br><span class="line">this software (or portions thereof) for any purpose, without fee,</span><br><span class="line">subject to these conditions:</span><br><span class="line"></span><br><span class="line">(1) If any part of the source code for this software is distributed,</span><br><span class="line">then this README file must be included, with this copyright and no-warranty</span><br><span class="line">notice unaltered; and any additions, deletions, or changes to the original</span><br><span class="line">files must be clearly indicated in accompanying documentation.</span><br><span class="line"></span><br><span class="line">(2) If only executable code is distributed, then the accompanying documentation</span><br><span class="line">must state that &quot;this software is based in part on the work of the</span><br><span class="line">Independent JPEG Group&quot;.</span><br><span class="line"></span><br><span class="line">(3) Permission for use of this software is granted only if the user accepts</span><br><span class="line">full responsibility for any undesirable consequences; the authors accept</span><br><span class="line">NO LIABILITY for damages of any kind.</span><br><span class="line"></span><br><span class="line">These conditions apply to any software derived from or based on the IJG code,</span><br><span class="line">not just to the unmodified library.  If you use our work, you ought to</span><br><span class="line">acknowledge us.</span><br><span class="line"></span><br><span class="line">Permission is NOT granted for the use of any IJG author&#x27;s name or company name</span><br><span class="line">in advertising or publicity relating to this software or products derived</span><br><span class="line">from it.  This software may be referred to only as &quot;the Independent JPEG</span><br><span class="line">Group&#x27;s software&quot;.</span><br><span class="line"></span><br><span class="line">We specifically permit and encourage the use of this software as the basis</span><br><span class="line">of commercial products, provided that all warranty or liability claims are</span><br><span class="line">assumed by the product vendor.</span><br><span class="line"></span><br><span class="line">It appears that the arithmetic coding option of the JPEG spec is covered</span><br><span class="line">by patents owned by IBM, AT&amp;T, and Mitsubishi.  Hence arithmetic coding</span><br><span class="line">cannot legally be used without obtaining one or more licenses.  For this</span><br><span class="line">reason, support for arithmetic coding has been removed from the free</span><br><span class="line">JPEG software. (Since arithmetic coding provides only a marginal gain</span><br><span class="line">over the unpatented Huffman mode, it is unlikely that very many</span><br><span class="line">implementations will support it.) So far as we are aware, there are</span><br><span class="line">no patent restrictions on the remaining code.</span><br><span class="line"></span><br><span class="line">The IJG distribution formerly included code to read and write GIF files.</span><br><span class="line">To avoid entanglement with the Unisys LZW patent, GIF reading support</span><br><span class="line">has been removed altogether, and the GIF writer has been simplified to</span><br><span class="line">produce &quot;uncompressed GIFs&quot;.  This technique does not use the LZW algorithm;</span><br><span class="line">the resulting GIF files are larger than usual, but are readable by all</span><br><span class="line">standard GIF decoders.</span><br><span class="line"></span><br><span class="line">We are required to state that &quot;The Graphics Interchange Format(c) is</span><br><span class="line">the Copyright property of CompuServe Incorporated.  GIF(sm) is a</span><br><span class="line">Service Mark property of CompuServe Incorporated.&quot;</span><br><span class="line"></span><br><span class="line">****************************************************************************</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.desktop/harfbuzz/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.desktop/harfbuzz/</url>
      
        <content type="html"><![CDATA[<h2 id="Harfbuzz-v2-8"><a href="#Harfbuzz-v2-8" class="headerlink" title="Harfbuzz v2.8"></a>Harfbuzz v2.8</h2><h3 id="Harfbuzz-License"><a href="#Harfbuzz-License" class="headerlink" title="Harfbuzz License"></a>Harfbuzz License</h3><p><a href="https://github.com/harfbuzz/harfbuzz/blob/master/COPYING">https://github.com/harfbuzz/harfbuzz/blob/master/COPYING</a></p><pre>HarfBuzz is licensed under the so-called "Old MIT" license.  Details follow.For parts of HarfBuzz that are licensed under different licenses see individualfiles names COPYING in subdirectories where applicable.Copyright © 2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020  Google, Inc.Copyright © 2018,2019,2020  Ebrahim ByagowiCopyright © 2019,2020  Facebook, Inc. Copyright © 2012  Mozilla FoundationCopyright © 2011  Codethink LimitedCopyright © 2008,2010  Nokia Corporation and/or its subsidiary(-ies)Copyright © 2009  Keith StribleyCopyright © 2009  Martin Hosken and SIL InternationalCopyright © 2007  Chris WilsonCopyright © 2006  Behdad EsfahbodCopyright © 2005  David TurnerCopyright © 2004,2007,2008,2009,2010  Red Hat, Inc.Copyright © 1998-2004  David Turner and Werner LembergFor full copyright notices consult the individual files in the package.Permission is hereby granted, without written agreement and withoutlicense or royalty fees, to use, copy, modify, and distribute thissoftware and its documentation for any purpose, provided that theabove copyright notice and the following two paragraphs appear inall copies of this software.IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FORDIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGESARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVENIF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCHDAMAGE.THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY ANDFITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER ISON AN "AS IS" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TOPROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.All source code, except for one section, is licensed as above. The oneexception is licensed with a slightly different MIT variant:The contents of this directory are licensed under the following terms:Copyright (C) 2012 Grigori Goronzy <greg@kinoho.net>Permission to use, copy, modify, and/or distribute this software for anypurpose with or without fee is hereby granted, provided that the abovecopyright notice and this permission notice appear in all copies.THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIESWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OFMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FORANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGESWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN ANACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OFOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</greg@kinoho.net></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.desktop/giflib/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.desktop/giflib/</url>
      
        <content type="html"><![CDATA[<h2 id="GIFLIB-v5-2-1"><a href="#GIFLIB-v5-2-1" class="headerlink" title="GIFLIB v5.2.1"></a>GIFLIB v5.2.1</h2><h3 id="GIFLIB-License"><a href="#GIFLIB-License" class="headerlink" title="GIFLIB License"></a>GIFLIB License</h3><pre><code>The GIFLIB distribution is Copyright (c) 1997  Eric S. RaymondPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.https://sourceforge.net/p/giflib/code/ci/master/tree/openbsd-reallocarray.cCopyright (c) 2008 Otto Moerbeek &lt;otto@drijf.net&gt;SPDX-License-Identifier: MIT</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.desktop/colorimaging/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.desktop/colorimaging/</url>
      
        <content type="html"><![CDATA[<h2 id="Eastman-Kodak-Company-Portions-of-color-management-and-imaging-software"><a href="#Eastman-Kodak-Company-Portions-of-color-management-and-imaging-software" class="headerlink" title="Eastman Kodak Company: Portions of color management and imaging software"></a>Eastman Kodak Company: Portions of color management and imaging software</h2><h3 id="Eastman-Kodak-Notice"><a href="#Eastman-Kodak-Notice" class="headerlink" title="Eastman Kodak Notice"></a>Eastman Kodak Notice</h3><pre>Portions Copyright Eastman Kodak Company 1991-2003</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.base/zlib/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.base/zlib/</url>
      
        <content type="html"><![CDATA[<h2 id="zlib-v1-2-11"><a href="#zlib-v1-2-11" class="headerlink" title="zlib v1.2.11"></a>zlib v1.2.11</h2><h3 id="zlib-License"><a href="#zlib-License" class="headerlink" title="zlib License"></a>zlib License</h3><pre>Copyright (C) 1995-2017 Jean-loup Gailly and Mark AdlerThis software is provided 'as-is', without any express or impliedwarranty.  In no event will the authors be held liable for any damagesarising from the use of this software.Permission is granted to anyone to use this software for any purpose,including commercial applications, and to alter it and redistribute itfreely, subject to the following restrictions:1. The origin of this software must not be misrepresented; you must not   claim that you wrote the original software. If you use this software   in a product, an acknowledgment in the product documentation would be   appreciated but is not required.2. Altered source versions must be plainly marked as such, and must not be   misrepresented as being the original software.3. This notice may not be removed or altered from any source distribution.Jean-loup Gailly        Mark Adlerjloup@gzip.org          madler@alumni.caltech.edu</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.base/wepoll/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.base/wepoll/</url>
      
        <content type="html"><![CDATA[<h2 id="Bert-Belder-wepoll-v-1-5-8"><a href="#Bert-Belder-wepoll-v-1-5-8" class="headerlink" title="Bert Belder: wepoll v 1.5.8"></a>Bert Belder: wepoll v 1.5.8</h2><h3 id="wepoll-License"><a href="#wepoll-License" class="headerlink" title="wepoll License"></a>wepoll License</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">wepoll - epoll for Windows</span><br><span class="line">https://github.com/piscisaureus/wepoll</span><br><span class="line"></span><br><span class="line">Copyright 2012-2020, Bert Belder &lt;bertbelder@gmail.com&gt;</span><br><span class="line">All rights reserved.</span><br><span class="line"></span><br><span class="line">Redistribution and use in source and binary forms, with or without</span><br><span class="line">modification, are permitted provided that the following conditions are</span><br><span class="line">met:</span><br><span class="line"></span><br><span class="line">  * Redistributions of source code must retain the above copyright</span><br><span class="line">    notice, this list of conditions and the following disclaimer.</span><br><span class="line"></span><br><span class="line">  * Redistributions in binary form must reproduce the above copyright</span><br><span class="line">    notice, this list of conditions and the following disclaimer in the</span><br><span class="line">    documentation and/or other materials provided with the distribution.</span><br><span class="line"></span><br><span class="line">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span><br><span class="line">&quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span><br><span class="line">LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span><br><span class="line">A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span><br><span class="line">OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span><br><span class="line">SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span><br><span class="line">LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span><br><span class="line">DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span><br><span class="line">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span><br><span class="line">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span><br><span class="line">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.base/unicode/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.base/unicode/</url>
      
        <content type="html"><![CDATA[<h2 id="The-Unicode-Standard-Unicode-Character-Database-Version-13-0-0"><a href="#The-Unicode-Standard-Unicode-Character-Database-Version-13-0-0" class="headerlink" title="The Unicode Standard, Unicode Character Database, Version 13.0.0"></a>The Unicode Standard, Unicode Character Database, Version 13.0.0</h2><h3 id="Unicode-Character-Database"><a href="#Unicode-Character-Database" class="headerlink" title="Unicode Character Database"></a>Unicode Character Database</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE</span><br><span class="line"></span><br><span class="line">See Terms of Use for definitions of Unicode Inc.&#x27;s</span><br><span class="line">Data Files and Software.</span><br><span class="line"></span><br><span class="line">NOTICE TO USER: Carefully read the following legal agreement.</span><br><span class="line">BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.&#x27;S</span><br><span class="line">DATA FILES (&quot;DATA FILES&quot;), AND/OR SOFTWARE (&quot;SOFTWARE&quot;),</span><br><span class="line">YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE</span><br><span class="line">TERMS AND CONDITIONS OF THIS AGREEMENT.</span><br><span class="line">IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE</span><br><span class="line">THE DATA FILES OR SOFTWARE.</span><br><span class="line"></span><br><span class="line">COPYRIGHT AND PERMISSION NOTICE</span><br><span class="line"></span><br><span class="line">Copyright © 1991-2020 Unicode, Inc. All rights reserved.</span><br><span class="line">Distributed under the Terms of Use in https://www.unicode.org/copyright.html.</span><br><span class="line"></span><br><span class="line">Permission is hereby granted, free of charge, to any person obtaining</span><br><span class="line">a copy of the Unicode data files and any associated documentation</span><br><span class="line">(the &quot;Data Files&quot;) or Unicode software and any associated documentation</span><br><span class="line">(the &quot;Software&quot;) to deal in the Data Files or Software</span><br><span class="line">without restriction, including without limitation the rights to use,</span><br><span class="line">copy, modify, merge, publish, distribute, and/or sell copies of</span><br><span class="line">the Data Files or Software, and to permit persons to whom the Data Files</span><br><span class="line">or Software are furnished to do so, provided that either</span><br><span class="line">(a) this copyright and permission notice appear with all copies</span><br><span class="line">of the Data Files or Software, or</span><br><span class="line">(b) this copyright and permission notice appear in associated</span><br><span class="line">Documentation.</span><br><span class="line"></span><br><span class="line">THE DATA FILES AND SOFTWARE ARE PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF</span><br><span class="line">ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE</span><br><span class="line">WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND</span><br><span class="line">NONINFRINGEMENT OF THIRD PARTY RIGHTS.</span><br><span class="line">IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS</span><br><span class="line">NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL</span><br><span class="line">DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,</span><br><span class="line">DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER</span><br><span class="line">TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR</span><br><span class="line">PERFORMANCE OF THE DATA FILES OR SOFTWARE.</span><br><span class="line"></span><br><span class="line">Except as contained in this notice, the name of a copyright holder</span><br><span class="line">shall not be used in advertising or otherwise to promote the sale,</span><br><span class="line">use or other dealings in these Data Files or Software without prior</span><br><span class="line">written authorization of the copyright holder.</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.base/c-libutl/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.base/c-libutl/</url>
      
        <content type="html"><![CDATA[<h2 id="c-libutl-20160225"><a href="#c-libutl-20160225" class="headerlink" title="c-libutl 20160225"></a>c-libutl 20160225</h2><h3 id="c-libutl-License"><a href="#c-libutl-License" class="headerlink" title="c-libutl License"></a>c-libutl License</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">This software is distributed under the terms of the BSD license.</span><br><span class="line"></span><br><span class="line">==  BSD LICENSE  ===============================================================</span><br><span class="line"></span><br><span class="line"> (C) 2009 by Remo Dentato (rdentato@gmail.com)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Redistribution and use in source and binary forms, with or without modification,</span><br><span class="line">are permitted provided that the following conditions are met:</span><br><span class="line"></span><br><span class="line">    * Redistributions of source code must retain the above copyright notice,</span><br><span class="line">      this list of conditions and the following disclaimer.</span><br><span class="line">    * Redistributions in binary form must reproduce the above copyright notice,</span><br><span class="line">      this list of conditions and the following disclaimer in the documentation</span><br><span class="line">      and/or other materials provided with the distribution.</span><br><span class="line"></span><br><span class="line">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND</span><br><span class="line">ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED</span><br><span class="line">WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</span><br><span class="line">DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR</span><br><span class="line">ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES</span><br><span class="line">(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;</span><br><span class="line">LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND</span><br><span class="line">ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span><br><span class="line">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS</span><br><span class="line">SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span><br><span class="line"></span><br><span class="line">http://opensource.org/licenses/bsd-license.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.base/asm/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.base/asm/</url>
      
        <content type="html"><![CDATA[<h2 id="ASM-Bytecode-Manipulation-Framework-v8-0-1"><a href="#ASM-Bytecode-Manipulation-Framework-v8-0-1" class="headerlink" title="ASM Bytecode Manipulation Framework v8.0.1"></a>ASM Bytecode Manipulation Framework v8.0.1</h2><h3 id="ASM-License"><a href="#ASM-License" class="headerlink" title="ASM License"></a>ASM License</h3><pre>Copyright (c) 2000-2011 France TélécomAll rights reserved.Redistribution and use in source and binary forms, with or withoutmodification, are permitted provided that the following conditionsare met:1. Redistributions of source code must retain the above copyright   notice, this list of conditions and the following disclaimer.2. Redistributions in binary form must reproduce the above copyright   notice, this list of conditions and the following disclaimer in the   documentation and/or other materials provided with the distribution.3. Neither the name of the copyright holders nor the names of its   contributors may be used to endorse or promote products derived from   this software without specific prior written permission.THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THEIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSEARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BELIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, ORCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OFSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESSINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER INCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OFTHE POSSIBILITY OF SUCH DAMAGE.</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.base/aes/"/>
      <url>/2023/02/03/Android/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/jadx-gui-1.4.4-with-jre-win/jre/legal/java.base/aes/</url>
      
        <content type="html"><![CDATA[<h2 id="Cryptix-AES-v3-2-0"><a href="#Cryptix-AES-v3-2-0" class="headerlink" title="Cryptix AES v3.2.0"></a>Cryptix AES v3.2.0</h2><h3 id="Cryptix-General-License"><a href="#Cryptix-General-License" class="headerlink" title="Cryptix General License"></a>Cryptix General License</h3><pre>Cryptix General LicenseCopyright (c) 1995-2005 The Cryptix Foundation Limited.All rights reserved.Redistribution and use in source and binary forms, with or withoutmodification, are permitted provided that the following conditions aremet:  1. Redistributions of source code must retain the copyright notice,     this list of conditions and the following disclaimer.  2. Redistributions in binary form must reproduce the above copyright     notice, this list of conditions and the following disclaimer in     the documentation and/or other materials provided with the     distribution.THIS SOFTWARE IS PROVIDED BY THE CRYPTIX FOUNDATION LIMITED ANDCONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OFMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE CRYPTIX FOUNDATION LIMITED OR CONTRIBUTORS BELIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, ORCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OFSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; ORBUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCEOR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVENIF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>10-Spring6整合Junit5</title>
      <link href="/2023/01/14/SSM/Spring/10-Spring6%E6%95%B4%E5%90%88Junit5/"/>
      <url>/2023/01/14/SSM/Spring/10-Spring6%E6%95%B4%E5%90%88Junit5/</url>
      
        <content type="html"><![CDATA[<h1 id="十七、Spring6整合JUnit5"><a href="#十七、Spring6整合JUnit5" class="headerlink" title="十七、Spring6整合JUnit5"></a>十七、Spring6整合JUnit5</h1><h2 id="17-1-Spring对JUnit4的支持"><a href="#17-1-Spring对JUnit4的支持" class="headerlink" title="17.1 Spring对JUnit4的支持"></a>17.1 Spring对JUnit4的支持</h2><p>准备工作：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.powernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring6-015-junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--仓库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring里程碑版本的仓库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>repository.spring.milestone<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestone Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring对junit的支持相关依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit4依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">package com.powernode.spring6.bean;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 动力节点</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @className User</span><br><span class="line"> * @since 1.0</span><br><span class="line"> **/</span><br><span class="line">@Component</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;张三&quot;)</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.spring6.bean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单元测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> SpringJUnit4Test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringJUnit4Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/2023/01/14/SSM/Spring/10-Spring6%E6%95%B4%E5%90%88Junit5/1666602069724-ec6288cc-bb7b-417e-995e-8e1978ee6943.png" alt="img"></p><p>Spring提供的方便主要是这几个注解：</p><p>@RunWith(SpringJUnit4ClassRunner.class)<br>@ContextConfiguration(“classpath:spring.xml”)</p><p>在单元测试类上使用这两个注解之后，在单元测试类中的属性上可以使用@Autowired。比较方便。</p><h2 id="17-2-Spring对JUnit5的支持"><a href="#17-2-Spring对JUnit5的支持" class="headerlink" title="17.2 Spring对JUnit5的支持"></a>17.2 Spring对JUnit5的支持</h2><p>引入JUnit5的依赖，Spring对JUnit支持的依赖还是：spring-test，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.powernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring6-015-junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--仓库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring里程碑版本的仓库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>repository.spring.milestone<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestone Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring对junit的支持相关依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit5依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line">package com.powernode.spring6.test;</span><br><span class="line"></span><br><span class="line">import com.powernode.spring6.bean.User;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.junit.jupiter.api.extension.ExtendWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit.jupiter.SpringExtension;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@ExtendWith(SpringExtension.class)</span><br><span class="line">@ContextConfiguration(&quot;classpath:spring.xml&quot;)</span><br><span class="line">public class SpringJUnit5Test &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private User user;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testUser()&#123;</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JUnit5当中，可以使用Spring提供的以下两个注解，标注到单元测试类上，这样在类当中就可以使用@Autowired注解了。</p><p>@ExtendWith(SpringExtension.class)</p><p>@ContextConfiguration(“classpath:spring.xml”)</p><h1 id="十八、Spring6集成MyBatis3-5"><a href="#十八、Spring6集成MyBatis3-5" class="headerlink" title="十八、Spring6集成MyBatis3.5"></a>十八、Spring6集成MyBatis3.5</h1><h2 id="18-1-实现步骤"><a href="#18-1-实现步骤" class="headerlink" title="18.1 实现步骤"></a>18.1 实现步骤</h2><ul><li><p>第一步：准备数据库表</p></li><li><ul><li>使用t_act表（账户表）</li></ul></li><li><p>第二步：IDEA中创建一个模块，并引入依赖</p></li><li><ul><li>spring-context</li><li>spring-jdbc</li><li>mysql驱动</li><li>mybatis</li><li>mybatis-spring：<strong>mybatis提供的与spring框架集成的依赖</strong></li><li>德鲁伊连接池</li><li>junit</li></ul></li><li><p>第三步：基于三层架构实现，所以提前创建好所有的包</p></li><li><ul><li>com.powernode.bank.mapper</li><li>com.powernode.bank.service</li><li>com.powernode.bank.service.impl</li><li>com.powernode.bank.pojo</li></ul></li><li><p>第四步：编写pojo</p></li><li><ul><li>Account，属性私有化，提供公开的setter getter和toString。</li></ul></li><li><p>第五步：编写mapper接口</p></li><li><ul><li>AccountMapper接口，定义方法</li></ul></li><li><p>第六步：编写mapper配置文件</p></li><li><ul><li>在配置文件中配置命名空间，以及每一个方法对应的sql。</li></ul></li><li><p>第七步：编写service接口和service接口实现类</p></li><li><ul><li>AccountService</li><li>AccountServiceImpl</li></ul></li><li><p>第八步：编写jdbc.properties配置文件</p></li><li><ul><li>数据库连接池相关信息</li></ul></li><li><p>第九步：编写mybatis-config.xml配置文件</p></li><li><ul><li>该文件可以没有，大部分的配置可以转移到spring配置文件中。</li><li>如果遇到mybatis相关的系统级配置，还是需要这个文件。</li></ul></li><li><p>第十步：编写spring.xml配置文件</p></li><li><ul><li>组件扫描</li><li>引入外部的属性文件</li><li>数据源</li><li>SqlSessionFactoryBean配置</li></ul></li><li><ul><li><ul><li>注入mybatis核心配置文件路径</li><li>指定别名包</li><li>注入数据源</li></ul></li></ul></li><li><ul><li>Mapper扫描配置器</li></ul></li><li><ul><li><ul><li>指定扫描的包</li></ul></li></ul></li><li><ul><li>事务管理器DataSourceTransactionManager</li></ul></li><li><ul><li><ul><li>注入数据源</li></ul></li></ul></li><li><ul><li>启用事务注解</li></ul></li><li><ul><li><ul><li>注入事务管理器</li></ul></li></ul></li><li><p>第十一步：编写测试程序，并添加事务，进行测试</p></li></ul><h2 id="18-2-具体实现"><a href="#18-2-具体实现" class="headerlink" title="18.2 具体实现"></a>18.2 具体实现</h2><ul><li>第一步：准备数据库表</li></ul><p>连接数据库的工具有很多，除了之前我们使用的navicat for mysql之外，也可以使用IDEA工具自带的DataBase插件。可以根据下图提示自行配置：</p><p><img src="/2023/01/14/SSM/Spring/10-Spring6%E6%95%B4%E5%90%88Junit5/1666659555476-977c1aec-6bcb-4b2b-a5d1-932a8b66cbac.png" alt="img"></p><p><img src="/2023/01/14/SSM/Spring/10-Spring6%E6%95%B4%E5%90%88Junit5/1666659459681-56e377a7-3b9e-4649-b29d-9da3c81fe46f.png" alt="img"></p><ul><li>第二步：IDEA中创建一个模块，并引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.powernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring6-016-sm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--仓库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring里程碑版本的仓库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>repository.spring.milestone<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestone Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第三步：基于三层架构实现，所以提前创建好所有的包</li></ul><p><img src="/2023/01/14/SSM/Spring/10-Spring6%E6%95%B4%E5%90%88Junit5/1666660021872-5935b222-7e72-41d9-a9e1-c532ca29ef10.png" alt="img"></p><ul><li>第四步：编写pojo</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bank.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Account</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String actno;</span><br><span class="line">    <span class="keyword">private</span> Double balance;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;actno=&#x27;&quot;</span> + actno + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, balance=&quot;</span> + balance +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String actno, Double balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.actno = actno;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getActno</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> actno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setActno</span><span class="params">(String actno)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.actno = actno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(Double balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第五步：编写mapper接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bank.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.pojo.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> AccountMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据账号删除账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> actno</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByActno</span><span class="params">(String actno)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据账号查询账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> actno</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Account <span class="title function_">selectByActno</span><span class="params">(String actno)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第六步：编写mapper配置文件</li></ul><p>一定要注意，按照下图提示创建这个目录。注意是斜杠不是点儿。在resources目录下新建。并且要和Mapper接口包对应上。</p><p><img src="/2023/01/14/SSM/Spring/10-Spring6%E6%95%B4%E5%90%88Junit5/1666660299388-b2e278e1-497d-4357-835c-ca95bfd87f0e.png" alt="img"></p><p>如果接口叫做AccountMapper，配置文件必须是AccountMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.powernode.bank.mapper.AccountMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>&gt;</span></span><br><span class="line">        insert into t_act values(#&#123;actno&#125;, #&#123;balance&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByActno&quot;</span>&gt;</span></span><br><span class="line">        delete from t_act where actno = #&#123;actno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update t_act set balance = #&#123;balance&#125; where actno = #&#123;actno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByActno&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Account&quot;</span>&gt;</span></span><br><span class="line">        select * from t_act where actno = #&#123;actno&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Account&quot;</span>&gt;</span></span><br><span class="line">        select * from t_act</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第七步：编写service接口和service接口实现类</li></ul><p>注意编写的service实现类纳入IoC容器管理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bank.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.pojo.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> AccountService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> act</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">save</span><span class="params">(Account act)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据账号销户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> actno</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByActno</span><span class="params">(String actno)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> act</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(Account act)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据账号获取账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> actno</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Account <span class="title function_">getByActno</span><span class="params">(String actno)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fromActno</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toActno</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String fromActno, String toActno, <span class="type">double</span> money)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.bank.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.mapper.AccountMapper;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.pojo.Account;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> AccountServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">save</span><span class="params">(Account act)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.insert(act);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteByActno</span><span class="params">(String actno)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.deleteByActno(actno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Account act)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.update(act);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">getByActno</span><span class="params">(String actno)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.selectByActno(actno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String fromActno, String toActno, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">fromAct</span> <span class="operator">=</span> accountMapper.selectByActno(fromActno);</span><br><span class="line">        <span class="keyword">if</span> (fromAct.getBalance() &lt; money) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">toAct</span> <span class="operator">=</span> accountMapper.selectByActno(toActno);</span><br><span class="line">        fromAct.setBalance(fromAct.getBalance() - money);</span><br><span class="line">        toAct.setBalance(toAct.getBalance() + money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> accountMapper.update(fromAct);</span><br><span class="line">        count += accountMapper.update(toAct);</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;转账失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第八步：编写jdbc.properties配置文件</li></ul><p>放在类的根路径下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring6</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><ul><li>第九步：编写mybatis-config.xml配置文件</li></ul><p>放在类的根路径下，只开启日志，其他配置到spring.xml中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第十步：编写spring.xml配置文件</li></ul><p><strong>注意：当你在spring.xml文件中直接写标签内容时，IDEA会自动给你添加命名空间</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.bank&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--外部属性配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionFactoryBean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis核心配置文件路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--起别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.powernode.bank.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Mapper扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.powernode.bank.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启事务注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;txManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第十一步：编写测试程序，并添加事务，进行测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> SMTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSM</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">        <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;accountService&quot;</span>, AccountService.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            accountService.transfer(<span class="string">&quot;act-001&quot;</span>, <span class="string">&quot;act-002&quot;</span>, <span class="number">10000.0</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;转账成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;转账失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最后大家别忘了测试事务！！！！</strong></p><h2 id="18-3-Spring配置文件的import"><a href="#18-3-Spring配置文件的import" class="headerlink" title="18.3 Spring配置文件的import"></a>18.3 Spring配置文件的import</h2><p>spring配置文件有多个，并且可以在spring的核心配置文件中使用import进行引入，我们可以将组件扫描单独定义到一个配置文件中，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.bank&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在核心配置文件中引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入其他的spring配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;common.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：在实际开发中，service单独配置到一个文件中，dao单独配置到一个文件中，然后在核心配置文件中引入，养成好习惯。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
            <tag> Spring6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-Spring对事务的支持</title>
      <link href="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/"/>
      <url>/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="十六、Spring对事务的支持"><a href="#十六、Spring对事务的支持" class="headerlink" title="十六、Spring对事务的支持"></a>十六、Spring对事务的支持</h1><h2 id="0-注意的点"><a href="#0-注意的点" class="headerlink" title="0.注意的点"></a>0.注意的点</h2><ul><li>1)一个事务中如果出现了 异常，即使进行了 try catch 捕获 处理异常，也依然会回滚！。不会提交事务。 —&gt;它不知道你报错的部分，或者后面代码是否还有dml 代码，就直接回滚。</li></ul><h2 id="16-1-事务概述"><a href="#16-1-事务概述" class="headerlink" title="16.1 事务概述"></a>16.1 事务概述</h2><ul><li><p>什么是事务</p></li><li><ul><li>在一个业务流程当中，通常需要多条DML（insert delete update）语句共同联合才能完成，这多条DML语句必须同时成功，或者同时失败，这样才能保证数据的安全。</li><li>多条DML要么同时成功，要么同时失败，这叫做事务。</li><li>事务：Transaction（tx）</li></ul></li><li><p>事务的四个处理过程：</p></li><li><ul><li>第一步：开启事务 (start transaction)</li><li>第二步：执行核心业务代码</li><li>第三步：提交事务（如果核心业务处理过程中没有出现异常）(commit transaction)</li><li>第四步：回滚事务（如果核心业务处理过程中出现异常）(rollback transaction)</li></ul></li><li><p>事务的四个特性：</p></li><li><ul><li><p>A 原子性：事务是最小的工作单元，不可再分。</p></li><li><p>C 一致性：事务要求要么同时成功，要么同时失败。事务前和事务后的总量不变。</p></li><li><p>I 隔离性：事务和事务之间因为有隔离性，才可以保证互不干扰。</p></li><li><p>D 持久性：持久性是事务结束的标志。</p></li></ul></li></ul><h2 id="16-2-引入事务场景"><a href="#16-2-引入事务场景" class="headerlink" title="16.2 引入事务场景"></a>16.2 引入事务场景</h2><p>以银行账户转账为例学习事务。两个账户act-001和act-002。act-001账户向act-002账户转账10000，必须同时成功，或者同时失败。（一个减成功，一个加成功， 这两条update语句必须同时成功，或同时失败。）</p><p>连接数据库的技术采用Spring框架的JdbcTemplate。</p><p>采用三层架构搭建：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666495641174-069ee06f-097c-4f44-9a29-ca3e701d666b.png" alt="img"></p><p>模块名：spring6-013-tx-bank（依赖如下）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.powernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring6-013-tx-bank<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--仓库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring里程碑版本的仓库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>repository.spring.milestone<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestone Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring context--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--德鲁伊连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--@Resource注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第一步：准备数据库表"><a href="#第一步：准备数据库表" class="headerlink" title="第一步：准备数据库表"></a>第一步：准备数据库表</h3><p>表结构：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666496097440-75d21db2-588b-4f6a-bd40-149c3de6f27d.png" alt="img"></p><p>表数据：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666496136146-5cc1d848-0ad4-425d-a1fc-8b59b5d0b91f.png" alt="img"></p><h3 id="第二步：创建包结构"><a href="#第二步：创建包结构" class="headerlink" title="第二步：创建包结构"></a>第二步：创建包结构</h3><p>com.powernode.bank.pojo</p><p>com.powernode.bank.service</p><p>com.powernode.bank.service.impl</p><p>com.powernode.bank.dao</p><p>com.powernode.bank.dao.impl</p><h3 id="第三步：准备POJO类"><a href="#第三步：准备POJO类" class="headerlink" title="第三步：准备POJO类"></a>第三步：准备POJO类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bank.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Account</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String actno;</span><br><span class="line">    <span class="keyword">private</span> Double balance;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;actno=&#x27;&quot;</span> + actno + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, balance=&quot;</span> + balance +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String actno, Double balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.actno = actno;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getActno</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> actno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setActno</span><span class="params">(String actno)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.actno = actno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(Double balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四步：编写持久层"><a href="#第四步：编写持久层" class="headerlink" title="第四步：编写持久层"></a>第四步：编写持久层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bank.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.pojo.Account;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> AccountDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据账号查询余额</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> actno</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Account <span class="title function_">selectByActno</span><span class="params">(String actno)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> act</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(Account act)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.bank.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.pojo.Account;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> AccountDaoImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Repository(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">selectByActno</span><span class="params">(String actno)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select actno, balance from t_act where actno = ?&quot;</span>;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Account.class), actno);</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Account act)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_act set balance = ? where actno = ?&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.update(sql, act.getBalance(), act.getActno());</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第五步：编写业务层"><a href="#第五步：编写业务层" class="headerlink" title="第五步：编写业务层"></a>第五步：编写业务层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bank.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> AccountService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fromActno</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toActno</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String fromActno, String toActno, <span class="type">double</span> money)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.bank.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.pojo.Account;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> AccountServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;accountDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String fromActno, String toActno, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        <span class="comment">// 查询账户余额是否充足</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">fromAct</span> <span class="operator">=</span> accountDao.selectByActno(fromActno);</span><br><span class="line">        <span class="keyword">if</span> (fromAct.getBalance() &lt; money) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;账户余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 余额充足，开始转账</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">toAct</span> <span class="operator">=</span> accountDao.selectByActno(toActno);</span><br><span class="line">        fromAct.setBalance(fromAct.getBalance() - money);</span><br><span class="line">        toAct.setBalance(toAct.getBalance() + money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> accountDao.update(fromAct);</span><br><span class="line">        count += accountDao.update(toAct);</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;转账失败，请联系银行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第六步：编写Spring配置文件"><a href="#第六步：编写Spring配置文件" class="headerlink" title="第六步：编写Spring配置文件"></a>第六步：编写Spring配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.bank&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring6&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第七步：编写表示层（测试程序）"><a href="#第七步：编写表示层（测试程序）" class="headerlink" title="第七步：编写表示层（测试程序）"></a>第七步：编写表示层（测试程序）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> BankTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransfer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">        <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;accountService&quot;</span>, AccountService.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            accountService.transfer(<span class="string">&quot;act-001&quot;</span>, <span class="string">&quot;act-002&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;转账成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666497683531-b14430f2-b90e-4555-8552-1de9747c9fcc.png" alt="img"></p><p>数据变化：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666497727323-b2ca34c9-99c6-4b23-8d3b-8dbe3009d3e9.png" alt="img"></p><h3 id="模拟异常"><a href="#模拟异常" class="headerlink" title="模拟异常"></a>模拟异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bank.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.pojo.Account;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> AccountServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;accountDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String fromActno, String toActno, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        <span class="comment">// 查询账户余额是否充足</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">fromAct</span> <span class="operator">=</span> accountDao.selectByActno(fromActno);</span><br><span class="line">        <span class="keyword">if</span> (fromAct.getBalance() &lt; money) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;账户余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 余额充足，开始转账</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">toAct</span> <span class="operator">=</span> accountDao.selectByActno(toActno);</span><br><span class="line">        fromAct.setBalance(fromAct.getBalance() - money);</span><br><span class="line">        toAct.setBalance(toAct.getBalance() + money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> accountDao.update(fromAct);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 模拟异常</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        s.toString();</span><br><span class="line"></span><br><span class="line">        count += accountDao.update(toAct);</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;转账失败，请联系银行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666497808309-c50af959-1a57-480c-9f31-76f6ce3b555a.png" alt="img"></p><p>数据库表中数据：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666497824308-bdd8f11f-8f99-4195-81c4-c37721627f4c.png" alt="img"></p><p><strong>丢了1万。</strong></p><h2 id="16-3-Spring对事务的支持"><a href="#16-3-Spring对事务的支持" class="headerlink" title="16.3 Spring对事务的支持"></a>16.3 Spring对事务的支持</h2><h3 id="Spring实现事务的两种方式"><a href="#Spring实现事务的两种方式" class="headerlink" title="Spring实现事务的两种方式"></a>Spring实现事务的两种方式</h3><ul><li><p>编程式事务</p></li><li><ul><li>通过编写代码的方式来实现事务的管理。</li></ul></li><li><p>声明式事务</p></li><li><ul><li>基于注解方式</li><li>基于XML配置方式</li></ul></li></ul><h3 id="Spring事务管理API"><a href="#Spring事务管理API" class="headerlink" title="Spring事务管理API"></a>Spring事务管理API</h3><p>Spring对事务的管理底层实现方式是基于AOP实现的。采用AOP的方式进行了封装。所以Spring专门针对事务开发了一套API，API的核心接口如下：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666504216275-1b6a9ac4-6958-4cdf-9323-7a79a08d059d.png" alt="img"></p><p>PlatformTransactionManager接口：spring事务管理器的核心接口。在<strong>Spring6</strong>中它有两个实现：</p><ul><li>DataSourceTransactionManager：支持JdbcTemplate、MyBatis、Hibernate等事务管理。</li><li>JtaTransactionManager：支持分布式事务管理。</li></ul><p>如果要在Spring6中使用JdbcTemplate，就要使用DataSourceTransactionManager来管理事务。（Spring内置写好了，可以直接用。）</p><h3 id="声明式事务之注解实现方式"><a href="#声明式事务之注解实现方式" class="headerlink" title="声明式事务之注解实现方式"></a>声明式事务之注解实现方式</h3><ul><li>第一步：在spring配置文件中配置事务管理器。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第二步：在spring配置文件中引入tx命名空间。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第三步：在spring配置文件中配置“事务注解驱动器”，开始注解的方式控制事务。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第四步：在service类上或方法上添加@Transactional注解</li></ul><p>在类上添加该注解，该类中所有的方法都有事务。在某个方法上添加该注解，表示只有这个方法使用事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bank.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.pojo.Account;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> AccountServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;accountDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String fromActno, String toActno, <span class="type">double</span> money)</span> &#123;</span><br><span class="line">        <span class="comment">// 查询账户余额是否充足</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">fromAct</span> <span class="operator">=</span> accountDao.selectByActno(fromActno);</span><br><span class="line">        <span class="keyword">if</span> (fromAct.getBalance() &lt; money) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;账户余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 余额充足，开始转账</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">toAct</span> <span class="operator">=</span> accountDao.selectByActno(toActno);</span><br><span class="line">        fromAct.setBalance(fromAct.getBalance() - money);</span><br><span class="line">        toAct.setBalance(toAct.getBalance() + money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> accountDao.update(fromAct);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟异常</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        s.toString();</span><br><span class="line"></span><br><span class="line">        count += accountDao.update(toAct);</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;转账失败，请联系银行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前数据库表中的数据：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666505321919-85dd9adb-bceb-49ef-826f-5a3ddf7699a0.png" alt="img"></p><p>执行测试程序：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666505358758-2a264b1c-3435-4f90-a42f-801001170a2b.png" alt="img"></p><p>虽然出现异常了，再次查看数据库表中数据：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666505321919-85dd9adb-bceb-49ef-826f-5a3ddf7699a0.png" alt="img"></p><p>通过测试，发现数据没有变化，事务起作用了。</p><h3 id="事务属性"><a href="#事务属性" class="headerlink" title="事务属性"></a>事务属性</h3><h4 id="事务属性包括哪些"><a href="#事务属性包括哪些" class="headerlink" title="事务属性包括哪些"></a>事务属性包括哪些</h4><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666506552984-8a4f9d42-73ba-4ded-853d-564d27340db5.png" alt="img"></p><p>事务中的重点属性：</p><ul><li>事务传播行为</li><li>事务隔离级别</li><li>事务超时</li><li>只读事务</li><li>设置出现哪些异常回滚事务</li><li>设置出现哪些异常不回滚事务</li></ul><h4 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h4><p>什么是事务的传播行为？</p><p>在service类中有a()方法和b()方法，a()方法上有事务，b()方法上也有事务，当a()方法执行过程中调用了b()方法，事务是如何传递的？合并到一个事务里？还是开启一个新的事务？这就是事务传播行为。</p><p>事务传播行为在spring框架中被定义为枚举类型：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666505960049-06173489-15fc-4d16-94f3-1a9025f85d8c.png" alt="img"></p><p>一共有七种传播行为：</p><ul><li>REQUIRED：支持当前事务，如果不存在就新建一个(默认)<strong>【没有就新建，有就加入】</strong></li><li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行<strong>【有就加入，没有就不管了】</strong></li><li>MANDATORY（强制）：必须运行在一个事务中，如果当前没有事务正在发生，将抛出一个异常<strong>【强制你要有就加入，没有就我就闹，我就抛异常】</strong></li><li>REQUIRES_NEW：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起<strong>【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】</strong> ———&gt; &#x3D;&#x3D;并列&#x3D;&#x3D;</li><li>NOT_SUPPORTED：以非事务方式运行，如果有事务存在，挂起当前事务<strong>【不支持事务，存在就挂起】</strong></li><li>NEVER：以非事务方式运行，如果有事务存在，抛出异常<strong>【 不支持事务，不想要有事务，存在就抛异常】</strong></li><li>NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像REQUIRED一样。<strong>【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和<strong><strong>REQUIRED一样。</strong></strong>】</strong></li></ul><p>在代码中设置事务的传播行为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br></pre></td></tr></table></figure><p>可以编写程序测试一下传播行为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account act)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里调用dao的insert方法。</span></span><br><span class="line">    accountDao.insert(act); <span class="comment">// 保存act-003账户</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建账户对象</span></span><br><span class="line">    <span class="type">Account</span> <span class="variable">act2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&quot;act-004&quot;</span>, <span class="number">1000.0</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        accountService.save(act2); <span class="comment">// 保存act-004账户</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 继续往后进行我当前1号事务自己的事儿。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account act)</span> &#123;</span><br><span class="line">    accountDao.insert(act);</span><br><span class="line">    <span class="comment">// 模拟异常</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    s.toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事儿没有处理完，这个大括号当中的后续也许还有其他的DML语句。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一定要集成Log4j2日志框架，在日志信息中可以看到更加详细的信息。</strong></p><h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><p>事务隔离级别类似于教室A和教室B之间的那道墙，隔离级别越高表示墙体越厚。隔音效果越好。</p><p>数据库中读取数据存在的三大问题：（三大读问题）</p><ul><li><strong>脏读：读取到没有提交到数据库的数据，叫做脏读。</strong></li><li><strong>不可重复读：在同一个事务当中，第一次和第二次读取的数据不一样。</strong></li><li><strong>幻读：读到的数据是假的。</strong></li></ul><p>事务隔离级别包括四个级别：</p><ul><li><p>读未提交：READ_UNCOMMITTED</p></li><li><ul><li>这种隔离级别，存在脏读问题，所谓的脏读(dirty read)表示能够读取到其它事务未提交的数据。</li></ul></li><li><p>读提交：READ_COMMITTED</p></li><li><ul><li>解决了脏读问题，其它事务提交之后才能读到，但存在不可重复读问题。</li></ul></li><li><p>可重复读：REPEATABLE_READ</p></li><li><ul><li>解决了不可重复读，可以达到可重复读效果，只要当前事务不结束，读取到的数据一直都是一样的。但存在幻读问题。</li></ul></li><li><p>序列化：SERIALIZABLE</p></li><li><ul><li>解决了幻读问题，事务排队执行。不支持并发。</li></ul></li></ul><p>大家可以通过一个表格来记忆：</p><table><thead><tr><th><strong>隔离级别</strong></th><th><strong>脏读</strong></th><th><strong>不可重复读</strong></th><th><strong>幻读</strong></th></tr></thead><tbody><tr><td>读未提交</td><td><strong>有</strong></td><td><strong>有</strong></td><td><strong>有</strong></td></tr><tr><td>读提交</td><td>无</td><td><strong>有</strong></td><td><strong>有</strong></td></tr><tr><td>可重复读</td><td>无</td><td>无</td><td><strong>有</strong></td></tr><tr><td>序列化</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><p>在Spring代码中如何设置隔离级别？</p><p>隔离级别在spring中以枚举类型存在：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666508609641-2c838566-7334-4cf1-b452-0fed9aaebf3d.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span></span><br></pre></td></tr></table></figure><p>测试事务隔离级别：READ_UNCOMMITTED 和 READ_COMMITTED</p><p>怎么测试：一个service负责插入，一个service负责查询。负责插入的service要模拟延迟。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bank.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.pojo.Account;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> IsolationService1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service(&quot;i1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IsolationService1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;accountDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1号</span></span><br><span class="line">    <span class="comment">// 负责查询</span></span><br><span class="line">    <span class="comment">// 当前事务可以读取到别的事务没有提交的数据。</span></span><br><span class="line">    <span class="comment">//@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span></span><br><span class="line">    <span class="comment">// 对方事务提交之后的数据我才能读取到。</span></span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getByActno</span><span class="params">(String actno)</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountDao.selectByActno(actno);</span><br><span class="line">        System.out.println(<span class="string">&quot;查询到的账户信息：&quot;</span> + account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.bank.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.powernode.bank.pojo.Account;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> IsolationService2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service(&quot;i2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IsolationService2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;accountDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2号</span></span><br><span class="line">    <span class="comment">// 负责insert</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account act)</span> &#123;</span><br><span class="line">        accountDao.insert(act);</span><br><span class="line">        <span class="comment">// 睡眠一会</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span> * <span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIsolation1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">IsolationService1</span> <span class="variable">i1</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;i1&quot;</span>, IsolationService1.class);</span><br><span class="line">    i1.getByActno(<span class="string">&quot;act-004&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIsolation2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">    <span class="type">IsolationService2</span> <span class="variable">i2</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;i2&quot;</span>, IsolationService2.class);</span><br><span class="line">    <span class="type">Account</span> <span class="variable">act</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&quot;act-004&quot;</span>, <span class="number">1000.0</span>);</span><br><span class="line">    i2.save(act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过执行结果可以清晰的看出隔离级别不同，执行效果不同。</p><h4 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h4><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = 10)</span></span><br></pre></td></tr></table></figure><p>以上代码表示设置事务的超时时间为10秒。</p><p><strong>表示超过10秒如果该事务中所有的DML语句还没有执行完毕的话，最终结果会选择回滚。</strong></p><p>默认值-1，表示没有时间限制。</p><p><strong>这里有个坑，事务的超时时间指的是哪段时间？</strong></p><p><strong>在当前事务当中，最后一条DML语句执行之前的时间。如果最后一条DML语句后面很有很多业务逻辑，这些业务代码执行的时间不被计入超时时间。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = 10)</span> <span class="comment">// 设置事务超时时间为10秒。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account act)</span> &#123;</span><br><span class="line">    accountDao.insert(act);</span><br><span class="line">    <span class="comment">// 睡眠一会</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">15</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional(timeout = 10)</span> <span class="comment">// 设置事务超时时间为10秒。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account act)</span> &#123;</span><br><span class="line">    <span class="comment">// 睡眠一会</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">15</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    accountDao.insert(act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当然，如果想让整个方法的所有代码都计入超时时间的话，可以在方法最后一行添加一行无关紧要的DML语句。</strong></p><h4 id="只读事务"><a href="#只读事务" class="headerlink" title="只读事务"></a>只读事务</h4><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br></pre></td></tr></table></figure><p>将当前事务设置为只读事务，在该事务执行过程中只允许select语句执行，delete insert update均不可执行。</p><p>该特性的作用是：<strong>启动spring的优化策略。提高select语句执行效率。</strong></p><p>如果该事务中确实没有增删改操作，建议设置为只读事务。</p><h4 id="设置哪些异常回滚事务"><a href="#设置哪些异常回滚事务" class="headerlink" title="设置哪些异常回滚事务"></a>设置哪些异常回滚事务</h4><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = RuntimeException.class)</span></span><br></pre></td></tr></table></figure><p>表示只有发生RuntimeException异常或该异常的子类异常才回滚。</p><h4 id="设置哪些异常不回滚事务"><a href="#设置哪些异常不回滚事务" class="headerlink" title="设置哪些异常不回滚事务"></a>设置哪些异常不回滚事务</h4><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(noRollbackFor = NullPointerException.class)</span></span><br></pre></td></tr></table></figure><p>表示发生NullPointerException或该异常的子类异常不回滚，其他异常则回滚。</p><h3 id="事务的全注解式开发"><a href="#事务的全注解式开发" class="headerlink" title="事务的全注解式开发"></a>事务的全注解式开发</h3><p>编写一个类来代替配置文件，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bank;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Spring6Config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 代替spring.xml配置文件，在这个类当中完成配置。</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.powernode.bank&quot;)</span> <span class="comment">// 组件扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 开启事务注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring6Config</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Spring框架，看到这个@Bean注解后，会调用这个被标注的方法，这个方法的返回值是一个java对象，这个java对象会自动纳入IoC容器管理。</span></span><br><span class="line">    <span class="comment">// 返回的对象就是Spring容器当中的一个Bean了。</span></span><br><span class="line">    <span class="comment">// 并且这个bean的名字是：dataSource</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring6&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getDataSourceTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试程序如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNoXml</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Spring6Config.class);</span><br><span class="line">    <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;accountService&quot;</span>, AccountService.class);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        accountService.transfer(<span class="string">&quot;act-001&quot;</span>, <span class="string">&quot;act-002&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;转账成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666511446141-925a1a0e-05ab-4306-996f-532878d5c5a3.png" alt="img"></p><p>数据库表中数据：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666511460275-5ede53ce-9ad1-4bce-935a-32436a46c83a.png" alt="img"></p><h3 id="声明式事务之XML实现方式"><a href="#声明式事务之XML实现方式" class="headerlink" title="声明式事务之XML实现方式"></a>声明式事务之XML实现方式</h3><p>配置步骤：</p><ul><li>第一步：配置事务管理器</li><li>第二步：配置通知</li><li>第三步：配置切面</li></ul><p>记得添加aspectj的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--aspectj依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring配置文件如下：</p><p><strong>记得添加aop的命名空间。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.bank&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring6&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;txManager&quot;</span>&gt;</span></span><br><span class="line">        &lt;!- 配置通知的相关属性 --&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 之前讲的 事务的属性都可以在以下标签中进行配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Throwable&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  *模糊匹配 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;del*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Throwable&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Throwable&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Throwable&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line">              <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get***&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 启用优化策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.powernode.bank.service..*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切面 = 通知 + 切点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将AccountServiceImpl类上的@Transactional注解删除。</p><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransferXml</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring2.xml&quot;</span>);</span><br><span class="line">    <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;accountService&quot;</span>, AccountService.class);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        accountService.transfer(<span class="string">&quot;act-001&quot;</span>, <span class="string">&quot;act-002&quot;</span>, <span class="number">10000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;转账成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666510211960-60399e1d-ae1c-4e73-9593-3ce0086bf143.png" alt="img"></p><p>数据库表中记录：</p><p><img src="/2023/01/11/SSM/Spring/9-Spring%E5%AF%B9%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/1666510230350-5150f5ca-3812-40d6-8817-adc102516e7e.png" alt="img"></p><p>通过测试可以看到配置XML已经起作用了。</p>]]></content>
      
      
      <categories>
          
          <category> Spring6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
            <tag> Spring6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-AOP切面编程</title>
      <link href="/2023/01/10/SSM/Spring/8-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/01/10/SSM/Spring/8-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="十五、面向切面编程AOP"><a href="#十五、面向切面编程AOP" class="headerlink" title="十五、面向切面编程AOP"></a>十五、面向切面编程AOP</h1><p>写着写着代码就要想一下， 我们要不要面向切面 啊？ 我们要不要面向切面啊？</p><p>IoC使软件组件松耦合。AOP让你能够捕捉系统中经常使用的功能，把它转化成组件。</p><p>AOP（Aspect Oriented Programming）：面向切面编程，面向方面编程。（AOP是一种编程技术）</p><p>AOP是对OOP的补充延伸。</p><p>AOP底层使用的就是动态代理来实现的。</p><h3 id="Spring的AOP使用的动态代理"><a href="#Spring的AOP使用的动态代理" class="headerlink" title="Spring的AOP使用的动态代理"></a>Spring的AOP使用的动态代理</h3><p>JDK动态代理 + CGLIB动态代理技术。&#x3D;&#x3D;Spring在这两种动态代理中灵活切换&#x3D;&#x3D;，如果是代理接口，会默认使用JDK动态代理，如果要代理某个类，这个类没有实现接口，就会切换使用CGLIB。当然，你也可以强制通过一些配置让Spring只使用CGLIB。</p><p>1.切面</p><p> 与业务逻辑不挂钩的业务代码。</p><h2 id="15-1-AOP介绍"><a href="#15-1-AOP介绍" class="headerlink" title="15.1 AOP介绍"></a>15.1 AOP介绍</h2><p>一般一个系统当中都会有一些系统服务，例如：日志、事务管理、安全等。这些系统服务被称为：**&#x3D;&#x3D;交叉业务&#x3D;&#x3D;**</p><p>这些&#x3D;&#x3D;**交叉业务&#x3D;&#x3D;**几乎是通用的，不管你是做银行账户转账，还是删除用户数据。日志、事务管理、安全，这些都是需要做的。</p><p>如果在每一个业务处理过程当中，都掺杂这些交叉业务代码进去的话，存在两方面问题：</p><ul><li>第一：交叉业务代码在多个业务流程中反复出现，显然这个交叉业务代码没有得到复用。并且修改这些交叉业务代码的话，需要修改多处。</li><li>第二：程序员无法专注核心业务代码的编写，在编写核心业务代码的同时还需要处理这些交叉业务。</li></ul><p>使用AOP可以很轻松的解决以上问题。</p><p>请看下图，可以帮助你快速理解AOP的思想：</p><p><img src="/2023/01/10/SSM/Spring/8-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/1665732609757-d8ae52ba-915e-49cf-9ef4-c7bcada0d601.png" alt="img"></p><p><strong>用一句话总结AOP：将与核心业务无关的代码独立的抽取出来，形成一个独立的组件，然后以横向交叉的方式应用到业务流程当中的过程被称为AOP。</strong></p><p><strong>AOP的优点：</strong></p><ul><li><strong>第一：代码复用性增强。</strong></li><li><strong>第二：代码易维护。</strong></li><li><strong>第三：使开发者更关注业务逻辑。</strong></li></ul><h2 id="15-2-AOP的七大术语"><a href="#15-2-AOP的七大术语" class="headerlink" title="15.2 AOP的七大术语"></a>15.2 AOP的七大术语</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">do1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">do2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">do3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do 3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">do4</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do 4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">do5</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 核心业务方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//joinpoint连接点</span></span><br><span class="line">        do1(); <span class="comment">// pointcuy切点</span></span><br><span class="line">        do2();</span><br><span class="line">        do3();</span><br><span class="line">        do5();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exection e)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exection</span>(e);</span><br><span class="line">            <span class="comment">//异常通知</span></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//最终通知</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>连接点 Joinpoint</strong></p></li><li><ul><li>在程序的整个执行流程中，<strong>可以织入</strong>切面的位置。方法的执行前后，异常抛出之后等位置。</li></ul></li><li><p><strong>切点 Pointcut</strong></p></li><li><ul><li>在程序执行流程中，<strong>真正织入</strong>切面的方法。（一个切点对应多个连接点）</li></ul></li><li><p><strong>通知 Advice</strong></p></li><li><ul><li>通知又叫增强，就是具体你要织入的代码。</li><li>通知包括：</li></ul></li><li><ul><li><ul><li>前置通知 —&gt;放在切点前</li><li>后置通知—&gt;切点后</li><li>环绕通知 –&gt;切点前后都有</li><li>异常通知 —&gt;在 catch 异常中</li><li>最终通知 –&gt;在 finally 中</li></ul></li></ul></li><li><p><strong>切面 Aspect</strong></p></li><li><ul><li><strong>切点 + 通知就是切面。</strong></li></ul></li><li><p>织入 Weaving</p></li><li><ul><li>把通知应用到目标对象上的过程。</li></ul></li><li><p>代理对象 Proxy</p></li><li><ul><li>一个目标对象被织入通知后产生的新对象。</li></ul></li><li><p>目标对象 Target</p></li><li><ul><li>被织入通知的对象。</li></ul></li></ul><p>通过下图，大家可以很好的理解AOP的相关术语：</p><p><img src="/2023/01/10/SSM/Spring/8-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/1665735638342-44194599-66e2-4c02-a843-8a8b3ba5b0c8.png" alt="img"></p><h2 id="15-3-切点表达式"><a href="#15-3-切点表达式" class="headerlink" title="15.3 切点表达式"></a>15.3 切点表达式</h2><p>切点表达式用来定义通知（Advice）往哪些方法上切入。</p><p>切入点表达式语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">execution([访问控制权限修饰符] 返回值类型 [全限定类名]方法名(形式参数列表) [异常])</span><br><span class="line"></span><br><span class="line">带 [] 都是可选项。</span><br><span class="line">全限定类名：带包名的类名，不填则为全部含有该方法的类。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问控制权限修饰符：</p><ul><li>可选项。</li><li>没写，就是4个权限都包括。</li><li>写public就表示只包括公开的方法。</li></ul><p>返回值类型：</p><ul><li>必填项。</li><li>* 表示返回值类型任意。</li></ul><p>全限定类名：</p><ul><li>可选项。</li><li>两个点“..”代表当前包以及子包下的所有类。</li><li>省略时表示所有的类。</li></ul><p>方法名：</p><ul><li>必填项。</li><li>*表示所有方法。</li><li>set*表示所有的set方法。</li></ul><p>形式参数列表：</p><ul><li><p>必填项</p></li><li><p>() 表示没有参数的方法</p></li><li><p>(..) 参数类型和个数随意的方法</p></li><li><p>(*) 只有一个参数的方法</p></li><li><p>(*, String) 第一个参数类型随意，第二个参数是String的。</p></li></ul><p>异常：</p><ul><li>可选项。</li><li>省略时表示任意异常类型。</li></ul><p>理解以下的切点表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">public</span> * com.powernode.mall.service.*.delete*(..))</span><br><span class="line">    访问控制符为 <span class="keyword">public</span> 返回类型为任意， 全类名为com.powernode.mall.service.下所有的类 ，方法名为 delete 形参列表为 任意</span><br><span class="line">execution(* com.powernode.mall..*(..))</span><br><span class="line">    </span><br><span class="line">execution(* *(..))</span><br></pre></td></tr></table></figure><h2 id="15-4-使用Spring的AOP"><a href="#15-4-使用Spring的AOP" class="headerlink" title="15.4 使用Spring的AOP"></a>15.4 使用Spring的AOP</h2><p>Spring对AOP的实现包括以下3种方式：</p><ul><li><strong>第一种方式：Spring框架结合AspectJ框架实现的AOP，基于注解方式。</strong></li><li><strong>第二种方式：Spring框架结合AspectJ框架实现的AOP，基于XML方式。</strong></li><li>第三种方式：Spring框架自己实现的AOP，基于XML配置方式。</li></ul><p>实际开发中，都是Spring+AspectJ来实现AOP。所以我们重点学习第一种和第二种方式。</p><p>什么是AspectJ？（Eclipse组织的一个支持AOP的框架。AspectJ框架是独立于Spring框架之外的一个框架，Spring框架用了AspectJ） </p><p>AspectJ项目起源于帕洛阿尔托（Palo Alto）研究中心（缩写为PARC）。该中心由Xerox集团资助，Gregor Kiczales领导，从1997年开始致力于AspectJ的开发，1998年第一次发布给外部用户，2001年发布1.0 release。为了推动AspectJ技术和社团的发展，PARC在2003年3月正式将AspectJ项目移交给了Eclipse组织，因为AspectJ的发展和受关注程度大大超出了PARC的预期，他们已经无力继续维持它的发展。</p><h3 id="15-4-1-准备工作"><a href="#15-4-1-准备工作" class="headerlink" title="15.4.1 准备工作"></a>15.4.1 准备工作</h3><p>使用Spring+AspectJ的AOP需要引入的依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring aop依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring aspects依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0-M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring配置文件中添加context命名空间和aop命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="15-4-2-基于AspectJ的AOP注解式开发"><a href="#15-4-2-基于AspectJ的AOP注解式开发" class="headerlink" title="15.4.2 基于AspectJ的AOP注解式开发"></a>15.4.2 基于AspectJ的AOP注解式开发</h3><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>第一步：定义目标类以及目标方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="comment">// 目标方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;订单已生成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：定义切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：目标类和切面类都纳入spring bean管理</p><p>在目标类OrderService上添加**@Component**注解。</p><p>在切面类MyAspect类上添加**@Component**注解。</p><p>第四步：在spring配置文件中添加组建扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.spring6.service&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第五步：在切面类中添加通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 这就是需要增强的代码（通知）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">advice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第六步：在通知上添加切点表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 切点表达式</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="comment">// 这就是需要增强的代码（通知）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">advice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注解@Before表示前置通知。</strong></p><p>第七步：在spring配置文件中启用自动代理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.spring6.service&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启自动代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;aop:aspectj-autoproxy  proxy-target-class&#x3D;”true”&#x2F;&gt; 开启自动代理之后，凡事带有@Aspect注解的bean都会生成代理对象。</p><p>proxy-target-class&#x3D;”true” 表示采用cglib动态代理。</p><p>proxy-target-class&#x3D;”false” 表示采用jdk动态代理。默认值是false。即使写成false，当没有接口的时候，也会自动选择cglib生成代理类。</p><p>测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AOPTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAOP</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-aspectj-aop-annotation.xml&quot;</span>);</span><br><span class="line">        <span class="type">OrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;orderService&quot;</span>, OrderService.class);</span><br><span class="line">        orderService.generate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/01/10/SSM/Spring/8-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/1665843923087-e1116f09-2470-46cb-b21a-1526f62cab50.png" alt="img"></p><h4 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h4><p>通知类型包括：</p><ul><li>前置通知：@Before 目标方法执行之前的通知</li><li>后置通知：@AfterReturning 目标方法执行之后的通知</li><li>环绕通知：@Around 目标方法之前添加通知，同时目标方法执行之后添加通知。</li><li>异常通知：@AfterThrowing 发生异常之后执行的通知</li><li>最终通知：@After 放在finally语句块中的通知</li></ul><p>接下来，编写程序来测试这几个通知的执行顺序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知开始&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行目标方法。</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="comment">// 目标方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;订单已生成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.spring6.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AOPTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAOP</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-aspectj-aop-annotation.xml&quot;</span>);</span><br><span class="line">        <span class="type">OrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;orderService&quot;</span>, OrderService.class);</span><br><span class="line">        orderService.generate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/10/SSM/Spring/8-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/1665892617792-22cc74a2-6876-4cd1-bb17-87d3b5211cae.png" alt="img"></p><p>通过上面的执行结果就可以判断他们的执行顺序了，这里不再赘述。</p><p>结果中没有异常通知，这是因为目标程序执行过程中没有发生异常。我们尝试让目标方法发生异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="comment">// 目标方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;订单已生成！&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;模拟异常发生&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行测试程序，结果如下：</p><p><img src="/2023/01/10/SSM/Spring/8-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/1665892847715-75045cd0-63b1-47f9-a77e-05911dc72339.png" alt="img"></p><p>通过测试得知，当发生异常之后，最终通知也会执行，因为最终通知@After会出现在finally语句块中。</p><p>出现异常之后，<strong>后置通知</strong>和<strong>环绕通知的结束部分</strong>不会执行。</p><h4 id="切面的先后顺序"><a href="#切面的先后顺序" class="headerlink" title="切面的先后顺序"></a>切面的先后顺序</h4><p>我们知道，业务流程当中不一定只有一个切面，可能有的切面控制事务，有的记录日志，有的进行安全控制，如果多个切面的话，顺序如何控制：<strong>可以使用@Order注解来标识切面类，为@Order注解的value指定一个整数型的数字，数字越小，优先级越高</strong>。</p><p>再定义一个切面类，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span> <span class="comment">//设置优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;YourAspect环绕通知开始&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行目标方法。</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;YourAspect环绕通知结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;YourAspect前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;YourAspect后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;YourAspect异常通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;YourAspect最终通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(2)</span> <span class="comment">//设置优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知开始&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行目标方法。</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行测试程序：</p><p><img src="/2023/01/10/SSM/Spring/8-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/1665893738167-b3c55a19-6129-4615-813f-9b8dc0f17f40.png" alt="img"></p><p>通过修改@Order注解的整数值来切换顺序，执行测试程序：</p><p><img src="/2023/01/10/SSM/Spring/8-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/1665893833282-2cbc59cc-15a5-44c4-bb20-cbdac65a750d.png" alt="img"></p><h4 id="优化使用切点表达式"><a href="#优化使用切点表达式" class="headerlink" title="优化使用切点表达式"></a>优化使用切点表达式</h4><p>观看以下代码中的切点表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知开始&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行目标方法。</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点是：</p><ul><li>第一：切点表达式重复写了多次，没有得到复用。</li><li>第二：如果要修改切点表达式，需要修改多处，难维护。</li></ul><p>可以这样做：将切点表达式单独的定义出来，在需要的位置引入即可。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.powernode.spring6.service.OrderService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aroundAdvice</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知开始&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行目标方法。</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@Pointcut注解来定义独立的切点表达式。</p><p>注意这个@Pointcut注解标注的方法随意，只是起到一个能够让@Pointcut注解编写的位置。</p><p>执行测试程序：</p><p><img src="/2023/01/10/SSM/Spring/8-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/1665893833282-2cbc59cc-15a5-44c4-bb20-cbdac65a750d.png" alt="img"></p><h5 id="1-切点一个小细节"><a href="#1-切点一个小细节" class="headerlink" title="1.切点一个小细节"></a>1.切点一个小细节</h5><blockquote><p>ProceedingJoinPoint 是专门使用在环绕方法(环绕切面)中的切点，</p><p>而 JoinPoint 可以使用在任意的切面中。（spring在调用 切面的方法时会自动传递一个 joinpoint 参数）</p></blockquote><p>可以通过切点获得目标方法的签名。</p><h5 id="a-ProceedingJoinPoint"><a href="#a-ProceedingJoinPoint" class="headerlink" title="a.ProceedingJoinPoint"></a>a.ProceedingJoinPoint</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;commonCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Arround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;环绕通知开始&quot;</span>);</span><br><span class="line">    proceedingJoinPoint.proceed();</span><br><span class="line">    System.out.println(<span class="string">&quot;环绕通知结束&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="b-JoinPoint"><a href="#b-JoinPoint" class="headerlink" title="b.JoinPoint"></a>b.JoinPoint</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">    System.out.println(<span class="string">&quot;目标方法的方法名&quot;</span>+signature.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标方法的签名是什么？ —-&gt;从修饰符开始，一直到方法名字。</p><p><img src="/2023/01/10/SSM/Spring/8-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/image-20230111125313541.png" alt="image-20230111125313541"></p><h4 id="全注解式开发AOP"><a href="#全注解式开发AOP" class="headerlink" title="全注解式开发AOP"></a>全注解式开发AOP</h4><p>就是编写一个类，在这个类上面使用大量注解来代替spring的配置文件，spring配置文件消失了，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.powernode.spring6.service&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring6Configuration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试程序也变化了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAOPWithAllAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Spring6Configuration.class);</span><br><span class="line">    <span class="type">OrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;orderService&quot;</span>, OrderService.class);</span><br><span class="line">    orderService.generate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/2023/01/10/SSM/Spring/8-AOP%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/1665893833282-2cbc59cc-15a5-44c4-bb20-cbdac65a750d.png" alt="img"></p><h3 id="15-4-3-基于XML配置方式的AOP（了解）"><a href="#15-4-3-基于XML配置方式的AOP（了解）" class="headerlink" title="15.4.3 基于XML配置方式的AOP（了解）"></a>15.4.3 基于XML配置方式的AOP（了解）</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IoC注解式开发</title>
      <link href="/2023/01/07/SSM/Spring/6-Spring%20IoC%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
      <url>/2023/01/07/SSM/Spring/6-Spring%20IoC%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1-回顾注解"><a href="#1-回顾注解" class="headerlink" title="1 回顾注解"></a>1 回顾注解</h2><p>注解的存在主要是为了简化XML的配置。<strong>Spring6倡导全注解开发</strong>。</p><p>我们来回顾一下：</p><ul><li>第一：注解怎么定义，注解中的属性怎么定义？</li><li>第二：注解怎么使用？</li><li>第三：通过反射机制怎么读取注解？</li></ul><h3 id="1-1注解怎么定义，注解中的属性怎么定义？"><a href="#1-1注解怎么定义，注解中的属性怎么定义？" class="headerlink" title="1.1注解怎么定义，注解中的属性怎么定义？"></a>1.1<strong>注解怎么定义，注解中的属性怎么定义？</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是自定义了一个注解：Component</p><p>该注解上面修饰的注解包括：Target 注解和 Retention 注解，这两个注解被称为元注解。</p><blockquote><p>元注解：用来注解 注解 的注解。</p></blockquote><h4 id="两个重要的标签"><a href="#两个重要的标签" class="headerlink" title="两个重要的标签"></a>两个重要的标签</h4><ul><li><p>Target 注解用来设置 Component 注解可以出现的位置，</p><ul><li>ElemtType.Type<ul><li>以上代表表示Component注解只能用在类和接口上。</li></ul></li></ul></li><li><p>Retention注解用来设置Component注解的保持性策略，</p><ul><li>RetetionPolicy.RUNTIME<ul><li>以上代表Component注解可以被反射机制读取。</li></ul></li></ul></li></ul><h4 id="定义的属性"><a href="#定义的属性" class="headerlink" title="定义的属性"></a>定义的属性</h4><ul><li>String value(); 是Component注解中的一个属性。<ul><li>该属性类型String，属性名是value。</li></ul></li></ul><h3 id="1-2-注解怎么使用？"><a href="#1-2-注解怎么使用？" class="headerlink" title="1.2.注解怎么使用？"></a><strong>1.2.注解怎么使用？</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.annotation.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(value = &quot;userBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法格式：</p><ul><li>@注解类型名(属性名&#x3D;属性值, 属性名&#x3D;属性值, 属性名&#x3D;属性值……)</li></ul><p>userBean为什么使用双引号括起来，因为value属性是String类型，字符串。</p><blockquote><p> 另外如果属性名是value，则在使用的时候可以省略属性名，例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.annotation.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Component(value = &quot;userBean&quot;)</span></span><br><span class="line"><span class="meta">@Component(&quot;userBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过反射机制怎么读取注解？</strong></p><blockquote><p>—————–&gt;类的clazz对象.isAnnotationPresent(注解的class对象)</p></blockquote><p>接下来，我们来写一段程序，当Bean类上有Component注解时，则实例化Bean对象，如果没有，则不实例化对象。</p><p>我们准备两个Bean，一个上面有注解，一个上面没有注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.annotation.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;userBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vip</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设我们现在只知道包名：com.powernode.bean。至于这个包下有多少个Bean我们不知道。哪些Bean上有注解，哪些Bean上没有注解，这些我们都不知道，如何通过程序全自动化判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.annotation.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 动力节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 存放Bean的Map集合。key存储beanId。value存储Bean。</span></span><br><span class="line">        Map&lt;String,Object&gt; beanMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> <span class="string">&quot;com.powernode.bean&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> packageName.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResource(path);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(url.getPath());</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        Arrays.stream(files).forEach(f -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> packageName + <span class="string">&quot;.&quot;</span> + f.getName().split(<span class="string">&quot;\\.&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">                <span class="keyword">if</span> (clazz.isAnnotationPresent(Component.class)) &#123;</span><br><span class="line">                    <span class="type">Component</span> <span class="variable">component</span> <span class="operator">=</span> clazz.getAnnotation(Component.class);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">beanId</span> <span class="operator">=</span> component.value();</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                    beanMap.put(beanId, bean);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(beanMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665543007882-24036142-350b-4209-bb20-46a61e35716d.png)</p><h2 id="2-声明Bean的注解"><a href="#2-声明Bean的注解" class="headerlink" title="2 声明Bean的注解"></a>2 声明Bean的注解</h2><p>负责声明Bean的注解，常见的包括四个：</p><ul><li>@Component  其余三个是第一个的别名。</li><li>@Controller</li><li>@Service</li><li>@Repository</li></ul><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Component.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Component.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Component.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码可以看到，@Controller、@Service、@Repository这三个注解都是@Component注解的别名。</p><p>也就是说：这四个注解的功能都一样。用哪个都可以。</p><p>只是为了增强程序的可读性，建议：</p><ul><li>控制器类上使用：Controller</li><li>service类上使用：Service</li><li>dao类上使用：Repository</li></ul><p>他们都是只有一个value属性。value属性用来指定bean的id，也就是bean的名字。</p><p>![img](6-Spring IoC注解式开发&#x2F;1665545099269-ebd7e446-bc2f-4442-89b8-3f513e546a8b.png)</p><h2 id="3-Spring注解的使用"><a href="#3-Spring注解的使用" class="headerlink" title="3 Spring注解的使用"></a>3 Spring注解的使用</h2><p>如何使用以上的注解呢？</p><ul><li>第一步：加入aop的依赖</li><li>第二步：在配置文件中添加context命名空间</li><li>第三步：在配置文件中指定扫描的包</li><li>第四步：在Bean类上使用注解</li></ul><p><strong>第一步：加入aop的依赖</strong></p><p>我们可以看到当加入spring-context依赖之后，会关联加入aop的依赖。所以这一步不用做。</p><p>![img](6-Spring IoC注解式开发&#x2F;1665545268001-e3fb24f3-6688-4f52-a8c7-7c3084fa10a2.png)</p><p><strong>第二步：在配置文件中添加context命名空间</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第三步：在配置文件中指定要扫描的包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.spring6.bean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第四步：在Bean类上使用注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(value = &quot;userBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">userBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userBean&quot;</span>, User.class);</span><br><span class="line">        System.out.println(userBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665545669944-c067eacb-f65b-45ab-b68b-2320647cdfb4.png)</p><p><strong>如果注解的属性名是value，那么value是可以省略的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;vipBean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vip</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.spring6.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.bean.Vip;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">        <span class="type">Vip</span> <span class="variable">vipBean</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;vipBean&quot;</span>, Vip.class);</span><br><span class="line">        System.out.println(vipBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665545860738-8bae2a45-efa8-40eb-9213-0dbd2ae1b54a.png)</p><p><strong>如果把value属性彻底去掉，spring会被Bean自动取名吗？会的。并且默认名字的规律是：Bean类名首字母小写即可。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，这个BankDao的bean的名字为：bankDao</p><p>测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.bean.BankDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">        <span class="type">BankDao</span> <span class="variable">bankDao</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;bankDao&quot;</span>, BankDao.class);</span><br><span class="line">        System.out.println(bankDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665546100844-e0ffc213-8126-419a-ab67-7f433ad43105.png)</p><p>我们将Component注解换成其它三个注解，看看是否可以用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665546198246-f9d6adc1-ecc8-4e8c-babf-49f2ed7b87cd.png)</p><p>剩下的两个注解大家可以测试一下。</p><p><strong>如果是多个包怎么办？有两种解决方案：</strong></p><ul><li><strong>第一种：在配置文件中指定多个包，用逗号隔开。</strong></li><li><strong>第二种：指定多个包的共同父包。</strong></li></ul><p>先来测试一下逗号（英文）的方式：</p><p>创建一个新的包：bean2，定义一个Bean类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.bean2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.spring6.bean,com.powernode.spring6.bean2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.bean.BankDao;</span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.bean2.Order;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">        <span class="type">BankDao</span> <span class="variable">bankDao</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;bankDao&quot;</span>, BankDao.class);</span><br><span class="line">        System.out.println(bankDao);</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;order&quot;</span>, Order.class);</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665546710304-8ebbe95d-1d1d-44fa-9605-9dad43e487b7.png)</p><p>我们再来看看，指定共同的父包行不行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.spring6&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行测试程序：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665546777022-4eb8c5e3-22ed-4baf-8722-a5fa98df253d.png)</p><h2 id="4-选择性实例化Bean"><a href="#4-选择性实例化Bean" class="headerlink" title="4 选择性实例化Bean"></a>4 选择性实例化Bean</h2><p>假设在某个包下有很多Bean，有的Bean上标注了Component，有的标注了Controller，有的标注了Service，有的标注了Repository，现在由于某种特殊业务的需要，只允许其中所有的Controller参与Bean管理，其他的都不实例化。这应该怎么办呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.bean3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B的无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;C的无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">D</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D的无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">E</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;E的无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">F</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;F的无参数构造方法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我只想实例化bean3包下的Controller。配置文件这样写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.spring6.bean3&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>use-default-filters&#x3D;”true” 表示：使用spring默认的规则，只要有Component、Controller、Service、Repository中的任意一个注解标注，则进行实例化。</p><p><strong>use-default-filters&#x3D;”false”</strong> 表示：不再spring默认实例化规则，即使有Component、Controller、Service、Repository这些注解标注，也不再实例化。</p><p>&lt;context:include-filter type&#x3D;”annotation” expression&#x3D;”org.springframework.stereotype.Controller”&#x2F;&gt; 表示只有Controller进行实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testChoose</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-choose.xml&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665556059297-de0d7dbc-aa37-46a3-9b1d-1d4c246b0ffc.png)</p><p>也可以将use-default-filters设置为true（不写就是true），并且采用exclude-filter方式排出哪些注解标注的Bean不参与实例化：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.spring6.bean3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Repository&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行测试程序：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665556372417-14f2208c-4151-4bcd-9f22-80db5e3ed837.png)</p><h2 id="5-负责注入的注解"><a href="#5-负责注入的注解" class="headerlink" title="5 负责注入的注解"></a>5 负责注入的注解</h2><p>@Component @Controller @Service @Repository 这四个注解是用来声明Bean的，声明后这些Bean将被实例化。接下来我们看一下，如何给Bean的属性赋值。给Bean属性赋值需要用到这些注解：</p><ul><li>@Value  —&gt;简单类型</li><li>@Autowired  ——–&gt;根据类型注入</li><li>@Qualifier  —-&gt;配合上面使用名字注入</li><li>@Resource  —&gt;J</li></ul><h3 id="5-1-Value"><a href="#5-1-Value" class="headerlink" title="5.1 @Value"></a>5.1 @Value</h3><p>当属性的类型是简单类型时，可以使用@Value注解进行注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.bean4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Value(value = &quot;zhangsan&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;20&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启包扫描：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.powernode.spring6.bean4&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">@Test</span><br><span class="line">public void testValue()&#123;</span><br><span class="line">    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;spring-injection.xml&quot;);</span><br><span class="line">    Object user = applicationContext.getBean(&quot;user&quot;);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665557109935-e0300b67-fd35-4d66-99d1-dac41cb0f13d.png)</p><p>通过以上代码可以发现，我们并没有给属性提供setter方法，但仍然可以完成属性赋值。</p><p>如果提供setter方法，并且在setter方法上添加@Value注解，可以完成注入吗？尝试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.bean4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;李四&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;30&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665557275282-82ba995b-6395-4d32-b322-d976ac3299d1.png)</p><p>通过测试可以得知，@Value注解可以直接使用在属性上，也可以使用在setter方法上。都是可以的。都可以完成属性的赋值。</p><p>为了简化代码，以后我们一般不提供setter方法，直接在属性上使用@Value注解完成属性赋值。</p><p>出于好奇，我们再来测试一下，是否能够通过构造方法完成注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.bean4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="meta">@Value(&quot;隔壁老王&quot;)</span> String name, <span class="meta">@Value(&quot;33&quot;)</span> <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665557643220-1010bea9-5578-4388-8868-4beb11dfbe95.png)</p><p>通过测试得知：@Value注解可以出现在属性上、setter方法上、以及构造方法的形参上。可见Spring给我们提供了多样化的注入。太灵活了。</p><h3 id="5-2-Autowired与-Qualifier"><a href="#5-2-Autowired与-Qualifier" class="headerlink" title="5.2 @Autowired与@Qualifier"></a>5.2 @Autowired与@Qualifier</h3><p>@Autowired注解可以用来注入<strong>非简单类型</strong>。被翻译为：自动连线的，或者自动装配。</p><p>单独使用@Autowired注解，<strong>默认根据类型装配</strong>。【默认是byType】</p><p>看一下它的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.beans.factory.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码中有两处需要注意：</p><ul><li><p>第一处：该注解可以标注在哪里？</p></li><li><ul><li>构造方法上</li><li>方法上</li><li>形参上</li><li>属性上</li><li>注解上</li></ul></li><li><p>第二处：该注解有一个required属性，默认值是true，表示在注入的时候要求被注入的Bean必须是存在的，如果不存在则报错。如果required属性设置为false，表示注入的Bean存在或者不存在都没关系，存在的话就注入，不存在的话，也不报错。</p></li></ul><p><strong>我们先在属性上使用@Autowired注解：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.spring6.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span> <span class="comment">//纳入bean管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoForMySQL</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在向mysql数据库插入User数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">// 纳入bean管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 在属性上注入</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 没有提供构造方法和setter方法。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.powernode.spring6.dao,com.powernode.spring6.service&quot;</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAutowired</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-injection.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665561365140-b0200308-0c25-4a29-96be-5a93594e2d2b.png)</p><p>以上构造方法和setter方法都没有提供，经过测试，仍然可以注入成功。</p><p><strong>接下来，再来测试一下@Autowired注解出现在setter方法上：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665562770986-e19377a6-af3e-4082-9463-16c795742ad5.png)</p><p><strong>我们再来看看能不能出现在构造方法上：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665562985700-7820d3d8-cf43-43af-8c81-46f301ea2835.png)</p><p><strong>再来看看，这个注解能不能只标注在构造方法的形参上：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(<span class="meta">@Autowired</span> UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665563225083-172d5675-cfcb-4f63-9b83-ce85b29b953e.png)</p><p><strong>还有更劲爆的，当有参数的构造方法只有一个时，@Autowired注解可以省略。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665563320900-df9e4cb3-c046-4f5c-b482-42951f18fb16.png)</p><p><strong>当然，如果有多个构造方法，@Autowired肯定是不能省略的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserService</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665563410134-267b2484-54a3-4204-8e02-a9499ecbe614.png)</p><p>到此为止，我们已经清楚@Autowired注解可以出现在哪些位置了。</p><p>@Autowired注解默认是byType进行注入的，也就是说根据类型注入的，如果以上程序中，UserDao接口还有另外一个实现类，会出现问题吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span> <span class="comment">//纳入bean管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoForOracle</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在向Oracle数据库插入User数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你写完这个新的实现类之后，此时IDEA工具已经提示错误信息了：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665563729880-0421bc02-19ca-4353-8a10-5b0ef9972b90.png)</p><p>错误信息中说：不能装配，UserDao这个Bean的数量大于1.</p><p>怎么解决这个问题呢？<strong>当然要byName，根据名称进行装配了。</strong></p><p>@Autowired注解和@Qualifier注解联合起来才可以根据名称进行装配，在@Qualifier注解中指定Bean名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span> <span class="comment">// 这里没有给bean起名，默认名字是：userDaoForOracle</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoForOracle</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在向Oracle数据库插入User数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDaoForOracle&quot;)</span> <span class="comment">// 这个是bean的名字。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665564055076-ffda3ad0-f957-4216-bf6c-957d62724d5f.png)</p><p>总结：</p><ul><li>@Autowired注解可以出现在：属性上、构造方法上、构造方法的参数上、setter方法上。</li><li>当带参数的构造方法只有一个，@Autowired注解可以省略。</li><li>@Autowired注解默认根据类型注入。如果要根据名称注入的话，需要配合@Qualifier注解一起使用。</li></ul><h3 id="5-3-Resource"><a href="#5-3-Resource" class="headerlink" title="5.3 @Resource"></a>5.3 @Resource</h3><p>@Resource注解也可以完成非简单类型注入。那它和@Autowired注解有什么区别？</p><ul><li>@Resource注解是JDK扩展包中的，也就是说属于JDK的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR是Java规范提案。)</li><li>@Autowired注解是Spring框架自己的。</li><li><strong>@Resource注解默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型byType装配。</strong></li><li><strong>@Autowired注解默认根据类型装配byType，如果想根据名称装配，需要配合@Qualifier注解一起用。</strong></li><li>@Resource注解用在属性上、setter方法上。</li><li>@Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上。</li></ul><p>@Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【<strong>如果是JDK8的话不需要额外引入依赖。高于JDK11或低于JDK8需要引入以下依赖。</strong>】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一定要注意：<strong>如果你用Spring6，要知道Spring6不再支持JavaEE，它支持的是JakartaEE9。（Oracle把JavaEE贡献给Apache了，Apache把JavaEE的名字改成JakartaEE了，大家之前所接触的所有的  javax.*  包名统一修改为  jakarta.*包名了。）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@Resource注解的源码如下：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665565515435-2ad5614a-8572-4c6f-80c1-efa236dbe35f.png)</p><p>测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;xyz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoForOracle</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在向Oracle数据库插入User数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;xyz&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行测试程序：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665622877352-0ae69e3c-e7f3-452d-a405-392901612465.png)</p><p><strong>我们把UserDaoForOracle的名字xyz修改为userDao，让这个Bean的名字和UserService类中的UserDao属性名一致：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoForOracle</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在向Oracle数据库插入User数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行测试程序：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665623044796-c4051a04-c56b-4ce9-b627-333ab7ca7b6a.png)</p><p>通过测试得知，当@Resource注解使用时没有指定name的时候，还是根据name进行查找，这个name是属性名。</p><p>接下来把UserService类中的属性名修改一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao2.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665623273523-aff8ef45-b484-4462-bacc-fba7e14c8fee.png)</p><p>根据异常信息得知：显然当通过name找不到的时候，自然会启动byType进行注入。以上的错误是因为UserDao接口下有两个实现类导致的。所以根据类型注入就会报错。</p><p>我们再来看@Resource注解使用在setter方法上可以吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这个setter方法的方法名，setUserDao去掉set之后，将首字母变小写userDao，userDao就是name</p><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665623530366-79b8e09d-2559-4657-83eb-0b722261045f.png)</p><p>当然，也可以指定name：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.powernode.spring6.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;userDaoForMySQL&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665623611980-a66591e7-bd29-4327-a43c-6c6492c8612f.png)</p><p>一句话总结@Resource注解：默认byName注入，没有指定name时把属性名当做name，根据name找不到时，才会byType注入。byType注入时，某种类型的Bean只能有一个。</p><h2 id="6-全注解式开发"><a href="#6-全注解式开发" class="headerlink" title="6 全注解式开发"></a>6 全注解式开发</h2><p>所谓的全注解开发就是不再使用spring配置文件了。写一个配置类来代替配置文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.powernode.spring6.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScans;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.powernode.spring6.dao&quot;, &quot;com.powernode.spring6.service&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring6Configuration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写测试程序：不再new ClassPathXmlApplicationContext()对象了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNoXml</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Spring6Configuration.class);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    userService.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>![img](6-Spring IoC注解式开发&#x2F;1665624710824-61ee0ae9-ae96-49bf-b189-4a1f358e084a.png)</p><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>5-Bean的循环依赖问题</title>
      <link href="/2023/01/05/SSM/Spring/5-Bean%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/"/>
      <url>/2023/01/05/SSM/Spring/5-Bean%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一、Sigle-Set模式的-循环依赖问题。"><a href="#一、Sigle-Set模式的-循环依赖问题。" class="headerlink" title="一、Sigle+Set模式的 循环依赖问题。"></a>一、Sigle+Set模式的 循环依赖问题。</h2><ul><li><blockquote><p>只有 socle 为 single 才有这个曝光的机制。</p></blockquote></li></ul><p><img src="/2023/01/05/SSM/Spring/5-Bean%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/image-20230105232610981.png" alt="image-20230105232610981"></p><p>- </p><p>XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;husbandBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jhfuture.spring6.Husband&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;wifeBean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;wifeBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jhfuture.spring6.Wife&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;梨花&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;husbandBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>java</strong> src</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Husband</span><br><span class="line"><span class="keyword">package</span> com.jhfuture.spring6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Husband</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Wife wife;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWife</span><span class="params">(Wife wife)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Husband&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, wife=&quot;</span> + wife.getName() +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Wife</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jhfuture.spring6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wife</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Husband husband;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHusband</span><span class="params">(Husband husband)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.husband = husband;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wife&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, husband=&quot;</span> + husband.getName() +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、prototype-Set-模式-—-gt-报错"><a href="#二、prototype-Set-模式-—-gt-报错" class="headerlink" title="二、prototype +Set 模式  —&gt;报错"></a>二、prototype +Set 模式  —&gt;报错</h2><p>直接报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">&#x27;husbandBean&#x27;</span> defined in <span class="keyword">class</span> <span class="title class_">path</span> resource [circle.xml]: Cannot resolve reference to bean <span class="string">&#x27;wifeBean&#x27;</span> <span class="keyword">while</span> setting bean property <span class="string">&#x27;wife&#x27;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>XML文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;husbandBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jhfuture.spring6.Husband&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;wifeBean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;wifeBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jhfuture.spring6.Wife&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;梨花&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;husbandBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、single-prototype-Set模式-—-gt-无问题"><a href="#三、single-prototype-Set模式-—-gt-无问题" class="headerlink" title="三、single + prototype +Set模式 —&gt;无问题"></a>三、single + prototype +Set模式 —&gt;无问题</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;husbandBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jhfuture.spring6.Husband&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;wifeBean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;wifeBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.jhfuture.spring6.Wife&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;single&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;梨花&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;husbandBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、基于构造依赖下产生的循环依赖—–-gt-无法解决"><a href="#五、基于构造依赖下产生的循环依赖—–-gt-无法解决" class="headerlink" title="五、基于构造依赖下产生的循环依赖—–&gt;无法解决"></a>五、基于构造依赖下产生的循环依赖—–&gt;无法解决</h2><h2 id="总结-Spring解决循环依赖的机理"><a href="#总结-Spring解决循环依赖的机理" class="headerlink" title="总结 Spring解决循环依赖的机理"></a>总结 Spring解决循环依赖的机理</h2><blockquote><p>核心–&gt;三层缓存</p></blockquote><p>Spring为什么可以解决set + singleton模式下循环依赖？</p><p>根本的原因在于：这种方式可以做到将“实例化Bean”和“给Bean属性赋值”这两个动作分开去完成。</p><blockquote><p>实例化Bean的时候：调用无参数构造方法来完成。<strong>此时可以先不给属性赋值，可以提前将该Bean对象&#x3D;&#x3D;“曝光”&#x3D;&#x3D;给外界。</strong></p></blockquote><p>给Bean属性赋值的时候：调用setter方法来完成。</p><blockquote><p>两个步骤是完全可以分离开去完成的，并且这&#x3D;&#x3D;两步不要求在同一个时间点上完成&#x3D;&#x3D;。</p></blockquote><p>也就是说，Bean都是单例的，我们可以先把所有的单例Bean实例化出来，放到一个集合当中（我们可以称之为缓存），所有的单例Bean全部实例化完成之后，以后我们再慢慢的调用setter方法给属性赋值。这样就解决了循环依赖的问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4-Bean的实例化方法</title>
      <link href="/2023/01/05/SSM/Spring/4-Bean%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%96%B9%E6%B3%95/"/>
      <url>/2023/01/05/SSM/Spring/4-Bean%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Bean的实例化方式"><a href="#Bean的实例化方式" class="headerlink" title="Bean的实例化方式"></a>Bean的实例化方式</h1><p>Spring为Bean提供了多种实例化方式，通常包括4种方式。（也就是说在Spring中为Bean对象的创建准备了多种方案，目的是：更加灵活）</p><ul><li>第一种：通过构造方法实例化</li><li>第二种：通过简单工厂模式实例化</li><li>第三种：通过factory-bean实例化</li><li>第四种：通过FactoryBean接口实例化</li></ul><h2 id="7-5-BeanFactory和FactoryBean的区别"><a href="#7-5-BeanFactory和FactoryBean的区别" class="headerlink" title="7.5 BeanFactory和FactoryBean的区别"></a>7.5 BeanFactory和FactoryBean的区别</h2><h3 id="7-5-1-BeanFactory"><a href="#7-5-1-BeanFactory" class="headerlink" title="7.5.1 BeanFactory"></a>7.5.1 BeanFactory</h3><p>Spring IoC容器的顶级对象，BeanFactory被翻译为“Bean工厂”，在Spring的IoC容器中，“Bean工厂”负责创建Bean对象。</p><p>BeanFactory是工厂。</p><h3 id="7-5-2-FactoryBean"><a href="#7-5-2-FactoryBean" class="headerlink" title="7.5.2 FactoryBean"></a>7.5.2 FactoryBean</h3><p>FactoryBean：它是一个Bean，是一个能够<strong>辅助Spring</strong>实例化其它Bean对象的一个Bean。</p><p>在Spring中，Bean可以分为两类：</p><ul><li>第一类：普通Bean</li><li>第二类：工厂Bean（记住：工厂Bean也是一种Bean，只不过这种Bean比较特殊，它可以辅助Spring实例化其它Bean对象。）</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3-设计模式</title>
      <link href="/2023/01/04/SSM/Spring/3-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/01/04/SSM/Spring/3-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="GoF"><a href="#GoF" class="headerlink" title="GoF"></a>GoF</h2><h3 id="一、分类"><a href="#一、分类" class="headerlink" title="一、分类"></a>一、分类</h3><p>创建式</p><ul><li>工厂模式</li></ul><p>结构式</p><ul><li><p>代理模式</p><ul><li>JDK提供的可以自动生成代理对象的 proxy 类</li></ul></li><li><p>装饰模式</p><ul><li>io 流的包装</li></ul></li><li><p>适配器模式</p><ul><li>httpServlet</li></ul></li></ul><p>行为式</p><ul><li>观察者模式<ul><li>servlet 监听器</li></ul></li></ul><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>简单工厂模式的角色包括三个：</p><ul><li>抽象产品 角色</li><li>具体产品 角色</li><li>工厂类 角色</li></ul><p>简单工厂模式是 工厂方法模式的特殊一种</p><h2 id="6-2-简单工厂模式"><a href="#6-2-简单工厂模式" class="headerlink" title="6.2 简单工厂模式"></a>6.2 简单工厂模式</h2><p>消费者和生产者的关系。</p><p>简单工厂模式的优点：</p><ul><li>客户端程序&#x3D;&#x3D;不需要关心对象的创建细节&#x3D;&#x3D;，需要哪个对象时，只需要向工厂索要即可，初步实现了责任的分离。客户端只负责“消费”，工厂负责“生产”。生产和消费分离。</li></ul><p>简单工厂模式的缺点：</p><ul><li>缺点1：工厂类集中了所有产品的创造逻辑，形成一个无所不知的全能类，有人把它叫做上帝类。显然工厂类非常关键，不能出问题，一旦出问题，整个系统瘫痪。</li><li>缺点2：不符合OCP开闭原则，在进行系统扩展时，需要修改工厂类。</li></ul><p><strong>Spring中的BeanFactory就使用了简单工厂模式。</strong></p><h2 id="6-3-工厂方法模式"><a href="#6-3-工厂方法模式" class="headerlink" title="6.3 工厂方法模式"></a>6.3 工厂方法模式</h2><p>&#x3D;&#x3D;一个工厂生产一个产品&#x3D;&#x3D;</p><p>工厂方法模式既保留了简单工厂模式的优点，同时又解决了简单工厂模式的缺点。</p><p>工厂方法模式的角色包括：</p><ul><li><strong>抽象工厂角色</strong></li><li><strong>具体工厂角色</strong></li><li>抽象产品角色</li><li>具体产品角色</li></ul><p>我们可以看到在进行功能扩展的时候，不需要修改之前的源代码，显然工厂方法模式符合OCP原则。</p><p>工厂方法模式的优点：</p><ul><li>一个调用者想创建一个对象，只要知道其名称就可以了。 </li><li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。</li><li>屏蔽产品的具体实现，调用者只关心产品的接口。</li></ul><p>工厂方法模式的缺点：—&gt;类爆炸</p><ul><li>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2-Bean的作用域</title>
      <link href="/2023/01/04/SSM/Spring/2-Bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2023/01/04/SSM/Spring/2-Bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> &lt;bean id=<span class="string">&quot;collection&quot;</span> class=<span class="string">&quot;com.jhfuture.spring6.bean.Collection&quot;</span> scope=<span class="string">&quot;prototype&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>scope</p><ul><li>prototype（原型）多例 —–&gt; &#x3D;&#x3D;default&#x3D;&#x3D;<ul><li>类的构造方法只会在 getBeans时执行，并且每次都是返回不同的对象</li></ul></li><li>singleton 单例<ul><li>类的构造方法在使用 &#x3D;&#x3D;new ClassPathXmlApplicationContext&#x3D;&#x3D;就已经被调用，每次调用 getBean 都是返回同一个 对象</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2-Bean的作用域</title>
      <link href="/2023/01/04/SSM/Spring/"/>
      <url>/2023/01/04/SSM/Spring/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-Spring_Attention</title>
      <link href="/2023/01/04/SSM/Spring/0-Attention/"/>
      <url>/2023/01/04/SSM/Spring/0-Attention/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一、XML文件相关"><a href="#一、XML文件相关" class="headerlink" title="一、XML文件相关"></a>一、XML文件相关</h2><ol><li><p>${parameterName}</p><p>引入外部文件时，如果使用 ${parameter}，程序会 &#x3D;&#x3D;先从Windows自带的变量中查找&#x3D;&#x3D;，而不是引入的配置文件。</p><blockquote><p>例如，${username} ，一般会为 Administrator</p></blockquote></li><li><p>怎么解析</p><p>使用 dom4j</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2-事件处理机制</title>
      <link href="/2022/12/26/JAVA/15-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E8%81%94%E7%B3%BB%E6%A1%88%E4%BE%8B/2-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/12/26/JAVA/15-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E8%81%94%E7%B3%BB%E6%A1%88%E4%BE%8B/2-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="java-实践处理机制。"><a href="#java-实践处理机制。" class="headerlink" title="java 实践处理机制。"></a>java 实践处理机制。</h2><p>“委派事件模型”。当事件发生时，会产生&#x3D;&#x3D;“该事件的对象”&#x3D;&#x3D;，然后会把该对象交给 &#x3D;&#x3D;“事件的监听者”&#x3D;&#x3D;进行处理。</p><p><img src="/2022/12/26/JAVA/15-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E8%81%94%E7%B3%BB%E6%A1%88%E4%BE%8B/2-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/image-20221226203251158.png" alt="image-20221226203251158"></p><p>机制分析举例</p><p><img src="/2022/12/26/JAVA/15-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E8%81%94%E7%B3%BB%E6%A1%88%E4%BE%8B/2-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/image-20221226203307900.png" alt="image-20221226203307900"></p><h3 id="二、深入理解"><a href="#二、深入理解" class="headerlink" title="二、深入理解"></a>二、深入理解</h3><p><strong>事件源</strong>：</p><p>​产生事件的对象，比如按钮，窗口等。</p><p><strong>事件</strong>：</p><p>​承载事件源状态改变时的对象，比如当键盘事件会生成一个事件对象</p><pre><code>- 事件类型</code></pre><p><strong>事件监听器接口</strong>：</p><p>​1.事件监听器实际上就是一个类，该类&#x3D;&#x3D;实现了某个事件监听器接口&#x3D;&#x3D;。</p><p><img src="/2022/12/26/JAVA/15-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E8%81%94%E7%B3%BB%E6%A1%88%E4%BE%8B/2-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/image-20221226203706603.png" alt="image-20221226203706603"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-坦克大战</title>
      <link href="/2022/12/25/JAVA/15-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E8%81%94%E7%B3%BB%E6%A1%88%E4%BE%8B/1-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/"/>
      <url>/2022/12/25/JAVA/15-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E8%81%94%E7%B3%BB%E6%A1%88%E4%BE%8B/1-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><h3 id="1-绘图坐标体系"><a href="#1-绘图坐标体系" class="headerlink" title="1.绘图坐标体系"></a>1.绘图坐标体系</h3><p><img src="/2022/12/25/JAVA/15-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E8%81%94%E7%B3%BB%E6%A1%88%E4%BE%8B/1-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221225211319154.png" alt="image-20221225211319154"></p><p><img src="/2022/12/25/JAVA/15-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E8%81%94%E7%B3%BB%E6%A1%88%E4%BE%8B/1-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221225211446052.png" alt="image-20221225211446052"></p><h4 id="2-绘制的基本使用"><a href="#2-绘制的基本使用" class="headerlink" title="2.绘制的基本使用"></a>2.绘制的基本使用</h4><p><img src="/2022/12/25/JAVA/15-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E8%81%94%E7%B3%BB%E6%A1%88%E4%BE%8B/1-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221225213450208.png" alt="image-20221225213450208"></p><h5 id="1-绘制的常用方法。"><a href="#1-绘制的常用方法。" class="headerlink" title="1-绘制的常用方法。"></a>1-绘制的常用方法。</h5><p>小细节。</p><p>字体 x,y 的起始位置</p><p><img src="/2022/12/25/JAVA/15-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E8%81%94%E7%B3%BB%E6%A1%88%E4%BE%8B/1-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98/image-20221225215117202.png" alt="image-20221225215117202"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">画直线 drawLine(<span class="type">int</span> x1,<span class="type">int</span> y1,<span class="type">int</span> x2,<span class="type">int</span> y2)</span><br><span class="line">g.drawLine(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">画矩形边框 drawRect(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height)</span><br><span class="line">g.drawRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">画椭圆边框 drawOval(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height)</span><br><span class="line">填充矩形 fillRect(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height)</span><br><span class="line">设置画笔的颜色</span><br><span class="line"> g.setColor(Color.blue);</span><br><span class="line"> g.fillRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">填充椭圆 fillOval(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height)</span><br><span class="line"><span class="comment">// g.setColor(Color.red);</span></span><br><span class="line">韩顺平循序渐进学 Java 零基础</span><br><span class="line">第 <span class="number">747</span>页</span><br><span class="line"><span class="comment">// g.fillOval(10, 10, 100, 100);</span></span><br><span class="line"><span class="comment">//画图片 drawImage(Image img, int x, int y, ..)</span></span><br><span class="line"><span class="comment">//1. 获取图片资源, /bg.png 表示在该项目的根目录去获取 bg.png 图片资源</span></span><br><span class="line"><span class="comment">// Image image = Toolkit.getDefaultToolkit().getImage(Panel.class.getResource(&quot;/bg.png&quot;));</span></span><br><span class="line"><span class="comment">// g.drawImage(image, 10, 10, 175, 221, this);</span></span><br><span class="line"><span class="comment">//画字符串 drawString(String str, int x, int y)//写字</span></span><br><span class="line"><span class="comment">//给画笔设置颜色和字体</span></span><br><span class="line">g.setColor(Color.red);</span><br><span class="line">g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;隶书&quot;</span>, Font.BOLD, <span class="number">50</span>));</span><br><span class="line"><span class="comment">//这里设置的 100， 100， 是 &quot;北京你好&quot;左下角</span></span><br><span class="line">g.drawString(<span class="string">&quot;北京你好&quot;</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">//设置画笔的字体 setFont(Font font</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-线程的基本使用</title>
      <link href="/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一、简单定义"><a href="#一、简单定义" class="headerlink" title="一、简单定义"></a>一、简单定义</h2><ol><li><p>什么是进程</p><p><img src="/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221224190211563.png" alt="image-20221224190211563"></p></li></ol><p>2.线程与进程</p><p>线程由进程创建。</p><p>3.并发与并行</p><p><img src="/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221224190252847.png" alt="image-20221224190252847"></p><h2 id="二、线程的使用"><a href="#二、线程的使用" class="headerlink" title="二、线程的使用"></a>二、线程的使用</h2><ol><li><p>使用 继承 thread 类。重写 run 方法</p></li><li><p>实现 Runnable 接口，重写 run 方法，并将其对象传入 thread 的构造器中创建 thread 对象</p></li></ol><h3 id="1-Extend-thread"><a href="#1-Extend-thread" class="headerlink" title="1.Extend thread"></a>1.Extend thread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">threadsEXtend</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是主线程&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小狗汪汪&quot;</span>+<span class="string">&quot;线程名&quot;</span>+currentThread().getClass()+count++);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count==<span class="number">30</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-implement-Runnable-解决该类已经有-基继承的类"><a href="#2-implement-Runnable-解决该类已经有-基继承的类" class="headerlink" title="2.implement Runnable 解决该类已经有 基继承的类"></a>2.implement Runnable 解决该类已经有 基继承的类</h3><blockquote><p>Thread 中具有代理模式的设计模式。</p><p>具有 一个 runnable 类型 的 Target</p><p>然后还有一个 构造器，可以接受一个 实现了 runnale 接口的类。</p></blockquote><p> 因为 runnable 接口没有 start 方法，创建 线程需要调用 start 方法，所以需要 <strong>thread 类进行代理。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.threadUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(cat);</span><br><span class="line">        thread.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程名&quot;</span> +<span class="string">&quot;第&quot;</span>+count++ +<span class="string">&quot;此&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-extend-和-implement-runnable-的区别"><a href="#3-extend-和-implement-runnable-的区别" class="headerlink" title="3. extend 和 implement runnable  的区别"></a>3. extend 和 implement runnable  的区别</h3><ol><li><p>Runnable 更适合 多个线程共享一个资源的情况，并且避免了单继承的限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T3 t3=<span class="keyword">new</span> <span class="title class_">T3</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221224195957206.png" alt="image-20221224195957206"></p></li></ol><h3 id="4-通知线程退出"><a href="#4-通知线程退出" class="headerlink" title="4.通知线程退出"></a>4.通知线程退出</h3><ol><li>线程完成任务后，会自动退出</li><li>可以使用&#x3D;&#x3D;控制变量&#x3D;&#x3D;来控制 run 方法退出的方式停止进程，即通知方式。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">安丽</span><br><span class="line"><span class="keyword">package</span> com.threadUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadExit_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">exitTest</span> <span class="variable">exitTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">exitTest</span>();</span><br><span class="line">        exitTest.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;等待五秒后手动关闭&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">5</span>*<span class="number">1000</span>);</span><br><span class="line">        exitTest.setLoop(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exitTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> loop=<span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (loop)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正在运行&quot;</span>+count++);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//等待500毫秒</span></span><br><span class="line">                sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoop</span><span class="params">(<span class="type">boolean</span> loop)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.loop=loop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-常用方法"><a href="#5-常用方法" class="headerlink" title="5.常用方法"></a>5.常用方法</h3><ul><li>1.setName &#x2F;&#x2F;设置线程名字</li><li>2.getName &#x2F;&#x2F;返回线程名称</li><li>3.start 启动该线程，jvm 底层调用该进程的 start0 方法</li><li>4.run &#x2F;&#x2F;直接调用线程对象的 run 方法</li><li>5-setPriority &#x2F;&#x2F;更改线程的优先级</li><li>6-getPriority &#x2F;&#x2F;获取线程的优先级<ul><li>min –1</li><li>max –10</li><li>normal –5</li></ul></li><li>7-sleep &#x2F;&#x2F;让线程指定休眠  xxx 毫秒 (暂停执行)</li><li>8- interrupt &#x2F;&#x2F;中断&#x3D;&#x3D;线程的休眠&#x3D;&#x3D;</li><li>9- yield :线程的礼让，让出 CPU ，让其他线程先执行，但礼让的时间不一定，所以礼让也&#x3D;&#x3D;不一定成功&#x3D;&#x3D;。<ul><li>是否礼让由系统资源决定，操作系统内核负责处理，这一块 java 无法控制</li></ul></li><li>10- join:线程的插队，插队的线程一旦插队成功，则肯定&#x3D;&#x3D;先执行完插入的线程的所有任务&#x3D;&#x3D;。<ul><li>小弟让大哥先吃完包子自己再吃。</li></ul></li></ul><h3 id="6-用户线程和守护线程"><a href="#6-用户线程和守护线程" class="headerlink" title="6.用户线程和守护线程"></a>6.用户线程和守护线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">线程对象.setDaemon(<span class="literal">true</span>) ---&gt;守护进程。</span><br><span class="line">    setDaemon要在 start 之前设置。</span><br><span class="line">案例</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">package</span> com.threadUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetDamon_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">damon_</span> <span class="variable">damon_</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">damon_</span>();</span><br><span class="line">        damon_.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        damon_.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">4</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不，你是守护进程，你要和我一起走。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">damon_</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我还要继续！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221224234828119.png" alt="image-20221224234828119"></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol><li>当处于 Runnable状态时，并不是一定在进行，而是由 操作系统的线程调度器负责 调配运行。—&gt;由操作系统内核决定。（内核态）</li><li>官方文档为 6 种状态，但一般 又将 runnable 细分为两种转态，即有7 钟转态</li></ol><p>可以使用 jconsole 工具 查看线程</p><p><img src="/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221224191429302.png" alt="image-20221224191429302"></p><p><img src="/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221224191421528.png" alt="image-20221224191421528"></p><h2 id="三、生命周期"><a href="#三、生命周期" class="headerlink" title="三、生命周期"></a>三、生命周期</h2><h3 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1.生命周期"></a>1.生命周期</h3><p><img src="/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221224235800248.png" alt="image-20221224235800248"></p><h3 id="2-线程同步机制"><a href="#2-线程同步机制" class="headerlink" title="2.线程同步机制"></a>2.线程同步机制</h3><p>1）线程同步机制 Synchronizd</p><p>一个敏感数据不允许被多个线程同时访问，此时就使用同步访问技术，保证数据在任何同一时刻，最多有一个线程访问，以保证数据的完整性。</p><p><img src="/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221225153246140.png" alt="image-20221225153246140"></p><h3 id="2-synchronize-使用"><a href="#2-synchronize-使用" class="headerlink" title="2.synchronize 使用"></a>2.synchronize 使用</h3><h2 id="四、锁"><a href="#四、锁" class="headerlink" title="四、锁"></a>四、锁</h2><p><img src="/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221225165651218.png" alt="image-20221225165651218"></p><blockquote><p>这里的同步方法是否是 静态的 非常重要。—Synchronized</p><p>如果是 this  ，则是 当前对象，如果不同对象，不会造成堵塞。</p><p>如果是&#x3D;&#x3D;静态(stastic)&#x3D;&#x3D;， 则是  加在该类的 Class 中(类加载的知识) ，该&#x3D;&#x3D;类的不同对象&#x3D;&#x3D;，会造成&#x3D;&#x3D;堵塞&#x3D;&#x3D;。  </p></blockquote><h3 id="1-注意事项和细节："><a href="#1-注意事项和细节：" class="headerlink" title="1.注意事项和细节："></a>1.<strong>注意事项和细节</strong>：</h3><ul><li><p>1.同步方法如果没有使用 static 修饰，默认锁对象就是 this</p></li><li><p>2.同步方法使用了 static 修饰，默认锁对象：当前类的 Class 对象(通常通过 类名.class获得)</p></li><li><p>3.实现锁的步骤</p><ul><li><p>1.分析需要上锁的代码</p></li><li><p>2.选择&#x3D;&#x3D;同步代码块（优先考虑）&#x3D;&#x3D;或同步代码</p></li><li><p>3.&#x3D;&#x3D;要求多个线程的锁对象为同一个。&#x3D;&#x3D;</p><ul><li>什么意思？<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Thread1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sayhi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">思考：这里的 hi 能锁住吗？</span><br><span class="line">分析：</span><br><span class="line">    <span class="number">1.</span>同步方法没有使用 <span class="keyword">static</span> 修饰，那默认锁对象为 <span class="built_in">this</span>。</span><br><span class="line">    <span class="number">2.</span>而想要调用 sayhi 方法，就要使用 <span class="keyword">new</span> <span class="title class_">Thread1</span>().sayhi</span><br><span class="line">    <span class="number">3.</span>而第<span class="number">2</span>步中每次 调用都 <span class="keyword">new</span> 了一个新对象，即此时如果使用 不同对象的 start 方法进行创建多线程。</span><br><span class="line">    <span class="number">4.</span>那此时，多个线程的锁对象就是他们对应的那个对象----&gt;即不是同一个对象。不同的线程争夺的是不同的锁，那就无法锁住。 </span><br><span class="line">怎么解决？</span><br><span class="line">    <span class="number">1.</span>绑定同一个对象，其他的对象，例如新建一个 object 对象</span><br><span class="line">    <span class="number">2.</span>给方法加上 <span class="keyword">static</span> ，使其绑定类的Class 对象</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="2-线程死锁"><a href="#2-线程死锁" class="headerlink" title="2.线程死锁"></a>2.线程死锁</h3><p>多个线程都占用了对方的锁资源，但不肯相让，导致了死锁。</p><p>一个案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.syn;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">* 模拟线程死锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock_</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//模拟死锁现象</span></span><br><span class="line"><span class="type">DeadLockDemo</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">true</span>);</span><br><span class="line">A.setName(<span class="string">&quot;A 线程&quot;</span>);</span><br><span class="line"><span class="type">DeadLockDemo</span> <span class="variable">B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeadLockDemo</span>(<span class="literal">false</span>);</span><br><span class="line">B.setName(<span class="string">&quot;B 线程&quot;</span>);</span><br><span class="line">A.start();</span><br><span class="line">B.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程</span></span><br><span class="line">韩顺平循序渐进学 Java 零基础</span><br><span class="line">第 <span class="number">810</span>页</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">// 保证多线程，共享一个对象,这里使用 static</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="type">boolean</span> flag;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DeadLockDemo</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line"><span class="built_in">this</span>.flag = flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//下面业务逻辑的分析</span></span><br><span class="line"><span class="comment">//1. 如果 flag 为 T, 线程 A 就会先得到/持有 o1 对象锁, 然后尝试去获取 o2 对象锁</span></span><br><span class="line"><span class="comment">//2. 如果线程 A 得不到 o2 对象锁，就会 Blocked</span></span><br><span class="line"><span class="comment">//3. 如果 flag 为 F, 线程 B 就会先得到/持有 o2 对象锁, 然后尝试去获取 o1 对象锁</span></span><br><span class="line"><span class="comment">//4. 如果线程 B 得不到 o1 对象锁，就会 Blocked</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (o1) &#123;<span class="comment">//对象互斥锁, 下面就是同步代码</span></span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入 1&quot;</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (o2) &#123; <span class="comment">// 这里获得 li 对象的监视权</span></span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入 2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入 3&quot;</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (o1) &#123; <span class="comment">// 这里获得 li 对象的监视权</span></span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入 4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-释放锁"><a href="#3-释放锁" class="headerlink" title="3.释放锁"></a>3.释放锁</h3><p>释放锁的问题。</p><p><img src="/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221225195634274.png" alt="image-20221225195634274"></p><p>下列操作不会释放锁</p><ol><li>sleep、yield<br>太困了，但还在厕所里面。</li><li>线程被挂起.suspend()。<br><img src="/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221225200005591.png" alt="image-20221225200005591"></li></ol><p><img src="/2022/12/24/JAVA/14-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/1-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221225200201260.png" alt="image-20221225200201260"></p><h2 id="六、一些疑问"><a href="#六、一些疑问" class="headerlink" title="六、一些疑问"></a>六、一些疑问</h2><ol><li>为什么调用的是 start 方法，而不是直接调用 run 方法</li></ol><p>A: 直接调用 run 方法，那就是相当于普通的方法调用，只会在主栈中调用，不会创建新线程。而调用 start 方法可以创建新 线程并 会自动调用 run 方法。–&gt;看源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">start0();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//start0() 是本地方法，是 JVM 调用, 底层是 c/c++实现</span></span><br><span class="line"><span class="comment">//真正实现多线程的效果， 是 start0(), 而不是 run</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-Computer System Operation</title>
      <link href="/2022/12/24/Basics_of_OS/OperatingSystem/1-Computer%20System%20Operation/"/>
      <url>/2022/12/24/Basics_of_OS/OperatingSystem/1-Computer%20System%20Operation/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一、-Bus"><a href="#一、-Bus" class="headerlink" title="一、  Bus"></a>一、  Bus</h2><p>![image-20221224143316371](1-Computer System Operation&#x2F;image-20221224143316371.png)</p><blockquote><p>Execute concuurentlyy :并发</p></blockquote><ul><li>Memory Controller :为每个程序分配合适的内容保证他们的正常运行。</li></ul><h3 id="Some-important-Terms"><a href="#Some-important-Terms" class="headerlink" title="Some important Terms"></a>Some important Terms</h3><p>![image-20221224143645797](1-Computer System Operation&#x2F;image-20221224143645797.png)</p><ul><li>load System and load OS kernel into memory</li></ul><h4 id="2-打断"><a href="#2-打断" class="headerlink" title="2)打断"></a>2)打断</h4><ul><li>硬件的打断 —&gt; Interrupt</li><li>软件的打断  —-&gt;System Call (Monitor call)</li></ul><p>Interrupt</p><ul><li>Any time by sending a signal to the Cpu</li></ul><p>What the fixed lOCATION</p><p>![image-20221224144156476](1-Computer System Operation&#x2F;image-20221224144156476.png)</p><h4 id="3-打断后的操作"><a href="#3-打断后的操作" class="headerlink" title="3)打断后的操作"></a>3)打断后的操作</h4><p>![image-20221224161745360](1-Computer System Operation&#x2F;image-20221224161745360.png)</p><p>先执行打断的程序，执行完毕后继续执行之前的内容。</p><h2 id="二、存储结构"><a href="#二、存储结构" class="headerlink" title="二、存储结构"></a>二、存储结构</h2><p>![image-20221224183423143](1-Computer System Operation&#x2F;image-20221224183423143.png)</p><ul><li>寄存器 Registers<ul><li>以 位 的形式存储。最小的设备。</li></ul></li><li>Cache <ul><li>比寄存器大</li></ul></li><li>Main Memory<ul><li>随机存取储存器或 RAM</li></ul></li><li>辅助( secondly Memory )<ul><li>Electronic Disk 电子磁盘</li><li>Magnetic Disk 磁盘</li><li>Optical Disk 光盘</li><li>Magnetic Tapes 磁带</li></ul></li></ul><blockquote><p>Volatile :Loses its contents when power is removed<br>Non Volatile: Retains its contents even when power is removed</p></blockquote><h2 id="三、I-x2F-O-Structure"><a href="#三、I-x2F-O-Structure" class="headerlink" title="三、I&#x2F;O Structure"></a>三、I&#x2F;O Structure</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3-转换流</title>
      <link href="/2022/12/23/JAVA/12-io%E6%B5%81/3-%E8%BD%AC%E6%8D%A2%E6%B5%81/"/>
      <url>/2022/12/23/JAVA/12-io%E6%B5%81/3-%E8%BD%AC%E6%8D%A2%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="/2022/12/23/JAVA/12-io%E6%B5%81/3-%E8%BD%AC%E6%8D%A2%E6%B5%81/image-20221223002648360.png" alt="image-20221223002648360"></p><blockquote><p>InputStreamReader 的构造方法为传入一个 inputStream(字节输入流), 和指定编码(charsetDecoder)</p></blockquote><blockquote><p>Reader的包装类 BufferedReader 的构造器接受对象为 Reader 的子类，inputStreamReader 也属于，可以直接进行包装</p></blockquote><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果有特定编码，不是utf-8，则需要进行转换</span></span><br><span class="line">       BufferedReader bufferedReader=<span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.先创建字节节点流</span></span><br><span class="line">           <span class="comment">//2.将字节流转换为字符流 使用inputStreamReader</span></span><br><span class="line">           <span class="comment">//3.包装</span></span><br><span class="line">           <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e:\\mytemp\\hw2.txt&quot;</span>);</span><br><span class="line">           <span class="type">InputStreamReader</span> <span class="variable">gbk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fileInputStream, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">            bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(gbk);</span><br><span class="line">           String line=<span class="string">&quot;&quot;</span>;</span><br><span class="line">           <span class="type">int</span> cout=<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">while</span> ((line=bufferedReader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;第&quot;</span>+cout+<span class="string">&quot;内容&quot;</span>+line);</span><br><span class="line">               cout++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (bufferedReader!=<span class="literal">null</span>)&#123;</span><br><span class="line">               bufferedReader.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2-处理流</title>
      <link href="/2022/12/18/JAVA/12-io%E6%B5%81/2-%E5%A4%84%E7%90%86%E6%B5%81/"/>
      <url>/2022/12/18/JAVA/12-io%E6%B5%81/2-%E5%A4%84%E7%90%86%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>1.readLine方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Public String <span class="title function_">readLine</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回一行的字符，为空时返回 null</span></span><br></pre></td></tr></table></figure><p>BufferedReader.&#x3D;&#x3D;readLine方法&#x3D;&#x3D;在读取的时候不会读取&#x3D;&#x3D;换行符&#x3D;&#x3D;，所以在进行&#x3D;&#x3D;拷贝文件操作&#x3D;&#x3D;时，需要&#x3D;&#x3D;手动添加换行&#x3D;&#x3D;。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bufferedReader.readLine()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((line=bufferedReader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">  <span class="comment">//读取时不会读取换行符，所以如果想要换行需要进行换行操作</span></span><br><span class="line">    bufferedWriter.write(line);</span><br><span class="line">  =====  bufferedWriter.newLine();=======</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.FileReader 和 File Writer 都只能处理 &#x3D;&#x3D;字符&#x3D;&#x3D;，即文本文件，不能处理二进制文件。</p><p><img src="/2022/12/18/JAVA/12-io%E6%B5%81/2-%E5%A4%84%E7%90%86%E6%B5%81/image-20221218213805681.png" alt="image-20221218213805681"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2-反射的基本使用</title>
      <link href="/2022/12/17/JAVA/13-%E5%8F%8D%E5%B0%84(reflection)/2-%E5%8F%8D%E5%B0%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/12/17/JAVA/13-%E5%8F%8D%E5%B0%84(reflection)/2-%E5%8F%8D%E5%B0%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>反射是一种动态依赖机制，其作为各种 java 框架的核心，在 java 中具有举足轻重的地位。集多身优点的它，也因为动态加载而会损耗一定的性能。</p><h4 id="其基本使用步骤可分为"><a href="#其基本使用步骤可分为" class="headerlink" title="其基本使用步骤可分为"></a>其基本使用步骤可分为</h4><ul><li>1.获取 Class 对象</li><li>1.1使用 Class 对象获取 file(字段) 对象 对字段进行操作</li><li>1.2使用 Class 对象获取 method(方法) 对象 对方法进行调用。</li><li>1.3使用 Class 对象获取 constructor 对象对构造器进行调用。</li></ul><p>下面来详细说每个步骤的使用方法</p><h2 id="一、获取-Class-对象"><a href="#一、获取-Class-对象" class="headerlink" title="一、获取 Class 对象"></a>一、获取 Class 对象</h2><p>从大维度上看，获取 Class 对象是从 4 个基本维度出发。</p><p><img src="/2022/12/17/JAVA/13-%E5%8F%8D%E5%B0%84(reflection)/2-%E5%8F%8D%E5%B0%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221217213408966.png" alt="image-20221217213408966"></p><ol><li>代码阶段<ol><li>&#x3D;&#x3D;Class.forName(“全路径”)&#x3D;&#x3D;</li><li>前提：<ol><li>已知一个类的全类名</li></ol></li><li>类是否会被加载 –&gt;是</li><li>场景<ol><li>配置文件</li></ol></li></ol></li><li>类加载阶段<ol><li>&#x3D;&#x3D;类名.class&#x3D;&#x3D;</li><li>类是否会被加载 –&gt;否</li><li>场景<ol><li>传参</li></ol></li></ol></li><li>运行阶段<ol><li>&#x3D;&#x3D;对象.class&#x3D;&#x3D;</li></ol></li><li>使用加载器<ol><li>对象.getClass.getClassLoader() –》使用类的加载器的load方法进行类的加载</li></ol></li><li>基本数据类型获得 Class<ol><li>基本数据类型.class</li></ol></li><li>基本数据类型的&#x3D;&#x3D;包装类&#x3D;&#x3D;<ol><li>包装类.TYPE</li></ol></li></ol><h2 id="二、常用方法"><a href="#二、常用方法" class="headerlink" title="二、常用方法"></a>二、常用方法</h2><h3 id="1-Class类"><a href="#1-Class类" class="headerlink" title="1.Class类"></a>1.Class类</h3><ul><li>static Class forName(String name) <ul><li>返回指定类名 name 的 Class 对象</li></ul></li><li>Object newInstance<ul><li>调用缺省构造函数，返回该 Class 对象的一个实例</li></ul></li><li>String getName()<ul><li>返回此 Class 对象所表示的实体（类、接口、数组类、基本数据类型等）名称</li></ul></li><li>Class[] getInterfaces() <ul><li>获取此 Class 对象的接口</li></ul></li><li>ClassLoader getClassLoader() <ul><li>获取该类的类构造器</li></ul></li><li>Class getSuperclass()<ul><li>返回表示此 Class 所表示的实体的类的 &#x3D;&#x3D;超类的Class&#x3D;&#x3D;</li></ul></li><li>Constructor[] getConstructors()<ul><li>返回一个包含本类构造器的数组</li></ul></li><li>Field[] getDeclaredFields()<ul><li>返回 Field 对象的一个数组</li></ul></li><li>Method getMethod(String name, Class… paramTypes)<ul><li>返回一个 Method 对象， name为方法名，方法的形参类型的 Class 对像</li></ul></li></ul><h3 id="2-Method"><a href="#2-Method" class="headerlink" title="2.Method"></a>2.Method</h3><p><img src="/2022/12/17/JAVA/13-%E5%8F%8D%E5%B0%84(reflection)/2-%E5%8F%8D%E5%B0%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20221217221047646.png" alt="image-20221217221047646"></p><h2 id="额外的补充"><a href="#额外的补充" class="headerlink" title="额外的补充"></a>额外的补充</h2><ol><li><p>类名.class 获取 Class 对象时，该类是否加载的问题。</p><p>使用 &#x3D;&#x3D;类名.class获取 Class&#x3D;&#x3D;不会使 该类被加载，jvm 只会对其进行校验。只有在代码中真正用到了类。比如通过反设调用方法或创建对象，那么在这种情况下该类就会被加载。<br>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  System.out.println(nte.class);</span><br><span class="line"><span class="comment">//        System.out.println(nte.age);</span></span><br><span class="line">  Class&lt;nte&gt; nteClass = nte.class;</span><br><span class="line">     <span class="type">Method</span> <span class="variable">hi</span> <span class="operator">=</span> nteClass.getMethod(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    hi.invoke(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">nte</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> age=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Helloworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">com</span>.reflection.homework.nte</span><br><span class="line">Helloworld</span><br><span class="line">hi</span><br><span class="line">    第一个nte.class 输出后，静态方法块中的打印才输出，说明 使用 类名.class 时类并不会被加载。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-类加载过程</title>
      <link href="/2022/12/16/JAVA/13-%E5%8F%8D%E5%B0%84(reflection)/1-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/12/16/JAVA/13-%E5%8F%8D%E5%B0%84(reflection)/1-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一、简要"><a href="#一、简要" class="headerlink" title="一、简要"></a>一、简要</h2><p>类加载的三个加载</p><p><img src="/2022/12/16/JAVA/13-%E5%8F%8D%E5%B0%84(reflection)/1-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/image-20221216192817787.png" alt="image-20221216192817787"></p><p>1.前者两个是 jvm 进行操作</p><p>2.第三个初始化 时程序员进行的   —-&gt; 静态成员的初始化&#x3D;&#x3D;</p><h2 id="二、逐步分析"><a href="#二、逐步分析" class="headerlink" title="二、逐步分析"></a>二、逐步分析</h2><h3 id="1-加载阶段"><a href="#1-加载阶段" class="headerlink" title="1.加载阶段"></a>1.加载阶段</h3><p><img src="/2022/12/16/JAVA/13-%E5%8F%8D%E5%B0%84(reflection)/1-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/image-20221216193202358.png" alt="image-20221216193202358"></p><blockquote><p>二进制字节流加载到内存：即在方法区中放入类的字节码二进制数据。并同时在堆区中创建类的 Class 对象</p></blockquote><h3 id="2-连接-Linking-阶段"><a href="#2-连接-Linking-阶段" class="headerlink" title="2.连接 Linking 阶段"></a>2.连接 Linking 阶段</h3><h4 id="1-验证"><a href="#1-验证" class="headerlink" title="1)验证"></a>1)验证</h4><blockquote><p>可以通过设置 -Xverify:none 参数来关闭大部分的类验证措施，从而缩短虚拟机类加载的时间。</p></blockquote><p><img src="/2022/12/16/JAVA/13-%E5%8F%8D%E5%B0%84(reflection)/1-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/image-20221216193630683.png" alt="image-20221216193630683"></p><h4 id="2-准备"><a href="#2-准备" class="headerlink" title="2)准备"></a>2)准备</h4><p>对&#x3D;&#x3D;静态变量&#x3D;&#x3D;进行默认初始化—&gt;</p><p><img src="/2022/12/16/JAVA/13-%E5%8F%8D%E5%B0%84(reflection)/1-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/image-20221216193829627.png" alt="image-20221216193829627"></p><p>看案例理解准备阶段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoad02</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="comment">//属性-成员变量-字段</span></span><br><span class="line"><span class="comment">//老韩分析类加载的链接阶段-准备 属性是如何处理</span></span><br><span class="line"><span class="comment">//1. n1 是实例属性, 不是静态变量，因此在准备阶段，是不会分配内存</span></span><br><span class="line"><span class="comment">//2. n2 是静态变量，分配内存 n2 是默认初始化 0 ,而不是 20</span></span><br><span class="line"><span class="comment">//3. n3 是 static final 是常量, 他和静态变量不一样, 因为一旦赋值就不变 n3 = 30</span></span><br><span class="line">    <span class="comment">//1.n1 是实例属性，不是静态变量，因此在准备阶段，是不会分配内存。</span></span><br><span class="line">    <span class="comment">//为什么说是实例属性，只有当创建了类的对象实例时，这个属性才能使用，而静态变量可以通过</span></span><br><span class="line">    <span class="comment">// 类名.name</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//2. n2 是静态变量，在准备阶段时会默认初始化为0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//3. n3 是 static final ，他和静态变量不同，因为一旦赋值就不变， n3=30</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-解析"><a href="#3-解析" class="headerlink" title="3)解析"></a>3)解析</h4><p>将符号引用替换为直接引用。</p><p><img src="/2022/12/16/JAVA/13-%E5%8F%8D%E5%B0%84(reflection)/1-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/image-20221216195303552.png" alt="image-20221216195303552"></p><h3 id="3-Initialization（初始化）"><a href="#3-Initialization（初始化）" class="headerlink" title="3.Initialization（初始化）"></a>3.Initialization（初始化）</h3><p><img src="/2022/12/16/JAVA/13-%E5%8F%8D%E5%B0%84(reflection)/1-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/image-20221216200921481.png" alt="image-20221216200921481"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoad03</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"><span class="comment">//老韩分析</span></span><br><span class="line"><span class="comment">//1. 加载 B 类，并生成 B 的 class 对象</span></span><br><span class="line"><span class="comment">//2. 链接 num = 0</span></span><br><span class="line"><span class="comment">//3. 初始化阶段</span></span><br><span class="line"><span class="comment">// 依次自动收集类中的所有静态变量的赋值动作和静态代码块中的语句,并合并</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">clinit() &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;B 静态代码块被执行&quot;);</span></span><br><span class="line"><span class="comment">//num = 300;</span></span><br><span class="line"><span class="comment">num = 100;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">合并: num = 100</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//new B();//类加载</span></span><br><span class="line"><span class="comment">//System.out.println(B.num);//100, 如果直接使用类的静态属性，也会导致类的加载</span></span><br><span class="line"><span class="comment">//看看加载类的时候，是有同步机制控制</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">protected Class&lt;?&gt; loadClass(String name, boolean resolve)</span></span><br><span class="line"><span class="comment">韩顺平循序渐进学 Java 零基础</span></span><br><span class="line"><span class="comment">第 938页</span></span><br><span class="line"><span class="comment">throws ClassNotFoundException</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">//正因为有这个机制，才能保证某个类在内存中, 只有一份 Class 对象</span></span><br><span class="line"><span class="comment">synchronized (getClassLoadingLock(name)) &#123;</span></span><br><span class="line"><span class="comment">//.... &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B 静态代码块被执行&quot;</span>);</span><br><span class="line">num = <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">System.out.println(<span class="string">&quot;B() 构造器被执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-Windoes</title>
      <link href="/2022/12/16/Windows/1-%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/12/16/Windows/1-%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-步骤记录器"><a href="#1-步骤记录器" class="headerlink" title="1. 步骤记录器"></a>1. 步骤记录器</h2><ol><li>前言</li></ol><p>​我们可能经常需要给别人演示操作步骤，写文档的方式可能不够优雅。这时候我们可以使用 Windows 自带的&#x3D;&#x3D;步骤记录器&#x3D;&#x3D;</p><blockquote><p>psr.exe</p></blockquote><ol start="2"><li>使用步骤</li></ol><p>a. Win+R 同时按下调出 运行窗口</p><p>b. 输入 <strong>psr.exe</strong></p><p>c .点击开始记录然后开始相关的操作即可。</p><p>d. 操作结束后点击停止即可自动生成文档。</p>]]></content>
      
      
      <categories>
          
          <category> Windows使用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-查找论文</title>
      <link href="/2022/12/14/%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3/1-%E6%9F%A5%E6%89%BE%E8%AE%BA%E6%96%87/"/>
      <url>/2022/12/14/%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3/1-%E6%9F%A5%E6%89%BE%E8%AE%BA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="免费查找一些论文"><a href="#免费查找一些论文" class="headerlink" title="免费查找一些论文"></a>免费查找一些论文</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在学校或者使用  webvpn 可以解决我们查文献的问题，但是有很多资料是学校没有购买的，我们查找文献的时候就非常麻烦，现在众所周知的就是 [sci-hub](<a href="https://tool.yovisun.com/scihub/">SCI-Hub论文下载可用网址链接（实时更新） - YoviSun工具集</a>)  它可以通过  DOI 、PubMed 、数据库链接进行论文下载，但一部分资源及其网络的原因国内无法正常访问，这里介绍一个新的工具</p><p><a href="http://www.chinadoi.cn/portal/index.htm">中文DOI (chinadoi.cn)</a></p><h2 id="二、操作流程"><a href="#二、操作流程" class="headerlink" title="二、操作流程"></a>二、操作流程</h2><p>1.打开网页，在查找 DOI 中输入文章标题。<img src="/2022/12/14/%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3/1-%E6%9F%A5%E6%89%BE%E8%AE%BA%E6%96%87/image-20221214205052879.png" alt="image-20221214205052879"></p><p>2.在搜索结果中复制 DOI。例如我这里</p><blockquote><p>可能个别文章的 DOi 并不正确，不行的话多试几次即可。</p></blockquote><p><img src="/2022/12/14/%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3/1-%E6%9F%A5%E6%89%BE%E8%AE%BA%E6%96%87/image-20221214205225686.png" alt="image-20221214205225686"></p><blockquote><p>将 doi：xxxxx 复制。</p><p>&#x3D;&#x3D;前缀“doi”也要一起复制！！！！&#x3D;&#x3D;&#x3D;&#x3D;</p></blockquote><p>3.使用 DOI 进行文献搜索</p><p>将你搜到的 DOI 填入 &#x3D;&#x3D;DOI解析&#x3D;&#x3D;中，进行解析即可。</p><p><img src="/2022/12/14/%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3/1-%E6%9F%A5%E6%89%BE%E8%AE%BA%E6%96%87/image-20221214205401868.png" alt="image-20221214205401868"></p><p>4.恭喜你成功了</p><h2 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h2><p>首选：ChinaDOI网站（<a href="http://www.chinadoi.cn/portal/index.htm%EF%BC%89%EF%BC%8C%E8%BF%99%E6%98%AF%E4%BA%9A%E6%B4%B2%E5%94%AF%E4%B8%80%E7%9A%84DOI%E6%B3%A8%E5%86%8C%E6%9C%BA%E6%9E%84%E7%BD%91%E7%AB%99%EF%BC%8C%E4%B8%AD%E6%96%87%E8%AE%BA%E6%96%87%E9%83%BD%E7%BB%8F%E6%AD%A4%E6%B3%A8%E5%86%8C%E3%80%82">http://www.chinadoi.cn/portal/index.htm），这是亚洲唯一的DOI注册机构网站，中文论文都经此注册。</a> 另外，也可到万方数据知识服务平台 （<a href="http://www.wanfangdata.com.cn)查询,chinadoi的doi数据与万方数据知识服务平台同步,在这里查询也一样./">http://www.wanfangdata.com.cn）查询，ChinaDOI的DOI数据与万方数据知识服务平台同步，在这里查询也一样。</a> </p><p>英文论文：<br>首选：CrossRef（<a href="http://www.crossref.org),这是全球最大的doi注册机构/">http://www.crossref.org），这是全球最大的DOI注册机构</a>; 如果在CrossRef找不到，考虑其他注册机构网站，详见<a href="http://www.doi.org/registration_agencies.html%E3%80%82">http://www.doi.org/registration_agencies.html。</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/07/JAVA/Untitled/"/>
      <url>/2022/12/07/JAVA/Untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-文件操作入门</title>
      <link href="/2022/11/28/JAVA/12-io%E6%B5%81/1-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/28/JAVA/12-io%E6%B5%81/1-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>—————————————————！！！注意！！！——————————————————————————————–</p><blockquote><p>无论使用什么文件流，最后一定要记得 close 或者 flush</p></blockquote><p>—————————&#x3D;&#x3D;否则不会保存！！！！！！！！&#x3D;&#x3D;———————————————————————————————–</p><h3 id="一、文件操作"><a href="#一、文件操作" class="headerlink" title="一、文件操作"></a>一、文件操作</h3><p><img src="/2022/11/28/JAVA/12-io%E6%B5%81/1-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%85%A5%E9%97%A8/image-20221128191853345.png" alt="image-20221128191853345"></p><p>流？</p><p>—&gt;数据从硬盘通过内存流到java程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">File file = new File(filePath);</span><br><span class="line">file.createNewFile();</span><br><span class="line">//为什么需要第一部已经创建了对象，还要调用第二个方法</span><br><span class="line">因为第一个创建的文件对象 ---&gt;存在于内存中</span><br><span class="line">----&gt;调用第二个将其写进 硬盘</span><br></pre></td></tr></table></figure><p><img src="/2022/11/28/JAVA/12-io%E6%B5%81/1-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%85%A5%E9%97%A8/image-20221128193428179.png" alt="image-20221128193428179"></p><h3 id="二、创建文件"><a href="#二、创建文件" class="headerlink" title="二、创建文件"></a>二、创建文件</h3><p><img src="/2022/11/28/JAVA/12-io%E6%B5%81/1-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%85%A5%E9%97%A8/image-20221128195320327.png" alt="image-20221128195320327"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式 1 new File(String pathname)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create01</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;e:\\news1.txt&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">file.createNewFile();</span><br><span class="line">System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式 2 new File(File parent,String child) //根据父目录文件+子路径构建</span></span><br><span class="line"><span class="comment">//e:\\news2.txt</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create02</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">parentFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:\\&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news2.txt&quot;</span>;</span><br><span class="line"><span class="comment">//这里的 file 对象，在 java 程序中，只是一个对象</span></span><br><span class="line"><span class="comment">//只有执行了 createNewFile 方法，才会真正的，在磁盘创建该文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentFile, fileName);</span><br><span class="line">韩顺平循序渐进学 Java 零基础</span><br><span class="line">第 <span class="number">819</span>页</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">file.createNewFile();</span><br><span class="line">System.out.println(<span class="string">&quot;创建成功~&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式 3 new File(String parent,String child) //根据父目录+子路径构建</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create03</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//String parentPath = &quot;e:\\&quot;;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">parentPath</span> <span class="operator">=</span> <span class="string">&quot;e:\\&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;news4.txt&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parentPath, fileName);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">file.createNewFile();</span><br><span class="line">System.out.println(<span class="string">&quot;创建成功~&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JUnit单元测试框架</title>
      <link href="/2022/11/28/JAVA/0-Java%E7%BB%86%E8%8A%82/JUnit/"/>
      <url>/2022/11/28/JAVA/0-Java%E7%BB%86%E8%8A%82/JUnit/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/11/28/JAVA/0-Java%E7%BB%86%E8%8A%82/JUnit/image-20221128161233011.png" alt="image-20221128161233011"></p><h3 id="二、注意"><a href="#二、注意" class="headerlink" title="二、注意"></a>二、注意</h3><ol><li><p>Junit 最好运用在 Maven 的 Test 中</p></li><li><p>该包名下不能有名为 test 的包或 类。</p></li><li><p>期望值与实际值的使用</p><ol><li>int expected&#x3D;xxx; int acutal&#x3D;业务代码。</li><li>使用 Assert 工具类的 assertEquals(expected,actual) 方法进行判断</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-泛型入门</title>
      <link href="/2022/11/28/JAVA/10-%E6%B3%9B%E5%9E%8B/1-%E6%B3%9B%E5%9E%8B%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/28/JAVA/10-%E6%B3%9B%E5%9E%8B/1-%E6%B3%9B%E5%9E%8B%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一、泛型"><a href="#一、泛型" class="headerlink" title="一、泛型"></a>一、泛型</h2><p>what？</p><p>泛型是  ——–&gt; 可以 接受 数据类型 的一种 数据类型 。</p><p>why?</p><p><img src="/2022/11/28/JAVA/10-%E6%B3%9B%E5%9E%8B/1-%E6%B3%9B%E5%9E%8B%E5%85%A5%E9%97%A8/image-20221128162337746.png" alt="image-20221128162337746"></p><p>how?</p><h3 id="1-类的自定义泛型"><a href="#1-类的自定义泛型" class="headerlink" title="1.类的自定义泛型"></a>1.类的自定义泛型</h3><p><img src="/2022/11/28/JAVA/10-%E6%B3%9B%E5%9E%8B/1-%E6%B3%9B%E5%9E%8B%E5%85%A5%E9%97%A8/image-20221128143251963.png" alt="image-20221128143251963"></p><h3 id="2-接口的自定义类型"><a href="#2-接口的自定义类型" class="headerlink" title="2.接口的自定义类型"></a>2.接口的自定义类型</h3><p><img src="/2022/11/28/JAVA/10-%E6%B3%9B%E5%9E%8B/1-%E6%B3%9B%E5%9E%8B%E5%85%A5%E9%97%A8/image-20221128151020067.png" alt="image-20221128151020067"></p><blockquote><p>接口中有泛型时，</p><p>最好不要 class xxx implements Iusb{</p><p>}</p><p>这样写</p><p>而是</p><p>class xxx implements Iusb &lt;Object,Object &gt;{</p><p>}</p></blockquote><h2 id="二、注意的点"><a href="#二、注意的点" class="headerlink" title="二、注意的点"></a>二、注意的点</h2><ol><li>泛型 只能是 &#x3D;&#x3D;引用类型&#x3D;&#x3D;。 —<E></E></li><li>不指定类型 ，默认类型 为 &#x3D;&#x3D;object&#x3D;&#x3D;</li><li>使用泛型的数组不能初始化。<br>因为 new 的时候会为 数组分配内存空间，而 此刻不能确定其类型，就无法开空间。</li><li>静态成员(属性、方法、方法快)都不能使用 泛型，因为泛型只有在类被创建实例时才被指定 类型 ，而 静态成员在 &#x3D;&#x3D;类加载&#x3D;&#x3D;时，就被初始化。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.customgeneric;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomGeneric_</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//T=Double, R=String, M=Integer</span></span><br><span class="line">Tiger&lt;Double,String,Integer&gt; g = <span class="keyword">new</span> <span class="title class_">Tiger</span>&lt;&gt;(<span class="string">&quot;john&quot;</span>);</span><br><span class="line">g.setT(<span class="number">10.9</span>); <span class="comment">//OK</span></span><br><span class="line"><span class="comment">//g.setT(&quot;yy&quot;); //错误，类型不对</span></span><br><span class="line">System.out.println(g);</span><br><span class="line"><span class="type">Tiger</span> <span class="variable">g2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tiger</span>(<span class="string">&quot;john~~&quot;</span>);<span class="comment">//OK T=Object R=Object M=Object</span></span><br><span class="line">g2.setT(<span class="string">&quot;yy&quot;</span>); <span class="comment">//OK ,因为 T=Object &quot;yy&quot;=String 是 Object 子类</span></span><br><span class="line">System.out.println(<span class="string">&quot;g2=&quot;</span> + g2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1. Tiger 后面泛型，所以我们把 Tiger 就称为自定义泛型类</span></span><br><span class="line"><span class="comment">//2, T, R, M 泛型的标识符, 一般是单个大写字母</span></span><br><span class="line"><span class="comment">//3. 泛型标识符可以有多个. //4. 普通成员可以使用泛型 (属性、方法)</span></span><br><span class="line"><span class="comment">//5. 使用泛型的数组，不能初始化</span></span><br><span class="line"><span class="comment">//6. 静态方法中不能使用类的泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>&lt;T, R, M&gt; &#123;</span><br><span class="line">String name;</span><br><span class="line">R r; <span class="comment">//属性使用到泛型</span></span><br><span class="line">M m;</span><br><span class="line">T t;</span><br><span class="line"><span class="comment">//因为数组在 new 不能确定 T 的类型，就无法在内存开空间</span></span><br><span class="line">T[] ts;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Tiger</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Tiger</span><span class="params">(R r, M m, T t)</span> &#123;<span class="comment">//构造器使用泛型</span></span><br><span class="line"><span class="built_in">this</span>.r = r;</span><br><span class="line"><span class="built_in">this</span>.m = m;</span><br><span class="line"><span class="built_in">this</span>.t = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Tiger</span><span class="params">(String name, R r, M m, T t)</span> &#123;<span class="comment">//构造器使用泛型</span></span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.r = r;</span><br><span class="line"><span class="built_in">this</span>.m = m;</span><br><span class="line"><span class="built_in">this</span>.t = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为静态是和类相关的，在类加载时，对象还没有创建</span></span><br><span class="line"><span class="comment">//所以，如果静态方法和静态属性使用了泛型，JVM 就无法完成初始化</span></span><br><span class="line"><span class="comment">// static R r2;</span></span><br><span class="line"><span class="comment">// public static void m1(M m) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//方法使用泛型</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getR</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setR</span><span class="params">(R r)</span> &#123;<span class="comment">//方法使用到泛型</span></span><br><span class="line"><span class="built_in">this</span>.r = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> M <span class="title function_">getM</span><span class="params">()</span> &#123;<span class="comment">//返回类型可以使用泛型. return m;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setM</span><span class="params">(M m)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.m = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getT</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setT</span><span class="params">(T t)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.t = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Tiger&#123;&quot;</span> +</span><br><span class="line"><span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"><span class="string">&quot;, r=&quot;</span> + r +</span><br><span class="line"><span class="string">&quot;, m=&quot;</span> + m +</span><br><span class="line"><span class="string">&quot;, t=&quot;</span> + t +</span><br><span class="line"><span class="string">&quot;, ts=&quot;</span> + Arrays.toString(ts) +</span><br><span class="line"><span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2. </p><h2 id="x3D-三、通配符与继承"><a href="#x3D-三、通配符与继承" class="headerlink" title="&#x3D;# 三、通配符与继承"></a>&#x3D;# 三、通配符与继承</h2><p><img src="/2022/11/28/JAVA/10-%E6%B3%9B%E5%9E%8B/1-%E6%B3%9B%E5%9E%8B%E5%85%A5%E9%97%A8/image-20221128162641294.png" alt="image-20221128162641294"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericExtends</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line"><span class="comment">//泛型没有继承性</span></span><br><span class="line"><span class="comment">//List&lt;Object&gt; list = new ArrayList&lt;String&gt;();</span></span><br><span class="line"><span class="comment">//举例说明下面三个方法的使用</span></span><br><span class="line">List&lt;Object&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;AA&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;BB&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;CC&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//如果是 List&lt;?&gt; c ，可以接受任意的泛型类型</span></span><br><span class="line">printCollection1(list1);</span><br><span class="line">printCollection1(list2);</span><br><span class="line">韩顺平循序渐进学 Java 零基础</span><br><span class="line">第 <span class="number">737</span>页</span><br><span class="line">printCollection1(list3);</span><br><span class="line">printCollection1(list4);</span><br><span class="line">printCollection1(list5);</span><br><span class="line"><span class="comment">//List&lt;? extends AA&gt; c： 表示 上限，可以接受 AA 或者 AA 子类</span></span><br><span class="line"><span class="comment">// printCollection2(list1);//×</span></span><br><span class="line"><span class="comment">// printCollection2(list2);//×</span></span><br><span class="line">printCollection2(list3);<span class="comment">//√</span></span><br><span class="line">printCollection2(list4);<span class="comment">//√</span></span><br><span class="line">printCollection2(list5);<span class="comment">//√</span></span><br><span class="line"><span class="comment">//List&lt;? super AA&gt; c: 支持 AA 类以及 AA 类的父类，不限于直接父类</span></span><br><span class="line">printCollection3(list1);<span class="comment">//√</span></span><br><span class="line"><span class="comment">//printCollection3(list2);//×</span></span><br><span class="line">printCollection3(list3);<span class="comment">//√</span></span><br><span class="line"><span class="comment">//printCollection3(list4);//×</span></span><br><span class="line"><span class="comment">//printCollection3(list5);//×</span></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">韩顺平循序渐进学 Java 零基础</span><br><span class="line">第 <span class="number">738</span>页</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ? extends AA 表示 上限，可以接受 AA 或者 AA 子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection2</span><span class="params">(List&lt;? extends AA&gt; c)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Object object : c) &#123;</span><br><span class="line">System.out.println(object);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//说明: List&lt;?&gt; 表示 任意的泛型类型都可以接受</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection1</span><span class="params">(List&lt;?&gt; c)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Object object : c) &#123; <span class="comment">// 通配符，取出时，就是 Object</span></span><br><span class="line">System.out.println(object);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ? super 子类类名 AA:支持 AA 类以及 AA 类的父类，不限于直接父类，</span></span><br><span class="line"><span class="comment">//规定了泛型的下限</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCollection3</span><span class="params">(List&lt;? <span class="built_in">super</span> AA&gt; c)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Object object : c) &#123;</span><br><span class="line">System.out.println(object);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">韩顺平循序渐进学 Java 零基础</span><br><span class="line">第 <span class="number">739</span>页</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BB</span> <span class="keyword">extends</span> <span class="title class_">AA</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CC</span> <span class="keyword">extends</span> <span class="title class_">BB</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/27/JavaWeb/Servlet-JSP-%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/27/JavaWeb/Servlet-JSP-%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="关于直播"><a href="#关于直播" class="headerlink" title="关于直播"></a>关于直播</h1><ol><li>直播什么内容？<ul><li>从JavaWEB开始。（Servlet为核心，从Servlet开始学习。）</li><li>JSP（JSP使用较少了，但是还有用，所以时间上少一些。快速地学习一下JSP。）</li><li>AJAX（异步通信技术。）</li><li>jQuery（JavaScript库。）</li><li>MyBatis</li><li>Spring</li><li>SpringMVC</li><li>SpringBoot</li><li>SpringCloud</li><li>….</li></ul></li></ol><h1 id="需要提前准备了哪些技术，接下来的课才能听懂？"><a href="#需要提前准备了哪些技术，接下来的课才能听懂？" class="headerlink" title="需要提前准备了哪些技术，接下来的课才能听懂？"></a>需要提前准备了哪些技术，接下来的课才能听懂？</h1><ul><li>JavaSE（Java语言的标准版，Java提供的最基本的类库）<ul><li>Java的开发环境搭建</li><li>Java的基础语法</li><li>Java的面向对象</li><li>数组</li><li>常用类</li><li>异常</li><li>集合</li><li>多线程</li><li>IO流</li><li>反射机制</li><li>注解Annotation</li><li>…..</li></ul></li><li>MySQL（数据库）<ul><li>最基本的要求是：能够编写增删改查等简单的SQL语句即可。</li></ul></li><li>JDBC（Java语言链接数据库）<ul><li>这是一套Java语言链接数据库的接口。</li></ul></li><li>WEB前端（会一些）<ul><li>HTML（网页）</li><li>CSS（层叠样式表语言，修饰HTML）</li><li>JavaScript（一种脚本语言，运行在浏览器当中，让浏览器中的元素可以增删改。让网页产生更强的交互效果）</li></ul></li><li>WEB后端<ul><li>Servlet（Server Applet：服务器端的Java小程序）</li><li>JSP</li><li>AJAX</li><li>jQuery</li><li>MyBatis</li><li>Spring</li><li>SpringMVC</li><li>SpringBoot</li><li>SpringCloud</li><li>……</li></ul></li></ul><h1 id="Typora软件介绍"><a href="#Typora软件介绍" class="headerlink" title="Typora软件介绍"></a>Typora软件介绍</h1><ul><li><p>Markdown文本编辑器（可以编辑xxx.md文件）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Test code!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="关于系统架构"><a href="#关于系统架构" class="headerlink" title="关于系统架构"></a>关于系统架构</h2><ol><li>系统架构包括什么形式？<ul><li>C&#x2F;S架构</li><li>B&#x2F;S架构</li></ul></li><li>C&#x2F;S架构？<ul><li>Client &#x2F; Server（客户端 &#x2F; 服务器）</li><li>C&#x2F;S架构的软件或者说系统有哪些呢？<ul><li>QQ（先去腾讯官网下载一个QQ软件，几十MB，然后把这个客户端软件安装上去，然后输入QQ号以及密码，登录之后，就可以和你的朋友聊天了，就可以使用这个软件了。）</li></ul></li><li>C&#x2F;S架构的特点：需要安装特定的客户端软件。</li><li>C&#x2F;S架构的系统优点和缺点分别是什么？<ul><li>优点：<ul><li>速度快（软件中的数据大部分都是集成到客户端软件当中的，很少量的数据从服务器端传送过来，所以C&#x2F;S结构的系统速度快）</li><li>体验好（速度又快，界面又酷炫，当然体验好了。）</li><li>界面酷炫（专门的语言去实现界面的，更加灵活。）</li><li>服务器压力小（因为大量的数据都是集成在客户端软件当中，所以服务器只需要传送很少的数据量，当然服务器压力小。）</li><li>安全（因为大量的数据是集成在客户端软件当中的，并且客户端有很多个，服务器虽然只有一个，就算服务器那边地震了，火灾了，服务器受损了，问题也不大，因为大量的数据在多个客户端上有缓存，有存储，所以从这个方面来说，C&#x2F;S结构的系统比较安全。）</li><li>…..</li></ul></li><li>缺点：<ul><li>升级维护比较差劲。（升级维护比较麻烦。成本比较高。每一个客户端软件都需要升级。有一些软件不是那么容易安装的。）</li></ul></li></ul></li></ul></li><li>B&#x2F;S架构？<ul><li>B&#x2F;S（Browser &#x2F; Server，浏览器 &#x2F; 服务器）</li><li><a href="http://www.baidu.com/">http://www.baidu.com</a></li><li><a href="http://www.jd.com/">http://www.jd.com</a></li><li><a href="http://www.126.com/">http://www.126.com</a></li><li>B&#x2F;S结构的系统是不是一个特殊的C&#x2F;S系统？<ul><li>实际上B&#x2F;S结构的系统还是一个C&#x2F;S，只不过这个C比较特殊，这个Client是一个固定不变浏览器软件。</li></ul></li><li>B&#x2F;S结构的系统优点和缺点是：<ul><li>优点：<ul><li>升级维护方便，成本比较低。（只需要升级服务器端即可。）</li><li>不需要安装特定的客户端软件，用户操作极其方便。只需要打开浏览器，输入网址即可。</li></ul></li><li>缺点：<ul><li>速度慢（不是因为带宽低的问题，是因为所有的数据都是在服务器上，用户发送的每一个请求都是需要服务器全身心的响应数据，所以B&#x2F;S结构的系统在网络中传送的数据量比较大。）</li><li>体验差（界面不是那么酷炫，因为浏览器只支持三个语言HTML CSS JavaScript。在加上速度慢。）</li><li>不安全（所有的数据都在服务器上，只要服务器发生火灾，地震等不可抗力，最终数据全部丢失。）</li><li>….</li></ul></li></ul></li></ul></li><li>C&#x2F;S和B&#x2F;S结构的系统，哪个好，哪个不好？<ul><li>这个问题问的没有水平。并不是哪个好，哪个不好。不同结构的系统在不同的业务场景下有不同的适用场景。</li><li>娱乐性软件建议使用？<ul><li>C&#x2F;S 结构</li></ul></li><li>公司内部使用的一些业务软件建议使用？<ul><li>公司内部使用的系统，需要维护成本低。</li><li>公司内部使用的系统，不需要很酷炫。</li><li>公司内部使用的企业级系统主要是能够进行数据的维护即可。</li><li>B&#x2F;S 结构。</li></ul></li></ul></li><li>注意了：开发B&#x2F;S结构的系统，其实就是开发网站，其实就是开发一个WEB系统。<ul><li>开发一个WEB系统你需要会哪些技术？<ul><li>WEB前端（运行在浏览器上的程序。）<ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul></li><li>WEB后端（WEB服务器端的程序。）<ul><li>Java可以（Java做WEB开发我们称为JavaWEB开发。JavaWEB开发最核心的规范：Servlet【Server Applet服务器端的Java小程序。】）</li><li>C语言也可以</li><li>C++也可以</li><li>Python也行</li><li>PHP也可以</li><li>….</li></ul></li></ul></li></ul></li><li>JavaEE是什么？<ul><li>Java包括三大块：<ul><li>JavaSE<ul><li>Java标准版（一套类库：别人写好的一套类库，只不过这个类库是标准类库，走EE，或者走ME，这个SE一定是基础，先学。）</li></ul></li><li>JavaEE（WEB方向，WEB系统。）<ul><li>Java企业版（也是一套类库：也是别人写好的一套类库，只不过这套类库可以帮助我们完成企业级项目的开发，专门为企业内部提供解决方案的一套（多套）类库。）</li><li>别人写好的，你用就行了，用它可以开发企业级项目。</li><li>可以开发web系统。</li><li>Java比较火爆的就是这个JavaEE方向。</li></ul></li><li>JavaME<ul><li>Java微型版（还是一套类库，只不过这套类库帮助我们进行电子微型设备内核程序的开发）</li><li>机顶盒内核程序，吸尘器内核程序，电冰箱内核程序，电饭煲内核程序。。。。。</li></ul></li></ul></li><li>JavaEE实际上包括很多种规范，13种规范，其中Servlet就是JavaEE规范之一。学Servlet还是Java语言。</li></ul></li></ol><h2 id="B-x2F-S结构的系统通信原理（没有涉及到Java小程序）"><a href="#B-x2F-S结构的系统通信原理（没有涉及到Java小程序）" class="headerlink" title="B&#x2F;S结构的系统通信原理（没有涉及到Java小程序）"></a>B&#x2F;S结构的系统通信原理（没有涉及到Java小程序）</h2><ul><li>WEB系统的访问过程<ul><li>第一步：打开浏览器</li><li>第二步：找到地址栏</li><li>第三步：输入一个合法的网址</li><li>第四步：回车</li><li>第五步：在浏览器上会展示响应的结果。</li></ul></li><li>关于域名：<ul><li><a href="https://www.baidu.com/">https://www.baidu.com/</a> （网址）</li><li><a href="http://www.baidu.com/">www.baidu.com</a> 是一个域名</li><li>在浏览器地址栏上输入域名，回车之后，域名解析器会将域名解析出来一个具体的IP地址和端口号等。</li><li>解析结果也许是：<a href="http://110.242.68.3/index.html">http://110.242.68.3:80/index.html</a></li></ul></li><li>IP地址是啥？<ul><li>计算机在网络当中的一个身份证号。在同一个网络当中，IP地址是唯一的。</li><li>A计算机要想和B计算机通信，首先你需要知道B计算机的IP地址，有了IP地址才能建立连接。</li></ul></li><li>端口号是啥？<ul><li>一个端口代表一个软件（一个端口代表一个应用，一个端口仅代表一个服务）。</li><li>一个计算机当中有很多软件，每一个软件启动之后都有一个端口号。</li><li>在同一个计算机上，端口号具有唯一性。</li></ul></li><li>一个WEB系统的通信原理？通信步骤：<ul><li>第一步：用户输入网址（URL）</li><li>第二步：域名解析器进行域名解析：<a href="http://110.242.68.3/index.html">http://110.242.68.3:80/index.html</a></li><li>第三步：浏览器软件在网络中搜索110.242.68.3这一台主机，直到找到这台主机。</li><li>第四步：定位110.242.68.3这台主机上的服务器软件，因为是80端口，可以很轻松的定位到80端口对应的服务器软件。</li><li>第五步：80端口对应的服务器软件得知浏览器想要的资源名是：index.html</li><li>第六步：服务器软件找到index.html文件，并且将index.html文件中的内容直接输出响应到浏览器上。</li><li>第七步：浏览器接收到来自服务器的代码（HTML CSS JS）</li><li>第八步：浏览器渲染，执行HTML CSS JS代码，展示效果。</li></ul></li><li>什么是URL？<ul><li>统一资源定位符（<a href="http://www.baidu.com)/">http://www.baidu.com）</a></li></ul></li><li>什么是请求，什么是响应？<ul><li>请求和响应实际上说的是数据的流向不同。</li><li>从Browser端发送数据到Server端，我们称为请求。英语单词：request</li><li>从Server端向浏览器Browser端发送数据，我们称为响应。英语单词：response</li><li>B –&gt; S （请求request）</li><li>S –&gt; B （响应response）</li></ul></li></ul><h2 id="关于WEB服务器软件"><a href="#关于WEB服务器软件" class="headerlink" title="关于WEB服务器软件"></a>关于WEB服务器软件</h2><ul><li><p>WEB服务器软件都有哪些呢？（这些软件都是提前开发好的。）</p><ul><li>Tomcat（WEB服务器）</li><li>jetty（WEB服务器）</li><li>JBOSS（应用服务器）</li><li>WebLogic（应用服务器）</li><li>WebSphere（应用服务器）</li></ul></li><li><p>应用服务器和WEB服务器的关系？</p><ul><li>应用服务器实现了JavaEE的所有规范。(JavaEE有13个不同的规范。)</li><li>WEB服务器只实现了JavaEE中的Servlet + JSP两个核心的规范。</li><li>通过这个讲解说明了：应用服务器是包含WEB服务器的。</li><li>用过JBOSS服务器的同学应该很清楚，JBOSS中内嵌了一个Tomcat服务器。</li></ul></li><li><p>Tomcat下载</p><ul><li>apache官网地址：<a href="https://www.apache.org/">https://www.apache.org/</a></li><li>tomcat官网地址：<a href="https://tomcat.apache.org/">https://tomcat.apache.org</a></li><li>tomcat开源免费的轻量级WEB服务器。</li><li>tomcat还有另外一个名字：catalina（catalina是美国的一个岛屿，风景秀丽，据说作者是在这个风景秀丽的小岛上开发了一个轻量级的WEB服务器，体积小，运行速度快，因此tomcat又被称为catalina）</li><li>tomcat的logo是一只公猫（寓意表示Tomcat服务器是轻巧的，小巧的，果然，体积小，运行速度快，只实现了Servlet+JSP规范）</li><li>tomcat是java语言写的。</li><li>tomcat服务器要想运行，必须先又jre（Java的运行时环境）</li></ul></li><li><p>Tomcat服务器要想运行，需要先有jre，所以要先安装JDK，配置java运行环境。</p><ul><li>JAVA_HOME&#x3D;C:\Program Files\Java\jdk-17.0.1</li><li>PATH&#x3D;%JAVA_HOME%\bin</li><li>目前JAVA_HOME没有配置，思考一个问题，这样行不行呢？目前只运行java程序是没问题的。真的没问题吗？</li></ul></li><li><p>Tomcat服务器的安装：</p><ul><li>绿色版本的安装很简单，直接zip包解压即可。解压就是安装。</li><li>我有一个好习惯，在C盘的根目录下新建一个dev目录，java开发所有相关的工具都安装到dev目录下，这样比较方便管理。（你随意）</li><li>启动Tomcat<ul><li>bin目录下有一个文件：startup.bat,通过它可以启动Tomcat服务器。<ul><li>xxx.bat文件是个什么文件？bat文件是windows操作系统专用的，bat文件是批处理文件，这种文件中可以编写大量的windows的dos命令，然后执行bat文件就相当于批量的执行dos命令。</li><li>startup.sh，这个文件在windows当中无法执行，在Linux环境当中可以使用。在Linux环境下能够执行的是shell命令，大量的shell命令编写在shell文件当中，然后执行这个shell文件可以批量的执行shell命令。</li><li>tomcat服务器提供了bat和sh文件，说明了这个tomcat服务器的通用性。</li><li>分析startup.bat文件得出，执行这个命令，实际上最后是执行：catalina.bat文件。</li><li>catalina.bat文件中有这样一行配置：MAINCLASS&#x3D;org.apache.catalina.startup.Bootstrap （这个类就是main方法所在的类。）</li><li>tomcat服务器就是Java语言写的，既然是java语言写的，那么启动Tomcat服务器就是执行main方法。</li></ul></li><li>我们尝试打开dos命令窗口，在dos命令窗口中输入startup.bat来启动tomcat服务器。</li><li>启动Tomcat服务器只配置path对应的bin目录是不行的。有两个环境变量需要配置：<ul><li>JAVA_HOME&#x3D;JDK的根</li><li>CATALINA_HOME&#x3D;Tomcat服务器的根</li></ul></li></ul></li></ul></li><li><p>关于Tomcat服务器的目录</p><ul><li>bin ： 这个目录是Tomcat服务器的命令文件存放的目录，比如：启动Tomcat，关闭Tomcat等。</li><li>conf： 这个目录是Tomcat服务器的配置文件存放目录。（server.xml文件中可以配置端口号，默认Tomcat端口是8080）</li><li>lib ：这个目录是Tomcat服务器的核心程序目录，因为Tomcat服务器是Java语言编写的，这里的jar包里面都是class文件。</li><li>logs: Tomcat服务器的日志目录，Tomcat服务器启动等信息都会在这个目录下生成日志文件。</li><li>temp：Tomcat服务器的临时目录。存储临时文件。</li><li>webapps：这个目录当中就是用来存放大量的webapp（web application：web应用）</li><li>work：这个目录是用来存放JSP文件翻译之后的java文件以及编译之后的class文件。</li></ul></li><li><p>配置Tomcat服务器需要哪些环境变量？</p><ul><li>JAVA_HOME&#x3D;JDK的根</li><li>CATALINA_HOME&#x3D;Tomcat服务器的根</li><li>PATH&#x3D;%JAVA_HOME%\bin;%CATALINA_HOME%\bin</li></ul></li><li><p>启动Tomcat： startup</p></li><li><p>关闭Tomcat：stop （shutdown.bat文件重命名为stop.bat，为什么？原因是shutdown命令和windows中的关机命令冲突。所以修改一下。）</p></li><li><p>怎么测试Tomcat服务器有没有启动成功呢？</p><ul><li>打开浏览器，在浏览器的地址栏上输入URL即可：<ul><li><a href="http://ip地址:端口号">http://ip地址:端口号</a></li><li>ip地址是什么？端口号我知道，是8080</li><li>本机的IP地址是：127.0.0.1，或者是localhost，都行。</li></ul></li></ul></li></ul><h2 id="实现一个最基本的web应用（这个web应用中没有java小程序）"><a href="#实现一个最基本的web应用（这个web应用中没有java小程序）" class="headerlink" title="实现一个最基本的web应用（这个web应用中没有java小程序）"></a>实现一个最基本的web应用（这个web应用中没有java小程序）</h2><ul><li><p>第一步：找到CATALINA_HOME\webapps目录</p><ul><li>因为所有的webapp要放到webapps目录下。（没有为什么，这是Tomcat服务器的要求。如果不放到这里，Tomcat服务器找不到你的应用。）</li></ul></li><li><p>第二步：在CATALINA_HOME\webapps目录下新建一个子目录，起名：oa</p><ul><li>这个目录名oa就是你这个webapp的名字。</li></ul></li><li><p>第三步：在oa目录下新建资源文件，例如：index.html</p><ul><li>编写index.html文件的内容。</li></ul></li><li><p>第四步：启动Tomcat服务器</p></li><li><p>第五步：打开浏览器，在浏览器地址栏上输入这样的URL：</p></li><li><p><a href="http://127.0.0.1:8080/oa/index.html">http://127.0.0.1:8080/oa/index.html</a></p></li><li><p>思考一个问题：</p><ul><li><p>我们在浏览器上直接输入一个URL，然后回车。这个动作和超链接一样吗？既然是一样的，我们完全可以使用超链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意以下的路径，以/开始，带项目名，是一个绝对路径。不需要添加：http://127.0.0.1:8080--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/login.html&quot;</span>&gt;</span>user login2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多个层级也没有关系，正常访问即可。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意：我们目前前端上的路径都以“/”开始的，都是加项目名的。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/oa/test/debug/d.html&quot;</span>&gt;</span>d page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="http://127.0.0.1:8080/oa/userList.html">http://127.0.0.1:8080/oa/userList.html</a> </p><ul><li>访问这个地址，可以展示一个用户列表页面。但是这个用户列表页面是写死在HTML文件当中的。这种资源我们称为静态资源。怎么能变成动态资源。显然需要连接数据库。</li><li>连接数据库需要JDBC程序，也就是说需要编写Java程序连接数据库，数据库中有多少条记录，页面上就显示多少条记录，这种技术被称为动态网页技术。（动态网页技术并不是说页面中有flash动画。动态网页技术是说页面中的数据是动态的，根据数据库中数据的变化而变化。）</li></ul></li></ul><h2 id="对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议"><a href="#对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议" class="headerlink" title="对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议"></a>对于一个动态的web应用来说，一个请求和响应的过程有多少个角色参与，角色和角色之间有多少个协议</h2><p><img src="/2022/11/27/JavaWeb/Servlet-JSP-%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/course\01-Servlet\文档\BS结构系统的通信原理2.png" alt="BS结构系统的通信原理2"></p><ul><li>有哪些角色（在整个BS结构的系统当中，有哪些人参与进去了）<ul><li>浏览器软件的开发团队（浏览器软件太多了：谷歌浏览器、火狐浏览器、IE浏览器….）</li><li>WEB Server的开发团队（WEB Server这个软件也是太多了：Tomcat、Jetty、WebLogic、JBOSS、WebSphere….）</li><li>DB Server的开发团队（DB Server这个软件也是太多了：Oracle、MySQL…..）</li><li>webapp的开发团队（WEB应用是我们做为JavaWEB程序员开发的）</li></ul></li><li>角色和角色之间需要遵守哪些规范，哪些协议<ul><li>webapp的开发团队   和    WEB Server的开发团队  之间有一套规范: JavaEE规范之一Servlet规范。<ul><li>Servlet规范的作用是什么？<ul><li>WEB Server   和   webapp解耦合。</li></ul></li></ul></li><li>Browser  和   WebServer之间有一套传输协议：HTTP协议。（超文本传输协议。）</li><li>webapp开发团队  和  DB Server的开发团队之间有一套规范：JDBC规范。</li></ul></li></ul><p><img src="/2022/11/27/JavaWeb/Servlet-JSP-%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/course\01-Servlet\文档\BS结构系统的角色和协议.png" alt="BS结构系统的角色和协议"></p><ul><li>Servlet规范是一个什么规范？<ul><li>遵循Servlet规范的webapp，这个webapp就可以放在不同的WEB服务器中运行。（因为这个webapp是遵循Servlet规范的。）</li><li>Servlet规范包括什么呢？<ul><li>规范了哪些接口</li><li>规范了哪些类</li><li>规范了一个web应用中应该有哪些配置文件</li><li>规范了一个web应用中配置文件的名字</li><li>规范了一个web应用中配置文件存放的路径</li><li>规范了一个web应用中配置文件的内容</li><li>规范了一个合法有效的web应用它的目录结构应该是怎样的。</li><li>…..</li></ul></li></ul></li></ul><h2 id="开发一个带有Servlet（Java小程序）的webapp（重点）"><a href="#开发一个带有Servlet（Java小程序）的webapp（重点）" class="headerlink" title="开发一个带有Servlet（Java小程序）的webapp（重点）"></a>开发一个带有Servlet（Java小程序）的webapp（重点）</h2><ul><li><p>开发步骤是怎样的？</p><ul><li><p>第一步：在webapps目录下新建一个目录，起名crm（这个crm就是webapp的名字）。当然，也可以是其它项目，比如银行项目，可以创建一个目录bank，办公系统可以创建一个oa。</p><ul><li>注意：crm就是这个webapp的根</li></ul></li><li><p>第二步：在webapp的根下新建一个目录：WEB-INF</p><ul><li>注意：这个目录的名字是Servlet规范中规定的，必须全部大写，必须一模一样。必须的必须。</li></ul></li><li><p>第三步：在WEB-INF目录下新建一个目录：classes</p><ul><li>注意：这个目录的名字必须是全部小写的classes。这也是Servlet规范中规定的。另外这个目录下一定存放的是Java程序编译之后的class文件（这里存放的是字节码文件）。</li></ul></li><li><p>第四步：在WEB-INF目录下新建一个目录：lib</p><ul><li>注意：这个目录不是必须的。但如果一个webapp需要第三方的jar包的话，这个jar包要放到这个lib目录下，这个目录的名字也不能随意编写，必须是全部小写的lib。例如java语言连接数据库需要数据库的驱动jar包。那么这个jar包就一定要放到lib目录下。这Servlet规范中规定的。</li></ul></li><li><p>第五步：在WEB-INF目录下新建一个文件：web.xml</p><ul><li><p>注意：这个文件是必须的，这个文件名必须叫做web.xml。这个文件必须放在这里。一个合法的webapp，web.xml文件是必须的，这个web.xml文件就是一个配置文件，在这个配置文件中描述了请求路径和Servlet类之间的对照关系。</p></li><li><p>这个文件最好从其他的webapp中拷贝，最好别手写。没必要。复制粘贴</p></li><li><p>&#96;&#96;&#96;xml</p><?xml version="1.0" encoding="UTF-8"?><p><web-app xmlns="https://jakarta.ee/xml/ns/jakartaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="https://jakarta.ee/xml/ns/jakartaee                  https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd" version="5.0" metadata-complete="true"></web-app></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 第六步：编写一个Java程序，这个小Java程序也不能随意开发，这个小java程序必须实现Servlet接口。</span><br><span class="line"></span><br><span class="line">  - 这个Servlet接口不在JDK当中。（因为Servlet不是JavaSE了。Servlet属于JavaEE，是另外的一套类库。）</span><br><span class="line">  - Servlet接口（Servlet.class文件）是Oracle提供的。（最原始的是sun公司提供的。）</span><br><span class="line">  - Servlet接口是JavaEE的规范中的一员。</span><br><span class="line">  - Tomcat服务器实现了Servlet规范，所以Tomcat服务器也需要使用Servlet接口。Tomcat服务器中应该有这个接口，Tomcat服务器的CATALINA_HOME\lib目录下有一个servlet-api.jar，解压这个servlet-api.jar之后，你会看到里面有一个Servlet.class文件。</span><br><span class="line">  - 重点：从JakartaEE9开始，Servlet接口的全名变了：jakarta.servlet.Servlet</span><br><span class="line">  - 注意：编写这个Java小程序的时候，java源代码你愿意在哪里就在哪里，位置无所谓，你只需要将java源代码编译之后的class文件放到classes目录下即可。</span><br><span class="line"></span><br><span class="line">- 第七步：编译我们编写的HelloServlet</span><br><span class="line"></span><br><span class="line">  - 重点：你怎么能让你的HelloServlet编译通过呢？配置环境变量CLASSPATH</span><br><span class="line"></span><br><span class="line">    CLASSPATH=.;C:\dev\apache-tomcat-10.0.12\lib\servlet-api.jar</span><br><span class="line"></span><br><span class="line">  - 思考问题：以上配置的CLASSPATH和Tomcat服务器运行有没有关系？</span><br><span class="line"></span><br><span class="line">    - 没有任何关系，以上配置这个环境变量只是为了让你的HelloServlet能够正常编译生成class文件。</span><br><span class="line"></span><br><span class="line">- 第八步：将以上编译之后的HelloServlet.class文件拷贝到WEB-INF\classes目录下。</span><br><span class="line"></span><br><span class="line">- 第九步：在web.xml文件中编写配置信息，让“请求路径”和“Servlet类名”关联在一起。</span><br><span class="line"></span><br><span class="line">  - 这一步用专业术语描述：在web.xml文件中注册Servlet类。</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;web-app xmlns=&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span><br><span class="line">      xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">      xsi:schemaLocation=&quot;https://jakarta.ee/xml/ns/jakartaee</span><br><span class="line">                          https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span><br><span class="line">      version=&quot;5.0&quot;</span><br><span class="line">      metadata-complete=&quot;true&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--servlet描述信息--&gt;</span><br><span class="line">    &lt;!--任何一个servlet都对应一个servlet-mapping --&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;fdsafdsagfdsafdsa&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--这个位置必须是带有包名的全限定类名--&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.bjpowernode.servlet.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--servlet映射信息--&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;!--这个也是随便的，不过这里写的内容要和上面的一样。--&gt;</span><br><span class="line">    &lt;servlet-name&gt;fdsafdsagfdsafdsa&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!--这里需要一个路径--&gt;</span><br><span class="line">    &lt;!--这个路径唯一的要求是必须以 / 开始--&gt;</span><br><span class="line">    &lt;!--当前这个路径可以随便写--&gt;</span><br><span class="line">    &lt;url-pattern&gt;/fdsa/fd/saf/d/sa/fd/sa/fd&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/web-app&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul></li><li><p>第十步：启动Tomcat服务器</p></li><li><p>第十一步：打开浏览器，在浏览器地址栏上输入一个url，这个URL必须是：</p><ul><li><a href="http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd">http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd</a>   </li><li>非常重要的一件事：浏览器上的请求路径不能随便写，这个请求路径必须和web.xml文件中的url-pattern一致。</li><li>注意：浏览器上的请求路径和web.xml文件中的url-pattern的唯一区别就是：浏览器上的请求路径带项目名：&#x2F;crm</li></ul></li><li><p>浏览器上编写的路径太复杂，可以使用超链接。（<strong>非常重要：html页面只能放到WEB-INF目录外面。</strong>）</p></li><li><p>以后不需要我们编写main方法了。tomcat服务器负责调用main方法，Tomcat服务器启动的时候执行的就是main方法。我们javaweb程序员只需要编写Servlet接口的实现类，然后将其注册到web.xml文件中，即可。</p></li><li><p>总结一下：一个合法的webapp目录结构应该是怎样的？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webapproot</span><br><span class="line">     |------WEB-INF</span><br><span class="line">       |------classes(存放字节码)</span><br><span class="line">       |------lib(第三方jar包)</span><br><span class="line">       |------web.xml(注册Servlet)</span><br><span class="line">     |------html</span><br><span class="line">     |------css</span><br><span class="line">     |------javascript</span><br><span class="line">     |------image</span><br><span class="line">     ....</span><br></pre></td></tr></table></figure></li><li><p>浏览器发送请求，到最终服务器调用Servlet中的方法，是怎样的一个过程？（以下这个过程描述的很粗糙。其中还有很多步骤我省略了。）</p><ul><li>用户输入URL，或者直接点击超链接：<a href="http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd">http://127.0.0.1:8080/crm/fdsa/fd/saf/d/sa/fd/sa/fd</a>  </li><li>然后Tomcat服务器接收到请求，截取路径：&#x2F;crm&#x2F;fdsa&#x2F;fd&#x2F;saf&#x2F;d&#x2F;sa&#x2F;fd&#x2F;sa&#x2F;fd  </li><li>Tomcat服务器找到crm项目</li><li>Tomcat服务器在web.xml文件中查找&#x2F;fdsa&#x2F;fd&#x2F;saf&#x2F;d&#x2F;sa&#x2F;fd&#x2F;sa&#x2F;fd  对应的Servlet是：com.bjpowernode.servlet.HelloServlet</li><li>Tomcat服务器通过反射机制，创建com.bjpowernode.servlet.HelloServlet的对象。</li><li>Tomcat服务器调用com.bjpowernode.servlet.HelloServlet对象的service方法。</li></ul></li></ul></li></ul><h2 id="关于JavaEE的版本"><a href="#关于JavaEE的版本" class="headerlink" title="关于JavaEE的版本"></a>关于JavaEE的版本</h2><ul><li>JavaEE目前最高版本是 JavaEE8</li><li>JavaEE被Oracle捐献了，Oracle将JavaEE规范捐献给Apache了。</li><li>Apache把JavaEE换名了，以后不叫JavaEE了，以后叫做 jakarta EE。</li><li>以后没有JavaEE了。以后都叫做Jakarta EE。</li><li>JavaEE8版本升级之后的”JavaEE 9”，不再是”JavaEE9”这个名字了，叫做JakartaEE9</li><li>JavaEE8的时候对应的Servlet类名是：javax.servlet.Servlet</li><li>JakartaEE9的时候对应的Servlet类名是：jakarta.servlet.Servlet （包名都换了）</li><li>如果你之前的项目还是在使用javax.servlet.Servlet，那么你的项目无法直接部署到Tomcat10+版本上。你只能部署到Tomcat9-版本上。在Tomcat9以及Tomcat9之前的版本中还是能够识别javax.servlet这个包。</li></ul><h2 id="解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）"><a href="#解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）" class="headerlink" title="解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）"></a>解决Tomcat服务器在DOS命令窗口中的乱码问题（控制台乱码）</h2><p>将CATALINA_HOME&#x2F;conf&#x2F;logging.properties文件中的内容修改如下：</p><p>java.util.logging.ConsoleHandler.encoding &#x3D; GBK</p><h2 id="向浏览器响应一段HTML代码"><a href="#向浏览器响应一段HTML代码" class="headerlink" title="向浏览器响应一段HTML代码"></a>向浏览器响应一段HTML代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest request, ServletResponse response)</span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    out.print(<span class="string">&quot;&lt;h1&gt;hello servlet!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在Servlet中连接数据库，怎么做？"><a href="#在Servlet中连接数据库，怎么做？" class="headerlink" title="在Servlet中连接数据库，怎么做？"></a>在Servlet中连接数据库，怎么做？</h2><ul><li>Servlet是Java程序，所以在Servlet中完全可以编写JDBC代码连接数据库。</li><li>在一个webapp中去连接数据库，需要将驱动jar包放到WEB-INF&#x2F;lib目录下。（com.mysql.cj.jdbc.Driver 这个类就在驱动jar包当中。）</li></ul><h2 id="在集成开发环境当中开发Servlet程序"><a href="#在集成开发环境当中开发Servlet程序" class="headerlink" title="在集成开发环境当中开发Servlet程序"></a>在集成开发环境当中开发Servlet程序</h2><ul><li><p>集成开发工具很多，其中目前使用比较多的是：</p><ul><li>IntelliJ IDEA（这个居多，IDEA在提示功能方面要强于Eclipse，也就是说IDEA使用起来比Eclipse更加智能，更好用。JetBrain公司开发的。收费的。）</li><li>Eclipse（这个少一些），Eclipse目前还是有团队使用，只不过处于减少的趋势，自己从事工作之后，可能会遇到。Eclipse是IBM团队开发的。Eclipse寓意是“日食”。“日食”表示将太阳吃掉。太阳是SUN。IBM团队开发Eclipse的寓意是吞并SUN公司，但是2009年的时候SUN公司被Oracle公司并购了。IBM并没有成功并购SUN公司。</li></ul></li><li><p>使用IDEA集成开发工具开发Servlet</p><ul><li>第一步：New Project（我比较习惯先创建一个Empty Project【空工程】，然后在空工程下新建Module【模块】，这不是必须的，只是一种习惯，你可以直接新建非空的Project），这个Empty Project起名为：javaweb（不是必须的，只是一个名字而已。一般情况下新建的Project的名字最好和目录的名字一致。）</li><li>第二步：新建模块（File –&gt; new –&gt; Module…）<ul><li>这里新建的是一个普通的JavaSE模块（这里先不要新建Java Enterprise模块）</li><li>这个Module自动会被放在javaweb的project下面。</li><li>这个Module起名：servlet01</li></ul></li><li>第三步：让Module变成JavaEE的模块。（让Module变成webapp的模块。符合webapp规范。符合Servlet规范的Module）<ul><li>在Module上点击右键：Add Framework Support…（添加框架支持）</li><li>在弹出的窗口中，选择Web Application（选择的是webapp的支持）</li><li>选择了这个webapp的支持之后，IDEA会自动给你生成一个符合Servlet规范的webpp目录结构。</li><li><strong>重点，需要注意的：在IDEA工具中根据Web Application模板生成的目录中有一个web目录，这个目录就代表webapp的根</strong></li></ul></li><li>第四步（非必须）：根据Web Application生成的资源中有index.jsp文件，这里我选择删除这个index.jsp文件。</li><li>第五步：编写Servlet（StudentServlet）<ul><li>class StudentServlet implements Servlet</li><li>这个时候发现Servlet.class文件没有。怎么办？将CATALINA_HOME&#x2F;lib&#x2F;servlet-api.jar和jsp-api.jar添加到classpath当中（这里的classpath说的是IDEA的classpath）<ul><li>File –&gt; Project Structrue –&gt; Modules –&gt; + 加号 –&gt; Add JARS….</li></ul></li><li>实现jakarta.servlet.Servlet接口中的5个方法。</li></ul></li><li>第六步：在Servlet当中的service方法中编写业务代码（我们这里连接数据库了。）</li><li>第七步：在WEB-INF目录下新建了一个子目录：lib（这个目录名可不能随意，必须是全部小写的lib），并且将连接数据库的驱动jar包放到lib目录下。</li><li>第八步：在web.xml文件中完成StudentServlet类的注册。（请求路径和Servlet之间对应起来）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="line">         version=<span class="string">&quot;4.0&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.bjpowernode.javaweb.servlet.StudentServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;studentServlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/servlet/student&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><ul><li><p>第九步：给一个html页面，在HTML页面中编写一个超链接，用户点击这个超链接，发送请求，Tomcat执行后台的StudentServlet。</p><ul><li><p>student.html</p></li><li><p>这个文件不能放到WEB-INF目录里面，只能放到WEB-INF目录外面。</p></li><li><p>student.html文件的内容</p></li><li><p>&#96;&#96;&#96;html</p><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>student page</title></head><body>    <!--这里的项目名是 /xmm ，无法动态获取，先写死-->    <a href="/xmm/servlet/student">student list</a></body></html><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">  - 第十步：让IDEA工具去关联Tomcat服务器。关联的过程当中将webapp部署到Tomcat服务器当中。</span><br><span class="line"></span><br><span class="line">    - IDEA工具右上角，绿色小锤子右边有一个：Add Configuration</span><br><span class="line">    - 左上角加号，点击Tomcat Server --&gt; local</span><br><span class="line">    - 在弹出的界面中设置服务器Server的参数（基本上不用动）</span><br><span class="line">    - 在当前窗口中有一个Deployment（点击这个用来部署webapp），继续点击加号，部署即可。</span><br><span class="line">    - 修改 Application context为：/xmm</span><br><span class="line"></span><br><span class="line">  - 第十一步：启动Tomcat服务器</span><br><span class="line"></span><br><span class="line">    - 在右上角有绿色的箭头，或者绿色的小虫子，点击这个绿色的小虫子，可以采用debug的模式启动Tomcat服务器。</span><br><span class="line">    - 我们开发中建议适用debug模式启动Tomcat</span><br><span class="line"></span><br><span class="line">  - 第十二步：打开浏览器，在浏览器地址栏上输入：http://localhost:8080/xmm/student.html</span><br><span class="line"></span><br><span class="line">## Servlet对象的生命周期</span><br><span class="line"></span><br><span class="line">- 什么是Servlet对象生命周期？</span><br><span class="line"></span><br><span class="line">  - Servlet对象什么时候被创建。</span><br><span class="line">  - Servlet对象什么时候被销毁。</span><br><span class="line">  - Servlet对象创建了几个？</span><br><span class="line">  - Servlet对象的生命周期表示：一个Servlet对象从出生在最后的死亡，整个过程是怎样的。</span><br><span class="line"></span><br><span class="line">- Servlet对象是由谁来维护的？</span><br><span class="line"></span><br><span class="line">  - Servlet对象的创建，对象上方法的调用，对象最终的销毁，Javaweb程序员是无权干预的。</span><br><span class="line">  - Servlet对象的生命周期是由Tomcat服务器（WEB Server）全权负责的。</span><br><span class="line">  - Tomcat服务器通常我们又称为：WEB容器。（这个叫法你要知道【WEB Container】）</span><br><span class="line">  - WEB容器来管理Servlet对象的死活。</span><br><span class="line"></span><br><span class="line">- 思考：我们自己new的Servlet对象受WEB容器的管理吗？</span><br><span class="line"></span><br><span class="line">  - 我们自己new的Servlet对象是不受WEB容器管理的。</span><br><span class="line">  - WEB容器创建的Servlet对象，这些Servlet对象都会被放到一个集合当中（HashMap），只有放到这个HashMap集合中的Servlet才能够被WEB容器管理，自己new的Servlet对象不会被WEB容器管理。（自己new的Servlet对象不在容器当中）</span><br><span class="line">  - web容器底层应该有一个HashMap这样的集合，在这个集合当中存储了Servlet对象和请求路径之间的关系</span><br><span class="line">  - ![WEB容器中的Map集合](D:\course\01-Servlet\文档\WEB容器中的Map集合.png)</span><br><span class="line"></span><br><span class="line">- 研究：服务器在启动的Servlet对象有没有被创建出来（默认情况下）？</span><br><span class="line"></span><br><span class="line">  - 在Servlet中提供一个无参数的构造方法，启动服务器的时候看看构造方法是否执行。</span><br><span class="line">  - 经过测试得出结论：默认情况下，服务器在启动的时候Servlet对象并不会被实例化。</span><br><span class="line">  - 这个设计是合理的。用户没有发送请求之前，如果提前创建出来所有的Servlet对象，必然是耗费内存的，并且创建出来的Servlet如果一直没有用户访问，显然这个Servlet对象是一个废物，没必要先创建。</span><br><span class="line"></span><br><span class="line">- 怎么让服务器启动的时候创建Servlet对象呢？</span><br><span class="line"></span><br><span class="line">  - 在servlet标签中添加&lt;load-on-startup&gt;子标签，在该子标签中填写整数，越小的整数优先级越高。</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;aservlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.bjpowernode.javaweb.servlet.AServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;aservlet&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/a&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Servlet对象生命周期</p><ul><li><p>默认情况下服务器启动的时候AServlet对象并没有被实例化</p><blockquote><p>这里的Aservlet 指的是 一个自定义的类</p></blockquote></li><li><p>用户发送第一次请求的时候，控制台输出了以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AServlet无参数构造方法执行了</span><br><span class="line">AServlet&#x27;s init method execute!</span><br><span class="line">AServlet&#x27;s service method execute!</span><br></pre></td></tr></table></figure></li><li><p>根据以上输出内容得出结论：</p><ul><li>用户在发送第一次请求的时候Servlet对象被实例化（AServlet的构造方法被执行了。并且执行的是无参数构造方法。）</li><li>AServlet对象被创建出来之后，Tomcat服务器马上调用了AServlet对象的init方法。（init方法在执行的时候，AServlet对象已经存在了。已经被创建出来了。）</li><li>用户发送第一次请求的时候，init方法执行之后，Tomcat服务器马上调用AServlet对象的service方法。</li></ul></li><li><p>用户继续发送第二次请求，控制台输出了以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AServlet&#x27;s service method execute!</span><br></pre></td></tr></table></figure></li><li><p>根据以上输出结果得知，用户在发送第二次，或者第三次，或者第四次请求的时候，Servlet对象并没有新建，还是使用之前创建好的Servlet对象，直接调用该Servlet对象的service方法，这说明：</p><ul><li>第一：Servlet对象是单例的（单实例的。但是要注意：Servlet对象是单实例的，但是Servlet类并不符合单例模式。我们称之为&#x3D;&#x3D;假单例&#x3D;&#x3D;。之所以单例是因为Servlet对象的创建我们javaweb程序员管不着，这个&#x3D;&#x3D;对象的创建只能是Tomcat来说了算&#x3D;&#x3D;，Tomcat只创建了一个，所以导致了单例，但是属于假单例。真单例模式，构造方法是私有化的。）</li><li>第二：无参数构造方法、init方法只在第一次用户发送请求的时候执行。也就是说无参数构造方法只执行一次。init方法也只被Tomcat服务器调用一次。</li><li>第三：只要用户发送一次请求：service方法必然会被Tomcat服务器调用一次。发送100次请求，service方法会被调用100次。</li></ul></li><li><p>关闭服务器的时候，控制台输出了以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AServlet&#x27;s destroy method execute!</span><br></pre></td></tr></table></figure></li><li><p>通过以上输出内容，可以得出以下结论：</p><ul><li>Servlet的destroy方法只被Tomcat服务器调用一次。</li><li>destroy方法是在什么时候被调用的？<ul><li>在服务器关闭的时候。</li><li>因为服务器关闭的时候要销毁AServlet对象的内存。</li><li>服务器在销毁AServlet对象内存之前，Tomcat服务器会自动调用AServlet对象的destroy方法。</li></ul></li></ul></li><li><p>请问：destroy方法调用的时候，对象销毁了还是没有销毁呢？</p><ul><li>destroy方法执行的时候AServlet对象还在，没有被销毁。destroy方法执行结束之后，AServlet对象的内存才会被Tomcat释放。</li></ul></li><li><p>Servlet对象更像一个人的一生：</p><ul><li>Servlet的无参数构造方法执行：标志着你出生了。</li><li>Servlet对象的init方法的执行：标志着你正在接受教育。</li><li>Servlet对象的service方法的执行：标志着你已经开始工作了，已经开始为人类提供服务了。</li><li>Servlet对象的destroy方法的执行：标志着临终。有什么遗言，抓紧的。要不然，来不及了。</li></ul></li><li><p>关于Servlet类中方法的调用次数？</p><ul><li>构造方法只执行一次。</li><li>init方法只执行一次。</li><li>service方法：用户发送一次请求则执行一次，发送N次请求则执行N次。</li><li>destroy方法只执行一次。</li></ul></li><li><p>当我们Servlet类中编写一个有参数的构造方法，如果没有手动编写无参数构造方法会出现什么问题？</p><ul><li>&#x3D;&#x3D;报错了：500错误。&#x3D;&#x3D;</li><li>注意：500是一个HTTP协议的错误状态码。</li><li>500一般情况下是因为服务器端的Java程序出现了异常。（服务器端的错误都是500错误：服务器内部错误。）</li><li>如果没有无参数的构造方法，会导致出现500错误，无法实例化Servlet对象。</li><li>所以，一定要注意：在Servlet开发当中，不建议程序员来定义构造方法，因为定义不当，一不小心就会导致无法实例化Servlet对象。</li></ul></li><li><p>思考：Servlet的无参数构造方法是在对象第一次创建的时候执行，并且只执行一次。init方法也是在对象第一次创建的时候执行，并且只执行一次。那么这个无参数构造方法可以代替掉init方法吗？</p><ul><li>不能。</li><li>Oracle标准中。</li><li>Servlet规范中有要求，作为javaweb程序员，编写Servlet类的时候，&#x3D;&#x3D;不建议手动编写构造方法&#x3D;&#x3D;，因为编写构造方法，很容易让无参数构造方法消失，这个操作可能会导致Servlet对象无法实例化。所以init方法是有存在的必要的。</li></ul><blockquote><p>执行 构造器 后就会立刻执行 init 方法，几乎是同时的。</p></blockquote></li><li><p>init、service、destroy方法中使用最多的是哪个方法？</p><ul><li>使用最多就是service方法，service方法是一定要实现的，因为service方法是处理用户请求的核心方法。</li><li>什么时候使用init方法呢？<ul><li>init方法很少用。</li><li>什么代码只执行一次？</li><li>通常在init方法当中做初始化操作，并且这个初始化操作只需要执行一次。例如：初始化数据库连接池，初始化线程池….</li></ul></li><li>什么时候使用destroy方法呢？<ul><li>destroy方法也很少用。</li><li>通常在destroy方法当中，进行&#x3D;&#x3D;资源的关闭&#x3D;&#x3D;。马上对象要被销毁了，还有什么没有关闭的，抓紧时间关闭资源。还有什么资源没保存的，抓紧时间保存一下。</li></ul></li></ul></li><li><p>执行流程</p><ul><li>第一次访问 –&gt; 使用反射机制调用书写的 servlet 无参构造方法创建对象 —&gt; 调用 init 方法完成初始化 —&gt;service</li><li>第n次   直接调用第一次创建的对象的service方法</li><li></li></ul></li></ul></li></ul><h2 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h2><ul><li><p>我们编写一个Servlet类直接实现Servlet接口有什么缺点？</p><ul><li>我们只需要service方法，其他方法大部分情况下是不需要使用的。代码很丑陋。</li></ul></li><li><p>适配器设计模式Adapter</p><ul><li>手机直接插到220V的电压上，手机直接就报废了。怎么办？可以找一个充电器。这个充电器就是一个适配器。手机连接适配器。适配器连接220V的电压。这样问题就解决了。</li></ul></li><li><p>编写一个GenericServlet类，这个类是一个抽象类，其中有一个抽象方法service。</p><ul><li>GenericServlet实现Servlet接口。</li><li>GenericServlet是一个适配器。</li><li>以后编写的所有Servlet类继承GenericServlet，重写service方法即可。</li></ul></li><li><p>思考：GenericServlet类是否需要改造一下？怎么改造？更利于子类程序的编写？</p><ul><li><p>思考第一个问题：我提供了一个GenericServlet之后，init方法还会执行吗？</p><ul><li>还会执行。会执行GenericServlet类中的init方法。</li></ul></li><li><p>思考第二个问题：init方法是谁调用的？</p><ul><li>Tomcat服务器调用的。</li></ul></li><li><p>思考第三个问题：init方法中的ServletConfig对象是谁创建的？是谁传过来的？</p><ul><li>都是Tomcat干的。</li><li>Tomcat服务器先创建了ServletConfig对象，然后调用init方法，将ServletConfig对象传给了init方法。</li></ul></li><li><p>思考一下Tomcat服务器伪代码：</p><ul><li>&#96;&#96;&#96;java<br>public class Tomcat {<br>public static void main(String[] args){<br>    &#x2F;&#x2F; …..<br>    &#x2F;&#x2F; Tomcat服务器伪代码<br>    &#x2F;&#x2F; 创建LoginServlet对象（通过反射机制，调用无参数构造方法来实例化LoginServlet对象）<br>    Class clazz &#x3D; Class.forName(“com.bjpowernode.javaweb.servlet.LoginServlet”);<br>    Object obj &#x3D; clazz.newInstance();<br><br>    &#x2F;&#x2F; 向下转型<br>    Servlet servlet &#x3D; (Servlet)obj;<br><br>    &#x2F;&#x2F; 创建ServletConfig对象<br>    &#x2F;&#x2F; Tomcat服务器负责将ServletConfig对象实例化出来。<br>    &#x2F;&#x2F; 多态（Tomcat服务器完全实现了Servlet规范）<br>    ServletConfig servletConfig &#x3D; new org.apache.catalina.core.StandardWrapperFacade();<br><br>    &#x2F;&#x2F; 调用Servlet的init方法<br>    servlet.init(servletConfig);<br><br>    &#x2F;&#x2F; 调用Servlet的service方法<br>    &#x2F;&#x2F; ….<br><br>}<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## ServletConfig</span><br><span class="line"></span><br><span class="line">- 什么是ServletConfig？</span><br><span class="line"></span><br><span class="line">  - Servlet对象的配置信息对象。</span><br><span class="line">  - ServletConfig对象中封装了&lt;servlet&gt;&lt;/servlet&gt;标签中的配置信息。（web.xml文件中servlet的配置信息）</span><br><span class="line"></span><br><span class="line">- ==一个Servlet对应一个ServletConfig对象。==</span><br><span class="line"></span><br><span class="line">- Servlet对象是Tomcat服务器创建，并且ServletConfig对象也是Tomcat服务器创建。并且默认情况下，他们都是在用户==发送第一次请求==的时候创建。</span><br><span class="line"></span><br><span class="line">- Tomcat服务器调用Servlet对象的init方法的时候需要传一个ServletConfig对象的参数给init方法。</span><br><span class="line"></span><br><span class="line">  - ServletConfig接口的实现类是Tomcat服务器给实现的。（Tomcat服务器说的就是WEB服务器。）</span><br><span class="line"></span><br><span class="line">- ServletConfig接口有哪些常用的方法？</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public String getInitParameter(String name); // 通过初始化参数的name获取value</span><br><span class="line">    public Enumeration&lt;String&gt; getInitParameterNames(); // 获取所有的初始化参数的name</span><br><span class="line">    public ServletContext getServletContext(); // 获取ServletContext对象</span><br><span class="line">    public String getServletName(); // 获取Servlet的name</span><br></pre></td></tr></table></figure></li></ul></li><li><p>以上方法在Servlet类当中，都可以使用this去调用。因为GenericServlet实现了ServletConfig接口。</p></li><li><p>一个Servlet对象对应一个ServletConfig。100个Servlet对象则对应100个ServletConfig对象。</p></li></ul></li></ul><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><ul><li><p>只要在同一个webapp当中，只要在同一个应用(webapp)当中，所有的Servlet对象都是共享同一个ServletContext对象的。</p></li><li><p>ServletContext对象在服务器启动阶段创建，在服务器关闭的时候销毁。这就是ServletContext对象的生命周期。ServletContext对象是<strong>应用级对象。</strong></p><ul><li><p>Tomcat服务器中有一个 webapps，这个 webapps 下可以存放 webapp，可以存放多个webapp ，假设有100个 webapp，那么就有100个ServletContext对象。但是，总之，一个应用，一个webapp肯定是只有一个ServletContext对象。</p></li><li><p>ServletContext被称为 Servlet 上下文对象。（Servlet对象的四周环境对象。）</p></li></ul></li><li><p>一个ServletContext对象通常对应的是一个 &#x3D;&#x3D;web.xml&#x3D;&#x3D; 文件。</p></li><li><p>ServletContext对应显示生活中的什么例子呢？</p><ul><li>一个教室里有多个学生，那么每一个学生就是一个Servlet，这些学生都在同一个教室当中，那么我们可以把这个教室叫做ServletContext对象。那么也就是说放在这个ServletContext对象（环境）当中的数据，在同一个教室当中，物品都是共享的。比如：教室中有一个空调，所有的学生都可以操作。可见，空调是共享的。因为空调放在教室当中。教室就是ServletContext对象。</li></ul></li><li><p>ServletContext是一个接口，Tomcat服务器对ServletContext接口进行了实现。</p><ul><li>ServletContext对象的创建也是Tomcat服务器来完成的。启动webapp的时候创建的。</li></ul></li><li><p>ServletContext接口中有哪些常用的方法？</p><h3 id="一、获取-web-xml-文件中的配置信息"><a href="#一、获取-web-xml-文件中的配置信息" class="headerlink" title="一、获取 web.xml 文件中的配置信息"></a>一、获取 web.xml 文件中的配置信息</h3><ul><li><pre><code class="java">public String getInitParameter(String name); // 通过初始化参数的name获取valuepublic Enumeration&lt;String&gt; getInitParameterNames(); // 获取所有的初始化参数的name<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```xml</span><br><span class="line">  &lt;!--以上两个方法是ServletContext对象的方法，这个方法获取的是什么信息？是以下的配置信息--&gt;</span><br><span class="line">  &lt;context-param&gt;</span><br><span class="line">      &lt;param-name&gt;pageSize&lt;/param-name&gt;</span><br><span class="line">      &lt;param-value&gt;10&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line">  &lt;context-param&gt;</span><br><span class="line">      &lt;param-name&gt;startIndex&lt;/param-name&gt;</span><br><span class="line">      &lt;param-value&gt;0&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line">  &lt;!--注意：以上的配置信息属于应用级的配置信息，一般一个项目中共享的配置信息会放到以上的标签当中。--&gt;</span><br><span class="line">  &lt;!--如果你的配置信息只是想给某一个servlet作为参考，那么你配置到servlet标签当中即可，使用ServletConfig对象来获取。--&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="java">// 获取应用的根路径（非常重要），因为在java源代码当中有一些地方可能会需要应用的根路径，这个方法可以动态获取应用的根路径// 在java源码当中，不要将应用的根路径写死，因为你永远都不知道这个应用在最终部署的时候，起一个什么名字。public String getContextPath();//String contextPath = application.getContextPath();<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  // 获取文件的绝对路径（真实路径）</span><br><span class="line">  public String getRealPath(String path);</span><br><span class="line">  1.写/就从 web应用 的根开始指定路径找 ---&gt;适合指定路径</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">  2.不写 /，默认也是从 web根(web文件夹)下找 </span><br><span class="line">      </span><br><span class="line">  System.out.println(servletContext.getRealPath(&quot;add1.html&quot;));</span><br><span class="line">      ---不能用于多级目录，否则会出问题</span><br><span class="line">   add1.html的正确路径应该是</span><br><span class="line">      D:\project_jhfuture\IDEA\Tomcat_learn\out\artifacts\pro07\hello\add1.html </span><br><span class="line">   而返回的结果       D:\project_jhfuture\IDEA\Tomcat_learn\out\artifacts\pro07\add1.html</span><br><span class="line">   </span><br><span class="line">      -如果存在多个同名文件，则以目录优先级为准</span><br></pre></td></tr></table></figure>![image-20221211002313349](Servlet-JSP-课堂笔记/image-20221211002313349.png)### 二、记录日志</code></pre></li><li><pre><code class="java">通过ServletContext对象也是可以记录日志的    public void log(String message);public void log(String message, Throwable t);// 这些日志信息记录到哪里了？// localhost.2021-11-05.log// Tomcat服务器的logs目录下都有哪些日志文件？//catalina.2021-11-05.log 服务器端的java程序运行的控制台信息。//localhost.2021-11-05.log ServletContext对象的log方法记录的日志信息存储到这个文件中。//localhost_access_log.2021-11-05.txt 访问日志<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">查看idea中的 tomcat log日志路径 using CATABLINA_BASE idea根据配置的tomcat自己再生产的一个。</span><br><span class="line">  </span><br><span class="line">![image-20221211003841185](Servlet-JSP-课堂笔记/image-20221211003841185.png)</span><br><span class="line">  </span><br><span class="line">### 三、应用域</span><br><span class="line">  </span><br><span class="line">- 数据满足三个要点</span><br><span class="line">  </span><br><span class="line">  - 1.数据量小、</span><br><span class="line">  - 2.所有用户共享、</span><br><span class="line">  - 3.又不修改</span><br><span class="line">  </span><br><span class="line">- 怎么用</span><br><span class="line">  </span><br><span class="line">  - 存</span><br><span class="line">  </span><br><span class="line">    - ```java</span><br><span class="line">      public void setAttribute(String name, Object value); // map.put(k, v)</span><br></pre></td></tr></table></figure>    -   - 取    - ```java      // 取（怎么从ServletContext应用域中取数据）      public Object getAttribute(String name); // Object v = map.get(k)            <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- 删</span><br><span class="line">  </span><br><span class="line">  - ```java</span><br><span class="line">    // 删（怎么删除ServletContext应用域中的数据）</span><br><span class="line">    public void removeAttribute(String name); // map.remove(k)</span><br></pre></td></tr></table></figure>    - </code></pre></li><li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F; ServletContext对象还有另一个名字：应用域（后面还有其他域，例如：请求域、会话域）</p><p>&#x2F;&#x2F; 如果所有的用户共享一份数据，并且这个数据很少的被修改，并且这个数据量很少，可以将这些数据放到ServletContext这个应用域中</p><p>&#x2F;&#x2F; 为什么是所有用户共享的数据？ 不是共享的没有意义。因为ServletContext这个对象只有一个。只有共享的数据放进去才有意义。</p><p>&#x2F;&#x2F; 为什么数据量要小？ 因为数据量比较大的话，太占用堆内存，并且这个对象的生命周期比较长，服务器关闭的时候，这个对象才会被销毁。大数据量会影响服务器的性能。占用内存较小的数据量可以考虑放进去。</p><p>&#x2F;&#x2F; 为什么这些共享数据很少的修改，或者说几乎不修改？—&gt; Only Read<br>&#x2F;&#x2F; 所有用户共享的数据，如果涉及到修改操作，必然会存在线程并发所带来的安全问题。<br>&#x2F;&#x2F;—-&gt;所以放在ServletContext对象中的数据一般都是只读的。</p><p>&#x2F;&#x2F; 1数据量小、2所有用户共享、3又不修改，这样的数据放到ServletContext这个应用域当中，会大大提升效率。因为应用域相当于一个缓存，放到缓存中的数据，下次在用的时候，不需要从数据库中再次获取，大大提升执行效率。</p><p>&#x2F;&#x2F; 存（怎么向ServletContext应用域中存数据）<br>public void setAttribute(String name, Object value); &#x2F;&#x2F; map.put(k, v)<br>&#x2F;&#x2F; 取（怎么从ServletContext应用域中取数据）<br>public Object getAttribute(String name); &#x2F;&#x2F; Object v &#x3D; map.get(k)<br>&#x2F;&#x2F; 删（怎么删除ServletContext应用域中的数据）<br>public void removeAttribute(String name); &#x2F;&#x2F; map.remove(k)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- 注意：以后我们编写Servlet类的时候，实际上是不会去直接继承GenericServlet类的，因为我们是B/S结构的系统，这种系统是基于HTTP超文本传输协议的，在Servlet规范当中，提供了一个类叫做HttpServlet，它是专门为HTTP协议准备的一个Servlet类。我们编写的Servlet类要继承HttpServlet。（HttpServlet是HTTP协议专用的。）使用HttpServlet处理HTTP协议更便捷。但是你需要直到它的继承结构：</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    jakarta.servlet.Servlet（接口）【爷爷】</span><br><span class="line">    jakarta.servlet.GenericServlet implements Servlet（抽象类）【儿子】</span><br><span class="line">    jakarta.servlet.http.HttpServlet extends GenericServlet（抽象类）【孙子】</span><br><span class="line">    </span><br><span class="line">    我们以后编写的Servlet要继承HttpServlet类。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>大家到目前为止都接触过哪些缓存机制了？</p><ul><li>堆内存当中的字符串常量池。<ul><li>“abc” 先在字符串常量池中查找，如果有，直接拿来用。如果没有则新建，然后再放入字符串常量池。</li></ul></li><li>堆内存当中的整数型常量池。<ul><li>[-128 ~ 127] 一共256个Integer类型的引用，放在整数型常量池中。没有超出这个范围的话，直接从常量池中取。</li></ul></li><li>连接池(Connection Cache)<ul><li>这里所说的连接池中的连接是java语言连接数据库的连接对象：java.sql.Connection对象。</li><li>JVM是一个进程。MySQL数据库是一个进程。进程和进程之间建立连接，打开通道是很费劲的。是很耗费资源的。怎么办？可以提前先创建好N个Connection连接对象，将连接对象放到一个集合当中，我们把这个放有Connection对象的集合称为连接池。每一次用户连接的时候不需要再新建连接对象，省去了新建的环节，直接从连接池中获取连接对象，大大提升访问效率。</li><li>连接池<ul><li>最小连接数</li><li>最大连接数</li><li>连接池可以提高用户的访问效率。当然也可以保证数据库的安全性。</li></ul></li></ul></li><li>线程池<ul><li>Tomcat服务器本身就是支持多线程的。</li><li>Tomcat服务器是在用户发送一次请求，就新建一个Thread线程对象吗？<ul><li>当然不是，实际上是在Tomcat服务器启动的时候，会先创建好N多个线程Thread对象，然后将线程对象放到集合当中，称为线程池。用户发送请求过来之后，需要有一个对应的线程来处理这个请求，这个时候线程对象就会直接从线程池中拿，效率比较高。</li><li>所有的WEB服务器，或者应用服务器，都是支持多线程的，都有线程池机制。</li></ul></li></ul></li><li>redis<ul><li>NoSQL数据库。非关系型数据库。缓存数据库。</li></ul></li><li>向ServletContext应用域中存储数据，也等于是将数据存放到缓存cache当中了。</li></ul></li></ul><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><ul><li><p>什么是协议？</p><ul><li>协议实际上是某些人，或者某些组织提前制定好的一套规范，大家都按照这个规范来，这样可以做到沟通无障碍。</li><li>协议就是一套规范，就是一套标准。由其他人或其他组织来负责制定的。</li><li>我说的话你能听懂，你说的话，我也能听懂，这说明我们之间是有一套规范的，一套协议的，这套协议就是：中国普通话协议。我们都遵守这套协议，我们之间就可以沟通无障碍。</li></ul></li><li><p>什么是HTTP协议？</p><ul><li>HTTP协议：是W3C制定的一种超文本传输协议。（通信协议：发送消息的模板提前被制定好。）</li><li>W3C：<ul><li>万维网联盟组织</li><li>负责制定标准的：HTTP HTML4.0 HTML5 XML DOM等规范都是W3C制定的。</li><li>万维网之父：蒂姆·伯纳斯·李</li></ul></li><li>什么是超文本？<ul><li>超文本说的就是：不是普通文本，比如流媒体：声音、视频、图片等。</li><li>HTTP协议支持：不但可以传送普通字符串，同样支持传递声音、视频、图片等流媒体信息。</li></ul></li><li>这种协议游走在B和S之间。B向S发数据要遵循HTTP协议。S向B发数据同样需要遵循HTTP协议。这样B和S才能解耦合。</li><li>什么是解耦合？<ul><li>B不依赖S。</li><li>S也不依赖B。</li></ul></li><li>B&#x2F;S表示：B&#x2F;S结构的系统（浏览器访问WEB服务器的系统）</li><li>浏览器   向   WEB服务器发送数据，叫做：请求（request)</li><li>WEB服务器   向   浏览器发送数据，叫做：响应（response）</li><li>HTTP协议包括：<ul><li>请求协议<ul><li>浏览器  向   WEB服务器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li></ul></li><li>响应协议<ul><li>WEB服务器  向  浏览器发送数据的时候，这个发送的数据需要遵循一套标准，这套标准中规定了发送的数据具体格式。</li></ul></li></ul></li><li>HTTP协议就是提前制定好的一种消息模板。<ul><li>不管你是哪个品牌的浏览器，都是这么发。</li><li>不管你是哪个品牌的WEB服务器，都是这么发。</li><li>FF浏览器  可以向 Tomcat发送请求，也可以向Jetty服务器发送请求。浏览器不依赖具体的服务器品牌。</li><li>WEB服务器也不依赖具体的浏览器品牌。可以是FF浏览器，也可以是Chrome浏览器，可以是IE，都行。</li></ul></li></ul></li><li><p>HTTP的请求协议（B –&gt; S）</p><ul><li><p>HTTP的请求协议包括：4部分</p><ul><li>请求行</li><li>请求头</li><li>空白行</li><li>请求体</li></ul></li><li><p>HTTP请求协议的具体报文：GET请求</p><ul><li>&#96;&#96;&#96;<br>GET &#x2F;servlet05&#x2F;getServlet?username&#x3D;lucy&amp;userpwd&#x3D;1111 HTTP&#x2F;1.1                           请求行<br>Host: localhost:8080                                                                    请求头<br>Connection: keep-alive<br>sec-ch-ua: “Google Chrome”;v&#x3D;”95”, “Chromium”;v&#x3D;”95”, “;Not A Brand”;v&#x3D;”99”<br>sec-ch-ua-mobile: ?0<br>sec-ch-ua-platform: “Windows”<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;95.0.4638.54 Safari&#x2F;537.36<br>Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,<em>&#x2F;</em>;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9<br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-User: ?1<br>Sec-Fetch-Dest: document<br>Referer: <a href="http://localhost:8080/servlet05/index.html">http://localhost:8080/servlet05/index.html</a><br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q&#x3D;0.9<br>                                                                                    空白行<br>                                                                                    请求体<br>                                                                    例如<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- HTTP请求协议的具体报文：POST请求</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    POST /servlet05/postServlet HTTP/1.1                                                  请求行</span><br><span class="line">    Host: localhost:8080                                                 请求头          </span><br><span class="line">    Connection: keep-alive</span><br><span class="line">    Content-Length: 25</span><br><span class="line">    Cache-Control: max-age=0</span><br><span class="line">    sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;</span><br><span class="line">    sec-ch-ua-mobile: ?0</span><br><span class="line">    sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">    Upgrade-Insecure-Requests: 1</span><br><span class="line">    Origin: http://localhost:8080</span><br><span class="line">    Content-Type: application/x-www-form-urlencoded</span><br><span class="line">    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36</span><br><span class="line">    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">    Sec-Fetch-Site: same-origin</span><br><span class="line">    Sec-Fetch-Mode: navigate</span><br><span class="line">    Sec-Fetch-User: ?1</span><br><span class="line">    Sec-Fetch-Dest: document</span><br><span class="line">    Referer: http://localhost:8080/servlet05/index.html</span><br><span class="line">    Accept-Encoding: gzip, deflate, br</span><br><span class="line">    Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">                                                                                          空白行</span><br><span class="line">    username=lisi&amp;userpwd=123                                                             请求体</span><br></pre></td></tr></table></figure></li></ul></li><li><p>请求行</p><ul><li>包括三部分：<ul><li>第一部分：请求方式（7种）<ul><li>get（常用的）</li><li>post（常用的）</li><li>delete</li><li>put</li><li>head</li><li>options</li><li>trace</li></ul></li><li>第二部分：URI<ul><li>什么是URI？ 统一资源标识符。代表网络中某个资源的名字。但是通过URI是无法定位资源的。</li><li>什么是URL？统一资源定位符。代表网络中某个资源，同时，通过URL是可以定位到该资源的。</li><li>URI和URL什么关系，有什么区别？<ul><li>URL包括URI</li><li><a href="http://localhost:8080/servlet05/index.html">http://localhost:8080/servlet05/index.html</a> 这是URL。</li><li>&#x2F;servlet05&#x2F;index.html 这是URI。</li></ul></li></ul></li><li>第三部分：HTTP协议版本号</li></ul></li></ul></li><li><p>请求头</p><ul><li>请求的主机</li><li>主机的端口</li><li>浏览器信息</li><li>平台信息</li><li>cookie等信息</li><li>….</li></ul></li><li><p>空白行</p><ul><li>空白行是用来区分“请求头”和“请求体”</li></ul></li><li><p>请求体</p><ul><li>向服务器发送的具体数据。</li></ul></li></ul></li><li><p>HTTP的响应协议（S –&gt; B）</p><ul><li><p>HTTP的响应协议包括：4部分</p><ul><li>状态行</li><li>响应头</li><li>空白行</li><li>响应体</li></ul></li><li><p>HTTP响应协议的具体报文：</p><ul><li>&#96;&#96;&#96;<br>HTTP&#x2F;1.1 200 ok                                     状态行<br>Content-Type: text&#x2F;html;charset&#x3D;UTF-8               响应头<br>Content-Length: 160<br>Date: Mon, 08 Nov 2021 13:19:32 GMT<br>Keep-Alive: timeout&#x3D;20<br>Connection: keep-alive<br>                                                空白行<!doctype html><pre><code>                                 响应体</code></pre><html>    <head>        <title>from get servlet</title>    </head>    <body>        <h1>from get servlet</h1>    </body></html><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 状态行</span><br><span class="line"></span><br><span class="line">    - 三部分组成</span><br><span class="line">      - 第一部分：协议版本号（HTTP/1.1）</span><br><span class="line">      - 第二部分：状态码（HTTP协议中规定的响应状态号。不同的响应结果对应不同的号码。）</span><br><span class="line">        - 200 表示请求响应成功，正常结束。</span><br><span class="line">        - 以4开始的，一般是浏览器端的错误导致的。</span><br><span class="line">          - 404表示访问的资源不存在，通常是因为要么是你路径写错了，要么是路径写对了，但是服务器中对应的资源并没有启动成功。总之404错误是前端错误。</span><br><span class="line">          - 405 表示前端发送的请求方式与后端请求的==处理方式不一致==时发生：</span><br><span class="line">            - 比如：前端是POST请求，后端的处理方式按照get方式进行处理时，发生405</span><br><span class="line">            - 比如：前端是GET请求，后端的处理方式按照post方式进行处理时，发生405</span><br><span class="line">        - 以5开始的，一般是服务器端的错误导致的。</span><br><span class="line">          - 500表示服务器端的程序出现了异常。一般会认为是服务器端的错误导致的。</span><br><span class="line">      - 第三部分：状态的描述信息</span><br><span class="line">        - ok 表示正常成功结束。</span><br><span class="line">        - not found 表示资源找不到。</span><br><span class="line"></span><br><span class="line">  - 响应头：</span><br><span class="line"></span><br><span class="line">    - 响应的内容类型</span><br><span class="line">    - 响应的内容长度</span><br><span class="line">    - 响应的时间</span><br><span class="line">    - ....</span><br><span class="line"></span><br><span class="line">  - 空白行：</span><br><span class="line"></span><br><span class="line">    - 用来分隔“响应头”和“响应体”的。</span><br><span class="line"></span><br><span class="line">  - 响应体：</span><br><span class="line"></span><br><span class="line">    - 响应体就是响应的正文，这些内容是一个长的字符串，这个字符串被浏览器渲染，解释并执行，最终展示出效果。</span><br><span class="line"></span><br><span class="line">- 怎么查看的协议内容？</span><br><span class="line"></span><br><span class="line">  - 使用chrome浏览器：F12。然后找到network，通过这个面板可以查看协议的具体内容。</span><br><span class="line"></span><br><span class="line">- 怎么向服务器发送GET请求，怎么向服务器发送POST请求？</span><br><span class="line"></span><br><span class="line">  - 到目前为止，只有一种情况可以发送POST请求：使用form表单，并且form标签中的method属性值为：method=&quot;post&quot;。</span><br><span class="line">  - 其他所有情况一律都是get请求：</span><br><span class="line">    - 在浏览器地址栏上直接输入URL，敲回车，属于get请求。</span><br><span class="line">    - 在浏览器上直接点击超链接，属于get请求。</span><br><span class="line">    - 使用form表单提交数据时，form标签中没有写method属性，默认就是get</span><br><span class="line">    - 或者使用form的时候，form标签中method属性值为：method=&quot;get&quot;</span><br><span class="line">    - ....</span><br><span class="line"></span><br><span class="line">- GET请求和POST请求有什么区别？</span><br><span class="line"></span><br><span class="line">  - get请求发送数据的时候，数据会挂在URI的后面，并且在URI后面添加一个“?”，&quot;?&quot;后面是数据。这样会导致发送的数据回显在浏览器的地址栏上。（get请求在“请求行”上发送数据）</span><br><span class="line">    - http://localhost:8080/servlet05/getServlet?username=zhangsan&amp;userpwd=1111</span><br><span class="line">  - post请求发送数据的时候，在请求体当中发送。不会回显到浏览器的地址栏上。也就是说post发送的数据，在浏览器地址栏上看不到。（post在“请求体”当中发送数据）</span><br><span class="line">  - get请求只能发送普通的字符串。并且发送的字符串长度有限制，不同的浏览器限制不同。这个没有明确的规范。</span><br><span class="line">  - get请求无法发送大数据量。</span><br><span class="line">  - post请求可以发送任何类型的数据，包括普通字符串，流媒体等信息：视频、声音、图片。</span><br><span class="line">  - post请求可以发送大数据量，理论上没有长度限制。</span><br><span class="line">  - get请求在W3C中是这样说的：get请求比较==适合从服务器端获取数据==。</span><br><span class="line">  - post请求在W3C中是这样说的：post请求比较==适合向服务器端传送数据。==</span><br><span class="line">  - get请求是安全的。get请求是绝对安全的。为什么？因为get请求只是为了从服务器上获取数据。不会对服务器造成威胁。（get本身是安全的，你不要用错了。用错了之后又冤枉人家get不安全，你这样不好（太坏了），那是你自己的问题，不是get请求的问题。）</span><br><span class="line">  - post请求是危险的。为什么？因为post请求是向服务器提交数据，如果这些数据通过后门的方式进入到服务器当中，服务器是很危险的。另外post是为了提交数据，所以一般情况下拦截请求的时候，大部分会选择拦截（监听）post请求。</span><br><span class="line">  - **get请求支持缓存。**</span><br><span class="line">    - eg:https://n.sinaimg.cn/finance/590/w240h350/20211101/b40c-b425eb67cabc342ff5b9dc018b4b00cc.jpg</span><br><span class="line">    - ==任何一个get请求最终的“响应结果”都会被浏览器缓存起来。在浏览器缓存当中：==</span><br><span class="line">      - 一个get请求的路径a  对应  一个资源。</span><br><span class="line">      - 一个get请求的路径b  对应  一个资源。</span><br><span class="line">      - 一个get请求的路径c  对应  一个资源。</span><br><span class="line">      - ......</span><br><span class="line">    - 实际上，你只要发送get请求，浏览器做的第一件事都是先从本地浏览器缓存中找，找不到的时候才会去服务器上获取。这种缓存机制目的是为了提高用户的体验。</span><br><span class="line">    - ==**一个需求**== 解决浏览器缓存的问题</span><br><span class="line">      - 有没有这样一个需求：我们不希望get请求走缓存，怎么办？怎么避免走缓存？我希望每一次这个get请求都去服务器上找资源，我不想从本地浏览器的缓存中取。</span><br><span class="line">        - 只要每一次get请求的请求路径不同即可。</span><br><span class="line">        - https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897898</span><br><span class="line">        - https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=789789787897899</span><br><span class="line">        - https://n.sinaimg.cn/finance/590/w240h350/20211101/7cabc342ff5b9dc018b4b00cc.jpg?t=系统毫秒数</span><br><span class="line">        - 怎么解决？可以在路径的后面==添加==一个每时每刻都在变化的“==时间戳==”，这样，每一次的请求路径都不一样，浏览器就不走缓存了。</span><br><span class="line">  - post请求==不支持缓存==。（POST是用来修改服务器端的资源的。）</span><br><span class="line">    - post请求之后，服务器“响应的结果”不会被浏览器缓存起来。因为这个缓存没有意义。</span><br><span class="line"></span><br><span class="line">- GET请求和POST请求如何选择，什么时候使用GET请求，什么时候使用POST请求？</span><br><span class="line"></span><br><span class="line">  - 怎么选择GET请求和POST请求呢？衡量标准是什么呢？你这个请求是想获取服务器端的数据，还是想向服务器发送数据。如果你是想从服务器上获取资源，建议使用GET请求，如果你这个请求是为了向服务器提交数据，建议使用POST请求。</span><br><span class="line">  - 大部分的form表单提交，都是post方式，因为form表单中要填写大量的数据，这些数据是收集用户的信息，一般是需要传给服务器，服务器将这些数据保存/修改等。</span><br><span class="line">  - 如果表单中有敏感信息，还是建议适用post请求，因为get请求会回显敏感信息到浏览器地址栏上。（例如：密码信息）</span><br><span class="line">  - 做文件上传，一定是post请求。要传的数据不是普通文本。</span><br><span class="line">  - 其他情况都可以使用get请求。</span><br><span class="line"></span><br><span class="line">- 不管你是get请求还是post请求，发送的请求数据格式是完全相同的，只不过位置不同，格式都是统一的：</span><br><span class="line"></span><br><span class="line">  - name=value&amp;name=value&amp;name=value&amp;name=value</span><br><span class="line">  - name是什么？</span><br><span class="line">    - 以form表单为例：form表单中input标签的name。</span><br><span class="line">  - value是什么？</span><br><span class="line">    - 以form表单为例：form表单中input标签的value。</span><br><span class="line"></span><br><span class="line">## 模板方法设计模式</span><br><span class="line"></span><br><span class="line">- 什么是设计模式？</span><br><span class="line">  - 某个问题的固定的解决方案。(可以被重复使用。)</span><br><span class="line">- 你知道哪些设计模式？</span><br><span class="line">  - GoF设计模式：</span><br><span class="line">    - 通常我们所说的23种设计模式。（Gang of Four：4人组提出的设计模式）</span><br><span class="line">    - 单例模式</span><br><span class="line">    - 工厂模式</span><br><span class="line">    - 代理模式</span><br><span class="line">    - 门面模式</span><br><span class="line">    - 责任链设计模式</span><br><span class="line">    - 观察者模式</span><br><span class="line">    - 模板方法设计模式</span><br><span class="line">    - .....</span><br><span class="line">  - JavaEE设计模式：</span><br><span class="line">    - DAO</span><br><span class="line">    - DTO</span><br><span class="line">    - VO</span><br><span class="line">    - PO</span><br><span class="line">    - pojo</span><br><span class="line">    - ....</span><br><span class="line">  - ....</span><br><span class="line">- 什么是模板方法设计模式？</span><br><span class="line">  - 在模板类的模板方法当中定义核心算法骨架，具体的实现步骤可以延迟到子类当中完成。</span><br><span class="line">- 模板类通常是一个抽象类，模板类当中的模板方法定义核心算法，这个方法通常是final的（但也可以不是final的）</span><br><span class="line">- 模板类当中的抽象方法就是不确定实现的方法，这个不确定怎么实现的事儿交给子类去做。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## HttpServlet源码分析</span><br><span class="line"></span><br><span class="line">- HttpServlet类是专门为HTTP协议准备的。比GenericServlet更加适合HTTP协议下的开发。</span><br><span class="line">- HttpServlet在哪个包下？</span><br><span class="line">  - jakarta.servlet.http.HttpServlet（不同的servlet api 包名不同）</span><br><span class="line">- 到目前为止我们接触了servlet规范中哪些接口？</span><br><span class="line">  - jakarta.servlet.Servlet  核心接口（接口）</span><br><span class="line">  - jakarta.servlet.ServletConfig Servlet配置信息接口（接口）</span><br><span class="line">  - jakarta.servlet.ServletContext Servlet上下文接口（接口）----&gt;xml文件</span><br><span class="line">  - jakarta.servlet.ServletRequest Servlet请求接口（接口） </span><br><span class="line">  - jakarta.servlet.ServletResponse Servlet响应接口（接口）</span><br><span class="line">  - jakarta.servlet.ServletException Servlet异常（类）</span><br><span class="line">  - jakarta.servlet.GenericServlet 标准通用的Servlet类（抽象类）</span><br><span class="line">- http包下都有哪些类和接口呢？jakarta.servlet.http.*;</span><br><span class="line">  - jakarta.servlet.http.HttpServlet （HTTP协议专用的Servlet类，抽象类）</span><br><span class="line">  - jakarta.servlet.http.HttpServletRequest （HTTP协议专用的请求对象）</span><br><span class="line">  - jakarta.servlet.http.HttpServletResponse （HTTP协议专用的响应对象）</span><br><span class="line">- HttpServletRequest对象中封装了什么信息？</span><br><span class="line">  - HttpServletRequest，简称request对象。</span><br><span class="line">  - HttpServletRequest中封装了请求协议的全部内容。</span><br><span class="line">  - Tomcat服务器（WEB服务器）将“请求协议”中的数据全部解析出来，然后将这些数据全部封装到request对象当中了。</span><br><span class="line">    - 即把请求行、请求头、请求体等这些数据进行封装。</span><br><span class="line">  - 也就是说，我们只要面向HttpServletRequest，就可以获取请求协议中的数据。</span><br><span class="line">- HttpServletResponse对象是专门用来响应HTTP协议到浏览器的。</span><br><span class="line">- 回忆Servlet生命周期？</span><br><span class="line">  - 用户第一次请求</span><br><span class="line">    - Tomcat服务器通过反射机制，调用无参数构造方法。创建Servlet对象。(web.xml文件中配置的Servlet类对应的对象。)</span><br><span class="line">    - Tomcat服务器调用Servlet对象的init方法完成初始化。</span><br><span class="line">    - Tomcat服务器调用Servlet对象的service方法处理请求。</span><br><span class="line">  - 用户第二次请求</span><br><span class="line">    - Tomcat服务器调用Servlet对象的service方法处理请求。</span><br><span class="line">  - 用户第三次请求</span><br><span class="line">    - Tomcat服务器调用Servlet对象的service方法处理请求。</span><br><span class="line">  - ....</span><br><span class="line">    - Tomcat服务器调用Servlet对象的service方法处理请求。</span><br><span class="line">  - 服务器关闭</span><br><span class="line">    - Tomcat服务器调用Servlet对象的destroy方法，做销毁之前的准备工作。</span><br><span class="line">    - Tomcat服务器销毁Servlet对象。</span><br><span class="line">- HttpServlet源码分析：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">// 用户第一次请求，创建HelloServlet对象的时候，会执行这个无参数构造方法。</span><br><span class="line">public HelloServlet() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //override 重写 doGet方法</span><br><span class="line">    //override 重写 doPost方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public abstract class GenericServlet implements Servlet, ServletConfig,</span><br><span class="line">        java.io.Serializable &#123;</span><br><span class="line">           </span><br><span class="line">// 用户第一次请求的时候，HelloServlet对象第一次被创建之后，这个init方法会执行。</span><br><span class="line">    public void init(ServletConfig config) throws ServletException &#123;</span><br><span class="line">        this.config = config;</span><br><span class="line">        this.init();</span><br><span class="line">    &#125;</span><br><span class="line">// 用户第一次请求的时候，带有参数的init(ServletConfig config)执行之后，会执行这个没有参数的init()</span><br><span class="line">public void init() throws ServletException &#123;</span><br><span class="line">        // NOOP by default</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// HttpServlet模板类。</span><br><span class="line">public abstract class HttpServlet extends GenericServlet &#123;</span><br><span class="line">    // 用户发送第一次请求的时候这个service会执行</span><br><span class="line">    // 用户发送第N次请求的时候，这个service方法还是会执行。</span><br><span class="line">    // 用户只要发送一次请求，这个service方法就会执行一次。</span><br><span class="line">    @Override</span><br><span class="line">    public void service(ServletRequest req, ServletResponse res)</span><br><span class="line">        throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // 将ServletRequest和ServletResponse向下转型为带有Http的HttpServletRequest和HttpServletResponse</span><br><span class="line">            request = (HttpServletRequest) req;</span><br><span class="line">            response = (HttpServletResponse) res;</span><br><span class="line">        &#125; catch (ClassCastException e) &#123;</span><br><span class="line">            throw new ServletException(lStrings.getString(&quot;http.non_http&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        // 调用重载的service方法。</span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 这个service方法的两个参数都是带有Http的。</span><br><span class="line">    // 这个service是一个模板方法。</span><br><span class="line">    // 在该方法中定义核心算法骨架，具体的实现步骤延迟到子类中去完成。</span><br><span class="line">    protected void service(HttpServletRequest req, HttpServletResponse resp)</span><br><span class="line">        throws ServletException, IOException &#123;</span><br><span class="line">        // 获取请求方式</span><br><span class="line">        // 这个请求方式最终可能是：&quot;&quot;</span><br><span class="line">        // 注意：request.getMethod()方法获取的是请求方式，可能是七种之一：</span><br><span class="line">        // GET POST PUT DELETE HEAD OPTIONS TRACE</span><br><span class="line">        String method = req.getMethod();</span><br><span class="line"></span><br><span class="line">        // 如果请求方式是GET请求，则执行doGet方法。</span><br><span class="line">        if (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            long lastModified = getLastModified(req);</span><br><span class="line">            if (lastModified == -1) &#123;</span><br><span class="line">                // servlet doesn&#x27;t support if-modified-since, no reason</span><br><span class="line">                // to go through further expensive logic</span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                long ifModifiedSince;</span><br><span class="line">                try &#123;</span><br><span class="line">                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                &#125; catch (IllegalArgumentException iae) &#123;</span><br><span class="line">                    // Invalid date header - proceed as if none was set</span><br><span class="line">                    ifModifiedSince = -1;</span><br><span class="line">                &#125;</span><br><span class="line">                if (ifModifiedSince &lt; (lastModified / 1000 * 1000)) &#123;</span><br><span class="line">                    // If the servlet mod time is later, call doGet()</span><br><span class="line">                    // Round down to the nearest second for a proper compare</span><br><span class="line">                    // A ifModifiedSince of -1 will always be less</span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; else if (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            long lastModified = getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; else if (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            // 如果请求方式是POST请求，则执行doPost方法。</span><br><span class="line">            doPost(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; else if (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; else if (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; else if (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; else if (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //</span><br><span class="line">            // Note that this means NO servlet supports whatever</span><br><span class="line">            // method was requested, anywhere on this server.</span><br><span class="line">            //</span><br><span class="line"></span><br><span class="line">            String errMsg = lStrings.getString(&quot;http.method_not_implemented&quot;);</span><br><span class="line">            Object[] errArgs = new Object[1];</span><br><span class="line">            errArgs[0] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp)</span><br><span class="line">        throws ServletException, IOException&#123;</span><br><span class="line">        // 报405错误</span><br><span class="line">        String msg = lStrings.getString(&quot;http.method_get_not_supported&quot;);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp)</span><br><span class="line">        throws ServletException, IOException &#123;</span><br><span class="line">        // 报405错误</span><br><span class="line">        String msg = lStrings.getString(&quot;http.method_post_not_supported&quot;);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">通过以上源代码分析：</span><br><span class="line">假设前端发送的请求是get请求，后端程序员重写的方法是doPost</span><br><span class="line">假设前端发送的请求是post请求，后端程序员重写的方法是doGet</span><br><span class="line">会发生什么呢？</span><br><span class="line">发生405这样的一个错误。</span><br><span class="line">405表示前端的错误，发送的请求方式不对。和服务器不一致。不是服务器需要的请求方式。</span><br><span class="line"></span><br><span class="line">通过以上源代码可以知道：只要HttpServlet类中的doGet方法或doPost方法执行了，必然405.</span><br><span class="line"></span><br><span class="line">怎么避免405的错误呢？</span><br><span class="line">后端重写了doGet方法，前端一定要发get请求。</span><br><span class="line">后端重写了doPost方法，前端一定要发post请求。</span><br><span class="line">这样可以避免405错误。</span><br><span class="line"></span><br><span class="line">这种前端到底需要发什么样的请求，其实应该后端说了算。后端让发什么方式，前端就得发什么方式。</span><br><span class="line"></span><br><span class="line">有的人，你会看到为了避免405错误，在Servlet类当中，将doGet和doPost方法都进行了重写。</span><br><span class="line">这样，确实可以避免405的发生，但是不建议，405错误还是有用的。该报错的时候就应该让他报错。</span><br><span class="line">如果你要是同时重写了doGet和doPost，那还不如你直接重写service方法好了。这样代码还能</span><br><span class="line">少写一点。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>我们编写的HelloServlet直接继承HttpServlet，直接重写HttpServlet类中的service()方法行吗？</p><ul><li>可以，只不过你享受不到405错误。享受不到HTTP协议专属的东西。</li></ul></li><li><p>到今天我们终于得到了最终的一个Servlet类的开发步骤：</p><ul><li>第一步：编写一个Servlet类，直接继承HttpServlet</li><li>第二步：重写doGet方法或者重写doPost方法，到底重写谁，javaweb程序员说了算。</li><li>第三步：将Servlet类配置到web.xml文件当中。</li><li>第四步：准备前端的页面（form表单），form表单中指定请求路径即可。</li></ul></li></ul><h2 id="关于一个web站点的欢迎页面"><a href="#关于一个web站点的欢迎页面" class="headerlink" title="关于一个web站点的欢迎页面"></a>关于一个web站点的欢迎页面</h2><ul><li><p>什么是一个web站点的欢迎页面？</p><ul><li>对于一个webapp来说，我们是可以设置它的欢迎页面的。</li><li>设置了欢迎页面之后，当你访问这个webapp的时候，或者访问这个web站点的时候，没有指定任何“资源路径”，这个时候会默认访问你的欢迎页面。</li><li>我们一般的访问方式是：<ul><li><a href="http://localhost:8080/servlet06/login.html">http://localhost:8080/servlet06/login.html</a> 这种方式是指定了要访问的就是login.html资源。</li></ul></li><li>如果我们访问的方式是：<ul><li><a href="http://localhost:8080/servlet06">http://localhost:8080/servlet06</a> 如果我们访问的就是这个站点，没有指定具体的资源路径。它默认会访问谁呢？</li><li>默认会访问你设置的欢迎页面。</li></ul></li></ul></li><li><p>怎么设置欢迎页面呢？</p><ul><li><p>第一步：我在IDEA工具的web目录下新建了一个文件login.html</p></li><li><p>第二步：在web.xml文件中进行了以下的配置</p><ul><li><pre><code class="xml">&lt;welcome-file-list&gt;        &lt;welcome-file&gt;login.html&lt;/welcome-file&gt;    &lt;/welcome-file-list&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - 注意：设置欢迎页面的时候，这个路径不需要以“/”开始。并且这个路径默认是从webapp的根下开始查找。</span><br><span class="line"></span><br><span class="line">  - 第三步：启动服务器，浏览器地址栏输入地址</span><br><span class="line"></span><br><span class="line">    - http://localhost:8080/servlet07</span><br><span class="line"></span><br><span class="line">- 如果在webapp的根下新建一个目录，目录中再给一个文件，那么这个欢迎页该如何设置呢？</span><br><span class="line"></span><br><span class="line">  - 在webapp根下新建page1</span><br><span class="line"></span><br><span class="line">  - 在page1下新建page2目录</span><br><span class="line"></span><br><span class="line">  - 在page2目录下新建page.html页面</span><br><span class="line"></span><br><span class="line">  - 在web.xml文件中应该这样配置</span><br><span class="line"></span><br><span class="line">    - ```</span><br><span class="line">      &lt;welcome-file-list&gt;</span><br><span class="line">          &lt;welcome-file&gt;page1/page2/page.html&lt;/welcome-file&gt;</span><br><span class="line">      &lt;/welcome-file-list&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>注意：路径不需要以“&#x2F;”开始，并且路径默认从webapp的根下开始找。</p></li></ul></li></ul></li><li><p>一个webapp是可以设置多个欢迎页面的</p><ul><li>&#96;&#96;&#96;xml<welcome-file-list>    <welcome-file>page1/page2/page.html</welcome-file>    <welcome-file>login.html</welcome-file></welcome-file-list><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 注意：越靠上的优先级越高。找不到的继续向下找。</span><br><span class="line"></span><br><span class="line">- 你有没有注意一件事：当我的文件名设置为index.html的时候，不需要在web.xml文件中进行配置欢迎页面。这是为什么？</span><br><span class="line"></span><br><span class="line">  - 这是因为小猫咪Tomcat服务器已经提前配置好了。</span><br><span class="line"></span><br><span class="line">  - 实际上配置欢迎页面有两个地方可以配置：</span><br><span class="line"></span><br><span class="line">    - 一个是在webapp内部的web.xml文件中。（在这个地方配置的属于局部配置）</span><br><span class="line"></span><br><span class="line">    - 一个是在CATALINA_HOME/conf/web.xml文件中进行配置。（在这个地方配置的属于全局配置）</span><br><span class="line"></span><br><span class="line">      - ```xml</span><br><span class="line">        &lt;welcome-file-list&gt;</span><br><span class="line">            &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</span><br><span class="line">            &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</span><br><span class="line">            &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">        &lt;/welcome-file-list&gt;</span><br></pre></td></tr></table></figure><ul><li><p>Tomcat服务器的全局欢迎页面是：index.html index.htm index.jsp。如果你一个web站点没有设置局部的欢迎页面，Tomcat服务器就会以index.html index.htm index.jsp作为一个web站点的欢迎页面。</p></li><li><p>注意原则：局部优先原则。（就近原则）</p></li></ul></li></ul></li><li><p>欢迎页可以是一个Servlet吗？</p><ul><li><p>当然可以。</p></li><li><p>你不要多想，欢迎页就是一个资源，既然是一个资源，那么可以是静态资源，也可以是动态资源。</p></li><li><p>静态资源：index.html welcome.html …..</p></li><li><p>动态资源：Servlet类。</p></li><li><p>步骤：</p><ul><li><p>第一步：写一个Servlet</p><ul><li>&#96;&#96;&#96;java<br>public class WelcomeServlet extends HttpServlet {<br>@Override<br>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<br>    response.setContentType(“text&#x2F;html”);<br>    PrintWriter out &#x3D; response.getWriter();<br>    out.print(“<h1>welcome to bjpowernode!</h1>“);<br>}<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">- 第二步：在web.xml文件中配置servlet</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">        &lt;servlet&gt;</span><br><span class="line">            &lt;servlet-name&gt;welcomeServlet&lt;/servlet-name&gt;</span><br><span class="line">            &lt;servlet-class&gt;com.bjpowernode.javaweb.servlet.WelcomeServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;/servlet&gt;</span><br><span class="line">        &lt;servlet-mapping&gt;</span><br><span class="line">            &lt;servlet-name&gt;welcomeServlet&lt;/servlet-name&gt;</span><br><span class="line">            &lt;url-pattern&gt;/fdsa/fds/a/fds/af/ds/af/dsafdsafdsa&lt;/url-pattern&gt;</span><br><span class="line">        &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>第三步：在web.xml文件中配置欢迎页</p><ul><li>&#96;&#96;&#96;xml<br><welcome-file-list><br>    <welcome-file>fdsa&#x2F;fds&#x2F;a&#x2F;fds&#x2F;af&#x2F;ds&#x2F;af&#x2F;dsafdsafdsa</welcome-file><br></welcome-file-list><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">## 关于WEB-INF目录</span><br><span class="line"></span><br><span class="line">- 在WEB-INF目录下新建了一个文件：welcome.html</span><br><span class="line">- 打开浏览器访问：http://localhost:8080/servlet07/WEB-INF/welcome.html 出现了404错误。</span><br><span class="line">- 注意：放在WEB-INF目录下的资源是受保护的。在浏览器上不能够通过路径直接访问。所以像HTML、CSS、JS、image等静态资源一定要放到WEB-INF目录之外。</span><br><span class="line"></span><br><span class="line">## HttpServletRequest接口详解</span><br><span class="line"></span><br><span class="line">- HttpServletRequest是一个接口，全限定名称：jakarta.servlet.http.HttpServletRequest</span><br><span class="line"></span><br><span class="line">- HttpServletRequest接口是Servlet规范中的一员。</span><br><span class="line"></span><br><span class="line">- HttpServletRequest接口的父接口：ServletRequest</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    public interface HttpServletRequest extends ServletRequest &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>HttpServletRequest接口的实现类谁写的? HttpServletRequest对象是谁给创建的？</p><ul><li><p>通过测试：org.apache.catalina.connector.RequestFacade 实现了 HttpServletRequest接口</p><ul><li><pre><code class="java">public class RequestFacade implements HttpServletRequest &#123;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 测试结果说明：Tomcat服务器（WEB服务器、WEB容器）实现了HttpServletRequest接口，还是说明了Tomcat服务器实现了Servlet规范。而对于我们javaweb程序员来说，实际上不需要关心这个，我们只需要面向接口编程即可。我们关心的是HttpServletRequest接口中有哪些方法，这些方法可以完成什么功能！！！！</span><br><span class="line"></span><br><span class="line">- HttpServletRequest对象中都有什么信息？都包装了什么信息？</span><br><span class="line"></span><br><span class="line">  - HttpServletRequest对象是Tomcat服务器负责创建的。这个对象中封装了什么信息？封装了==HTTP的请求协议。==</span><br><span class="line">  - 实际上是用户发送请求的时候，遵循了HTTP协议，发送的是HTTP的请求协议，Tomcat服务器将HTTP协议中的信息以及数据全部解析出来，然后Tomcat服务器把这些信息封装到HttpServletRequest对象当中，传给了我们javaweb程序员。</span><br><span class="line">  - javaweb程序员面向HttpServletRequest接口编程，调用方法就可以获取到请求的信息了。</span><br><span class="line"></span><br><span class="line">- request和response对象的生命周期？</span><br><span class="line"></span><br><span class="line">  - request对象和response对象，一个是请求对象，一个是响应对象。这两个对象只在当前请求中有效。</span><br><span class="line">  - 一次请求对应一个request。</span><br><span class="line">  - 两次请求则对应两个request。</span><br><span class="line">  - .....</span><br><span class="line"></span><br><span class="line">- HttpServletRequest接口中有哪些常用的方法？</span><br><span class="line"></span><br><span class="line">  - 怎么获取前端浏览器用户提交的数据？</span><br><span class="line"></span><br><span class="line">    - ```java</span><br><span class="line">      Map&lt;String,String[]&gt; getParameterMap() 这个是获取Map</span><br><span class="line">      Enumeration&lt;String&gt; getParameterNames() 这个是获取Map集合中所有的key</span><br><span class="line">      String[] getParameterValues(String name) 根据key获取Map集合的value ===》多选框</span><br><span class="line">      String getParameter(String name)  获取value这个一维数组当中的第一个元素。这个方法最常用。</span><br><span class="line">      // 以上的4个方法，和获取用户提交的数据有关系。</span><br></pre></td></tr></table></figure></code></pre></li><li><p>思考：如果是你，前端的form表单提交了数据之后，你准备怎么存储这些数据，你准备采用什么样的数据结构去存储这些数据呢？</p><ul><li><p>前端提交的数据格式：username&#x3D;abc&amp;userpwd&#x3D;111&amp;aihao&#x3D;s&amp;aihao&#x3D;d&amp;aihao&#x3D;tt</p></li><li><p>我会采用Map集合来存储：</p><ul><li>&#96;&#96;&#96;java<br>Map&lt;String,String&gt;<br>key存储String<br>value存储String<br>这种想法对吗？不对。<br>如果采用以上的数据结构存储会发现key重复的时候value覆盖。<br>&#x3D;&#x3D;map中不会存在相同的key&#x3D;&#x3D;<br>key         value<br>———————<br>username    abc<br>userpwd     111<br>aihao       s<br>aihao       d<br>aihao       tt<br>这样是不行的，因为map的key不能重复。<br>Map&lt;String, String[]&gt;<br>key存储String<br>value存储String[]<br>keyvalue<br>——————————-<br>username{“abc”}<br>userpwd{“111”}<br>aihao{“s”,”d”,”tt”}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    - 注意：前端表单提交数据的时候，假设提交了120这样的“数字”，其实是以字符串&quot;120&quot;的方式提交的，所以服务器端获取到的一定是一个字符串的&quot;120&quot;，而不是一个数字。（前端永远提交的是字符串，后端获取的也永远是字符串。）</span><br><span class="line">  </span><br><span class="line">- 手工开发一个webapp。测试HttpServletRequest接口中的相关方法。</span><br><span class="line"></span><br><span class="line">  - 先测试了4个常用的方法，获取请求参数的四个方法。</span><br><span class="line"></span><br><span class="line">    - ```java</span><br><span class="line">      Map&lt;String,String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">      Enumeration&lt;String&gt; names = request.getParameterNames();</span><br><span class="line">      String[] values = request.getParameterValues(&quot;name&quot;); ====</span><br><span class="line">      String value = request.getParameter(&quot;name&quot;);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>request对象实际上又称为“请求域”对象。</p><ul><li><p>应用域对象是什么？</p><ul><li><p><strong>ServletContext （Servlet上下文对象。）</strong></p></li><li><p>什么情况下会考虑向ServletContext这个应用域当中绑定数据呢？</p><ul><li>第一：所有用户共享的数据。</li><li>第二：这个共享的数据量很小。</li><li>第三：这个共享的数据很少的修改操作。</li><li>在以上三个条件都满足的情况下，使用这个应用域对象，可以大大提高我们程序执行效率。</li><li>实际上向应用域当中绑定数据，就相当于把数据放到了缓存（Cache）当中，然后用户访问的时候直接从缓存中取，减少IO的操作，大大提升系统的性能，所以缓存技术是提高系统性能的重要手段。</li></ul></li><li><p>你见过哪些缓存技术呢？</p><ul><li>字符串常量池</li><li>整数型常量池 [-128~127]，但凡是在这个范围当中的Integer对象不再创建新对象，直接从这个整数型常量池中获取。大大提升系统性能。</li><li>数据库连接池（提前创建好N个连接对象，将连接对象放到集合当中，使用连接对象的时候，直接从缓存中拿。省去了连接对象的创建过程。效率提升。）</li><li>线程池（Tomcat服务器就是支持多线程的。所谓的线程池就是提前先创建好N个线程对象，将线程对象存储到集合中，然后用户请求过来之后，直接从线程池中获取线程对象，直接拿来用。提升系统性能）</li><li>后期你还会学习更多的缓存技术，例如：redis、mongoDB…..</li></ul></li><li><p>ServletContext当中有三个操作域的方法：</p><ul><li><p>&#96;&#96;&#96;java<br>void setAttribute(String name, Object obj); &#x2F;&#x2F; 向域当中绑定数据。<br>Object getAttribute(String name); &#x2F;&#x2F; 从域当中根据name获取数据。<br>void removeAttribute(String name); &#x2F;&#x2F; 将域当中绑定的数据移除</p><p>&#x2F;&#x2F; 以上的操作类似于Map集合的操作。<br>Map&lt;String, Object&gt; map;<br>map.put(“name”, obj); &#x2F;&#x2F; 向map集合中放key和value<br>Object obj &#x3D; map.get(“name”); &#x2F;&#x2F; 通过map集合的key获取value<br>map.remove(“name”); &#x2F;&#x2F; 通过Map集合的key删除key和value这个键值对。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- “请求域”对象</span><br><span class="line">  </span><br><span class="line">  - “请求域”对象要比“应用域”对象范围小很多。生命周期短很多。请求域只在一次请求内有效。</span><br><span class="line">  </span><br><span class="line">  - 一个请求对象request对应一个请求域对象。一次请求结束之后，这个请求域就销毁了。</span><br><span class="line">  </span><br><span class="line">  - 一个请求对象对应一个请求</span><br><span class="line">  </span><br><span class="line">  - 请求域对象也有这三个方法：</span><br><span class="line">  </span><br><span class="line">    - ```java</span><br><span class="line">      void setAttribute(String name, Object obj); // 向域当中绑定数据。</span><br><span class="line">      Object getAttribute(String name); // 从域当中根据name获取数据。</span><br><span class="line">      void removeAttribute(String name); // 将域当中绑定的数据移除</span><br></pre></td></tr></table></figure></li></ul></li><li><p>请求域和应用域的选用原则？</p><ul><li>尽量使用小的域对象，因为小的域对象占用的资源较少。</li></ul></li></ul></li><li><p>跳转</p><ul><li><p>转发（一次请求）</p><ul><li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F; 第一步：获取请求转发器对象<br>RequestDispatcher dispatcher &#x3D; request.getRequestDispatcher(“&#x2F;b”);<br>&#x2F;&#x2F; 第二步：调用转发器的forward方法完成跳转&#x2F;转发<br>dispatcher.forward(request,response);</p><p>&#x2F;&#x2F; 第一步和第二步代码可以联合在一起。<br>request.getRequestDispatcher(“&#x2F;b”).forward(request,response);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 两个Servlet怎么共享数据？</span><br><span class="line"></span><br><span class="line">  - 将数据放到ServletContext应用域当中，当然是可以的，但是应用域范围太大，占用资源太多。不建议使用。</span><br><span class="line">  - 可以将数据放到request域当中，然后AServlet转发到BServlet，保证AServlet和BServlet在同一次请求当中，这样就可以做到两个Servlet，或者多个Servlet共享同一份数据。</span><br><span class="line"></span><br><span class="line">- 转发的下一个资源必须是一个Servlet吗？</span><br><span class="line"></span><br><span class="line">  - 不一定，只要是Tomcat服务器当中的合法资源，都是可以转发的。例如：html....</span><br><span class="line">  - 注意：转发的时候，路径的写法要注意，转发的路径以“/”开始，不加项目名。</span><br><span class="line"></span><br><span class="line">- 关于request对象中两个非常容易混淆的方法：</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    </span><br><span class="line">    // uri?username=zhangsan&amp;userpwd=123&amp;sex=1</span><br><span class="line">    String username = request.getParameter(&quot;username&quot;);</span><br><span class="line">    </span><br><span class="line">    // 之前一定是执行过：request.setAttribute(&quot;name&quot;, new Object())</span><br><span class="line">    Object obj = request.getAttribute(&quot;name&quot;);</span><br><span class="line">    </span><br><span class="line">    // 以上两个方法的区别是什么？</span><br><span class="line">    // 第一个方法：获取的是用户在浏览器上提交的数据。</span><br><span class="line">    // 第二个方法：获取的是请求域当中绑定的数据。</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>HttpServletRequest接口的其他常用方法：</p><ul><li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F; 获取客户端的IP地址<br>String remoteAddr &#x3D; request.getRemoteAddr();</p><p>&#x2F;&#x2F; get请求在请求行上提交数据。<br>&#x2F;&#x2F; post请求在请求体中提交数据。<br>&#x2F;&#x2F; 设置请求体的字符集。（显然这个方法是处理POST请求的乱码问题。这种方式并不能解决get请求的乱码问题。）<br>&#x2F;&#x2F; Tomcat10之后，request请求体当中的字符集默认就是UTF-8，不需要设置字符集，不会出现乱码问题。<br>&#x2F;&#x2F; Tomcat9前（包括9在内），如果前端请求体提交的是中文，后端获取之后出现乱码，怎么解决这个乱码？执行以下代码。<br>request.setCharacterEncoding(“UTF-8”);</p><p>&#x2F;&#x2F; 在Tomcat9之前（包括9），响应中文也是有乱码的，怎么解决这个响应的乱码？<br>response.setContentType(“text&#x2F;html;charset&#x3D;UTF-8”);<br>&#x2F;&#x2F; 在Tomcat10之后，包括10在内，响应中文的时候就不在出现乱码问题了。以上代码就不需要设置UTF-8了。</p><p>&#x2F;&#x2F; 注意一个细节<br>&#x2F;&#x2F; 在Tomcat10包括10在内之后的版本，中文将不再出现乱码。（这也体现了中文地位的提升。）</p><p>&#x2F;&#x2F; get请求乱码问题怎么解决？<br>&#x2F;&#x2F; get请求发送的时候，数据是在请求行上提交的，不是在请求体当中提交的。<br>&#x2F;&#x2F; get请求乱码怎么解决<br>&#x2F;&#x2F; 方案：修改CATALINA_HOME&#x2F;conf&#x2F;server.xml配置文件</p><Connector uriencoding="UTF-8">// 注意：从Tomcat8之后，URIEncoding的默认值就是UTF-8，所以GET请求也没有乱码问题了。    <p>&#x2F;&#x2F; 获取应用的根路径<br>String contextPath &#x3D; request.getContextPath();</p><p>&#x2F;&#x2F; 获取请求方式<br>String method &#x3D; request.getMethod();</p><p>&#x2F;&#x2F; 获取请求的URI<br>String uri &#x3D; request.getRequestURI();  &#x2F;&#x2F; &#x2F;aaa&#x2F;testRequest</p><p>&#x2F;&#x2F; 获取servlet path<br>String servletPath &#x3D; request.getServletPath(); &#x2F;&#x2F;   &#x2F;testRequest</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 使用纯Servlet做一个单表的CRUD操作</span><br><span class="line"></span><br><span class="line">- 使用纯粹的Servlet完成单表【对部门的】的增删改查操作。（B/S结构的。）</span><br><span class="line"></span><br><span class="line">- 实现步骤</span><br><span class="line"></span><br><span class="line">  - 第一步：准备一张数据库表。（sql脚本）</span><br><span class="line"></span><br><span class="line">    - ```sql</span><br><span class="line">      # 部门表</span><br><span class="line">      drop table if exists dept;</span><br><span class="line">      create table dept(</span><br><span class="line">      deptno int primary key,</span><br><span class="line">          dname varchar(255),</span><br><span class="line">          loc varchar(255)</span><br><span class="line">      );</span><br><span class="line">      insert into dept(deptno, dname, loc) values(10, &#x27;XiaoShouBu&#x27;, &#x27;BEIJING&#x27;);</span><br><span class="line">      insert into dept(deptno, dname, loc) values(20, &#x27;YanFaBu&#x27;, &#x27;SHANGHAI&#x27;);</span><br><span class="line">      insert into dept(deptno, dname, loc) values(30, &#x27;JiShuBu&#x27;, &#x27;GUANGZHOU&#x27;);</span><br><span class="line">      insert into dept(deptno, dname, loc) values(40, &#x27;MeiTiBu&#x27;, &#x27;SHENZHEN&#x27;);</span><br><span class="line">      commit;</span><br><span class="line">      select * from dept;</span><br></pre></td></tr></table></figure></Connector></li></ul></li></ul></li></ul></li><li><p>第二步：准备一套HTML页面（项目原型）【前端开发工具使用HBuilder】</p><ul><li>把HTML页面准备好</li><li>然后将HTML页面中的链接都能够跑通。（页面流转没问题。）</li><li>应该设计哪些页面呢？<ul><li>欢迎页面：index.html</li><li>列表页面：list.html（以列表页面为核心，展开其他操作。）</li><li>新增页面：add.html</li><li>修改页面：edit.html</li><li>详情页面：detail.html</li></ul></li></ul></li><li><p>第三步：分析我们这个系统包括哪些功能？</p><ul><li>什么叫做一个功能呢？<ul><li>只要 这个操作连接了数据库，就表示一个独立的功能。</li></ul></li><li>包括哪些功能？<ul><li>查看部门列表</li><li>新增部门</li><li>删除部门</li><li>查看部门详细信息</li><li>跳转到修改页面</li><li>修改部门</li></ul></li></ul></li><li><p>第四步：在IDEA当中搭建开发环境</p><ul><li>创建一个webapp（给这个webapp添加servlet-api.jar和jsp-api.jar到classpath当中。）</li><li>向webapp中添加连接数据库的jar包（mysql驱动）<ul><li>必须在WEB-INF目录下新建lib目录，然后将mysql的驱动jar包拷贝到这个lib目录下。这个目录名必须叫做lib，全部小写的。</li></ul></li><li>JDBC的工具类</li><li>将所有HTML页面拷贝到web目录下。</li></ul></li><li><p>第五步：实现第一个功能：查看部门列表</p><ul><li><p>我们应该怎么去实现一个功能呢？</p><ul><li>建议：你可以从后端往前端一步一步写。也可以从前端一步一步往后端写。都可以。但是千万要记住不要想起来什么写什么。你写代码的过程最好是程序的执行过程。也就是说：程序执行到哪里，你就写哪里。这样一个顺序流下来之后，基本上不会出现什么错误、意外。</li><li>从哪里开始？<ul><li>假设从前端开始，那么一定是从用户点击按钮那里开始的。</li></ul></li></ul></li><li><p>第一：先修改前端页面的超链接，因为用户先点击的就是这个超链接。</p><ul><li>&#96;&#96;&#96;html<br><a href="/oa/dept/list">查看部门列表</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 第二：编写web.xml文件</span><br><span class="line"></span><br><span class="line">  - ```xml</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;list&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.bjpowernode.oa.web.action.DeptListServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;list&lt;/servlet-name&gt;</span><br><span class="line">        &lt;!--web.xml文件中的这个路径也是以“/”开始的，但是不需要加项目名--&gt;</span><br><span class="line">        &lt;url-pattern&gt;/dept/list&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>第三：编写DeptListServlet类继承HttpServlet类。然后重写doGet方法。</p><ul><li><p>&#96;&#96;&#96;java<br>package com.bjpowernode.oa.web.action;</p><p>import jakarta.servlet.ServletException;<br>import jakarta.servlet.http.HttpServlet;<br>import jakarta.servlet.http.HttpServletRequest;<br>import jakarta.servlet.http.HttpServletResponse;</p><p>import java.io.IOException;</p><p>public class DeptListServlet extends HttpServlet {<br>@Override<br>protected void doGet(HttpServletRequest request, HttpServletResponse response)<br>        throws ServletException, IOException {<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 第四：在DeptListServlet类的doGet方法中连接数据库，查询所有的部门，动态的展示部门列表页面.</span><br><span class="line"></span><br><span class="line">  - 分析list.html页面中哪部分是固定死的，哪部分是需要动态展示的。</span><br><span class="line"></span><br><span class="line">  - list.html页面中的内容所有的双引号要替换成单引号，因为out.print(&quot;&quot;)这里有一个双引号，容易冲突。</span><br><span class="line"></span><br><span class="line">  - 现在写完这个功能之后，你会有一种感觉，感觉开发很繁琐，只使用servlet写代码太繁琐了。</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    while(rs.next())&#123;</span><br><span class="line">        String deptno = rs.getString(&quot;a&quot;);</span><br><span class="line">        String dname = rs.getString(&quot;dname&quot;);</span><br><span class="line">        String loc = rs.getString(&quot;loc&quot;);</span><br><span class="line">    </span><br><span class="line">        out.print(&quot;&lt;tr&gt;&quot;);</span><br><span class="line">        out.print(&quot;&lt;td&gt;&quot;+(++i)+&quot;&lt;/td&gt;&quot;);</span><br><span class="line">        out.print(&quot;&lt;td&gt;&quot;+deptno+&quot;&lt;/td&gt;&quot;);</span><br><span class="line">        out.print(&quot;&lt;td&gt;&quot;+dname+&quot;&lt;/td&gt;&quot;);</span><br><span class="line">        out.print(&quot;&lt;td&gt;&quot;);</span><br><span class="line">        out.print(&quot;&lt;a href=&#x27;&#x27;&gt;删除&lt;/a&gt;&quot;);</span><br><span class="line">        out.print(&quot;&lt;a href=&#x27;edit.html&#x27;&gt;修改&lt;/a&gt;&quot;);</span><br><span class="line">        out.print(&quot;&lt;a href=&#x27;detail.html&#x27;&gt;详情&lt;/a&gt;&quot;);</span><br><span class="line">        out.print(&quot;&lt;/td&gt;&quot;);</span><br><span class="line">        out.print(&quot;&lt;/tr&gt;&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>第六步：查看部门详情。</p><ul><li><p>建议：从前端往后端一步一步实现。首先要考虑的是，用户点击的是什么？用户点击的东西在哪里？</p><ul><li><p>一定要先找到用户点的“详情”在哪里。找了半天，终于在后端的java程序中找到了</p><ul><li><pre><code class="html">&lt;a href=&#39;写一个路径&#39;&gt;详情&lt;/a&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 详情  是需要连接数据库的，所以这个超链接点击之后也是需要执行一段java代码的。所以要将这个超链接的路径修改一下。</span><br><span class="line"></span><br><span class="line">  - 注意：修改路径之后，这个路径是需要加项目名的。&quot;/oa/dept/detail&quot;</span><br><span class="line"></span><br><span class="line">- 技巧：</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    out.print(&quot;&lt;a href=&#x27;&quot;+contextPath+&quot;/dept/detail?deptno=&quot;+deptno+&quot;&#x27;&gt;详情&lt;/a&gt;&quot;);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>重点：向服务器提交数据的格式：uri?name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value</p></li><li><p>这里的问号，必须是英文的问号。不能中文的问号。</p></li></ul></li></ul></li><li><p>解决404的问题。写web.xml文件。</p><ul><li>&#96;&#96;&#96;xml<servlet>    <servlet-name>detail</servlet-name>    <servlet-class>com.bjpowernode.oa.web.action.DeptDetailServlet</servlet-class></servlet><servlet-mapping>    <servlet-name>detail</servlet-name>    <url-pattern>/dept/detail</url-pattern></servlet-mapping><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 编写一个类：DeptDetailServlet继承HttpServlet，重写doGet方法。</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    package com.bjpowernode.oa.web.action;</span><br><span class="line">    </span><br><span class="line">    import jakarta.servlet.ServletException;</span><br><span class="line">    import jakarta.servlet.http.HttpServlet;</span><br><span class="line">    import jakarta.servlet.http.HttpServletRequest;</span><br><span class="line">    import jakarta.servlet.http.HttpServletResponse;</span><br><span class="line">    </span><br><span class="line">    import java.io.IOException;</span><br><span class="line">    </span><br><span class="line">    public class DeptDetailServlet extends HttpServlet &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">                throws ServletException, IOException &#123;</span><br><span class="line">            //中文思路（思路来源于：你要做什么？目标：查看部门详细信息。）</span><br><span class="line">            // 第一步：获取部门编号</span><br><span class="line">            // 第二步：根据部门编号查询数据库，获取该部门编号对应的部门信息。</span><br><span class="line">            // 第三步：将部门信息响应到浏览器上。（显示一个详情。）</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在doGet方法当中：连接数据库，根据部门编号查询该部门的信息。动态展示部门详情页。</p></li></ul></li><li><p>第七步：删除部门</p><ul><li><p>怎么开始？从哪里开始？从前端页面开始，用户点击删除按钮的时候，应该提示用户是否删除。因为删除这个动作是比较危险的。任何系统在进行删除操作之前，是必须要提示用户的，因为这个删除的动作有可能是用户误操作。（在前端页面上写JS代码，来提示用户是否删除。）</p><ul><li><pre><code class="html">&lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;del(30)&quot; &gt;删除&lt;/a&gt;&lt;script type=&quot;text/javascript&quot;&gt;    function del(dno)&#123;        if(window.confirm(&quot;亲，删了不可恢复哦！&quot;))&#123;            document.location.href = &quot;/oa/dept/delete?deptno=&quot; + dno;        &#125;    &#125;&lt;/script&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- 以上的前端程序要写到后端的java代码当中：</span><br><span class="line">  </span><br><span class="line">  - DeptListServlet类的doGet方法当中，使用out.print()方法，将以上的前端代码输出到浏览器上。</span><br><span class="line">  </span><br><span class="line">- 解决404的问题：</span><br><span class="line">  </span><br><span class="line">  - http://localhost:8080/oa/dept/delete?deptno=30 </span><br><span class="line">  </span><br><span class="line">  - web.xml文件</span><br><span class="line">  </span><br><span class="line">    - ```xml</span><br><span class="line">      &lt;servlet&gt;</span><br><span class="line">          &lt;servlet-name&gt;delete&lt;/servlet-name&gt;</span><br><span class="line">          &lt;servlet-class&gt;com.bjpowernode.oa.web.action.DeptDelServlet&lt;/servlet-class&gt;</span><br><span class="line">      &lt;/servlet&gt;</span><br><span class="line">      &lt;servlet-mapping&gt;</span><br><span class="line">          &lt;servlet-name&gt;delete&lt;/servlet-name&gt;</span><br><span class="line">          &lt;url-pattern&gt;/dept/delete&lt;/url-pattern&gt;</span><br><span class="line">      &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>编写DeptDelServlet继承HttpServlet，重写doGet方法。</p></li><li><p>&#96;&#96;&#96;java<br>package com.bjpowernode.oa.web.action;</p><p>import jakarta.servlet.ServletException;<br>import jakarta.servlet.http.HttpServlet;<br>import jakarta.servlet.http.HttpServletRequest;<br>import jakarta.servlet.http.HttpServletResponse;</p><p>import java.io.IOException;</p><p>public class DeptDelServlet extends HttpServlet {<br>@Override<br>protected void doGet(HttpServletRequest request, HttpServletResponse response)<br>        throws ServletException, IOException {<br>    &#x2F;&#x2F; 根据部门编号，删除部门。<br><br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- 删除成功或者失败的时候的一个处理（这里我们选择了转发，并没有使用重定向机制。）</span><br><span class="line">  </span><br><span class="line">  - ```java</span><br><span class="line">    // 判断删除成功了还是失败了。</span><br><span class="line">    if (count == 1) &#123;</span><br><span class="line">        //删除成功</span><br><span class="line">        //仍然跳转到部门列表页面</span><br><span class="line">        //部门列表页面的显示需要执行另一个Servlet。怎么办？转发。</span><br><span class="line">        request.getRequestDispatcher(&quot;/dept/list&quot;).forward(request, response);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        // 删除失败</span><br><span class="line">        request.getRequestDispatcher(&quot;/error.html&quot;).forward(request, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>第八步：新增部门</p><ul><li>注意：最后保存成功之后，转发到 &#x2F;dept&#x2F;list 的时候，会出现405，为什么？<ul><li>第一：保存用的是post请求。底层要执行doPost方法。</li><li>第二：转发是一次请求，之前是post，之后还是post，因为它是一次请求。</li><li>第三：&#x2F;dept&#x2F;list Servlet当中只有一个doGet方法。</li><li>怎么解决？两种方案<ul><li>第一种：在&#x2F;dept&#x2F;list Servlet中添加doPost方法，然后在doPost方法中调用doGet。</li><li>第二种：重定向。</li></ul></li></ul></li></ul></li><li><p>第九步：跳转到修改部门的页面</p></li><li><p>第十步：修改部门</p></li></ul></li></ul><h2 id="在一个web应用中应该如何完成资源的跳转"><a href="#在一个web应用中应该如何完成资源的跳转" class="headerlink" title="在一个web应用中应该如何完成资源的跳转"></a>在一个web应用中应该如何完成资源的跳转</h2><ul><li><p>在一个web应用中通过两种方式，可以完成资源的跳转：</p><ul><li>第一种方式：转发</li><li>第二种方式：重定向</li></ul></li><li><p>转发和重定向有什么区别？</p><ul><li><p>代码上有什么区别？</p><ul><li><p>转发</p><ul><li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F; 获取请求转发器对象<br>RequestDispatcher dispatcher &#x3D; request.getRequestDispatcher(“&#x2F;dept&#x2F;list”);<br>&#x2F;&#x2F; 调用请求转发器对象的forward方法完成转发<br>dispatcher.forward(request, response);</p><p>&#x2F;&#x2F; 合并一行代码<br>request.getRequestDispatcher(“&#x2F;dept&#x2F;list”).forward(request, response);<br>&#x2F;&#x2F; 转发的时候是一次请求，不管你转发了多少次。都是一次请求。<br>&#x2F;&#x2F; AServlet转发到BServlet，再转发到CServlet，再转发到DServlet，不管转发了多少次，都在同一个request当中。<br>&#x2F;&#x2F; 这是因为调用forward方法的时候，会将当前的request和response对象传递给下一个Servlet。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 重定向</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    // 注意：路径上要加一个项目名。为什么？</span><br><span class="line">    // 浏览器发送请求，请求路径上是需要添加项目名的。</span><br><span class="line">    // 以下这一行代码会将请求路径“/oa/dept/list”发送给浏览器</span><br><span class="line">    // 浏览器会自发的向服务器发送一次全新的请求：/oa/dept/list</span><br><span class="line">    response.sendRedirect(&quot;/oa/dept/list&quot;);</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>形式上有什么区别？</p><ul><li>转发（一次请求）<ul><li>在浏览器地址栏上发送的请求是：<a href="http://localhost:8080/servlet10/a">http://localhost:8080/servlet10/a</a> ，最终请求结束之后，浏览器地址栏上的地址还是这个。没变。</li></ul></li><li>重定向（两次请求）<ul><li>在浏览器地址栏上发送的请求是：<a href="http://localhost:8080/servlet10/a">http://localhost:8080/servlet10/a</a> ，最终在浏览器地址栏上显示的地址是：<a href="http://localhost:8080/servlet10/b">http://localhost:8080/servlet10/b</a></li></ul></li></ul></li><li><p>转发和重定向的本质区别？</p><ul><li>转发：是由WEB服务器来控制的。A资源跳转到B资源，这个跳转动作是Tomcat服务器内部完成的。</li><li>重定向：是浏览器完成的。具体跳转到哪个资源，是浏览器说了算。</li></ul></li><li><p>使用一个例子去描述这个转发和重定向</p><ul><li>借钱（转发：发送了一次请求）<ul><li>杜老师没钱了，找张三借钱，其实张三没有钱，但是张三够义气，张三自己找李四借了钱，然后张三把这个钱给了杜老师，杜老师不知道这个钱是李四的，杜老师只求了一个人。杜老师以为这个钱就是张三的。</li></ul></li><li>借钱（重定向：发送了两次请求）<ul><li>杜老师没钱了，找张三借钱，张三没有钱，张三有一个好哥们，叫李四，李四是个富二代，于是张三将李四的家庭住址告诉了杜老师，杜老师按照这个地址去找到李四，然后从李四那里借了钱。显然杜老师在这个过程中，求了两个人。并且杜老师知道最终这个钱是李四借给俺的。</li></ul></li></ul></li></ul></li><li><p>转发和重定向应该如何选择？什么时候使用转发，什么时候使用重定向？</p><ul><li>如果在上一个Servlet当中向request域当中绑定了数据，希望从下一个Servlet当中把request域里面的数据取出来，使用转发机制。</li><li>剩下所有的请求均使用重定向。（重定向使用较多。）</li></ul></li><li><p>跳转的下一个资源有没有要求呢？必须是一个Servlet吗？</p><ul><li>不一定，跳转的资源只要是服务器内部合法的资源即可。包括：Servlet、JSP、HTML…..</li></ul></li><li><p>转发会存在浏览器的刷新问题。</p></li></ul><h2 id="将oa项目中的资源跳转修改为合适的跳转方式"><a href="#将oa项目中的资源跳转修改为合适的跳转方式" class="headerlink" title="将oa项目中的资源跳转修改为合适的跳转方式"></a>将oa项目中的资源跳转修改为合适的跳转方式</h2><ul><li>删除之后，重定向</li><li>修改之后，重定向</li><li>保存之后，重定向</li><li>重定向：<ul><li>成功</li><li>失败</li></ul></li></ul><h2 id="Servlet注解，简化配置"><a href="#Servlet注解，简化配置" class="headerlink" title="Servlet注解，简化配置"></a>Servlet注解，简化配置</h2><ul><li><p>分析oa项目中的web.xml文件</p><ul><li>现在只是一个单标的CRUD，没有复杂的业务逻辑，很简单的一丢丢功能。web.xml文件中就有如此多的配置信息。如果采用这种方式，对于一个大的项目来说，这样的话web.xml文件会非常庞大，有可能最终会达到几十兆。</li><li>在web.xml文件中进行servlet信息的配置，显然开发效率比较低，每一个都需要配置一下。</li><li>而且在web.xml文件中的配置是很少被修改的，所以这种配置信息能不能直接写到java类当中呢？可以的。</li></ul></li><li><p>Servlet3.0版本之后，推出了各种Servlet基于注解式开发。优点是什么？</p><ul><li>开发效率高，不需要编写大量的配置信息。直接在java类上使用注解进行标注。</li><li>web.xml文件体积变小了。</li></ul></li><li><p>并不是说注解有了之后，web.xml文件就不需要了：</p><ul><li>有一些需要变化的信息，还是要配置到web.xml文件中。一般都是 注解+配置文件 的开发模式。</li><li>一些不会经常变化修改的配置建议使用注解。一些可能会被修改的建议写到配置文件中。</li></ul></li><li><p>我们的第一个注解：</p><ul><li>&#96;&#96;&#96;<br>jakarta.servlet.annotation.WebServlet<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 在Servlet类上使用：@WebServlet，WebServlet注解中有哪些属性呢？</span><br><span class="line"></span><br><span class="line">    - name属性：用来指定Servlet的名字。等同于：&lt;servlet-name&gt;</span><br><span class="line">    - urlPatterns属性：用来指定Servlet的映射路径。可以指定多个字符串。&lt;url-pattern&gt;</span><br><span class="line">    - loadOnStartUp属性：用来指定在服务器启动阶段是否加载该Servlet。等同于：&lt;load-on-startup&gt;</span><br><span class="line">    - value属性：当注解的属性名是value的时候，使用注解的时候，value属性名是可以省略的。</span><br><span class="line">    - 注意：不是必须将所有属性都写上，只需要提供需要的。（需要什么用什么。）</span><br><span class="line">    - 注意：属性是一个数组，如果数组中只有一个元素，使用该注解的时候，属性值的大括号可以省略。</span><br><span class="line"></span><br><span class="line">- 注解对象的使用格式：</span><br><span class="line"></span><br><span class="line">  - @注解名称(属性名=属性值, 属性名=属性值, 属性名=属性值....)</span><br><span class="line"></span><br><span class="line">## 使用模板方法设计模式优化oa项目</span><br><span class="line"></span><br><span class="line">- 上面的注解解决了配置文件的问题。但是现在的oa项目仍然存在一个比较臃肿的问题。</span><br><span class="line">  - 一个单标的CRUD，就写了6个Servlet。如果一个复杂的业务系统，这种开发方式，显然会导致类爆炸。（类的数量太大。）</span><br><span class="line">  - 怎么解决这个类爆炸问题？可以使用模板方法设计模式。</span><br><span class="line">- 怎么解决类爆炸问题？</span><br><span class="line">  - 以前的设计是一个请求一个Servlet类。1000个请求对应1000个Servlet类。导致类爆炸。</span><br><span class="line">  - 可以这样做：一个请求对应一个方法。一个业务对应一个Servlet类。</span><br><span class="line">  - 处理部门相关业务的对应一个DeptServlet。处理用户相关业务的对应一个UserServlet。处理银行卡卡片业务对应一个CardServlet。</span><br><span class="line"></span><br><span class="line">## 分析使用纯粹Servlet开发web应用的缺陷</span><br><span class="line"></span><br><span class="line">- 在Servlet当中编写HTML/CSS/JavaScript等前端代码。存在什么问题？</span><br><span class="line">  - java程序中编写前端代码，编写难度大。麻烦。</span><br><span class="line">  - java程序中编写前端代码，显然程序的耦合度非常高。</span><br><span class="line">  - java程序中编写前端代码，代码非常不美观。</span><br><span class="line">  - java程序中编写前端代码，维护成本太高。（非常难于维护）</span><br><span class="line">    - 修改小小的一个前端代码，只要有改动，就需要重新编译java代码，生成新的class文件，打一个新的war包，重新发布。</span><br><span class="line">- 思考一下，如果是你的话，你准备怎么解决这个问题？</span><br><span class="line">  - 思路很重要。使用什么样的思路去做、去解决这个问题</span><br><span class="line">    - 上面的那个Servlet（Java程序）能不能不写了，让机器自动生成。我们程序员只需要写这个Servlet程序中的“前端的那段代码”，然后让机器将我们写的“前端代码”自动翻译生成“Servlet这种java程序”。然后机器再自动将“java”程序编译生成&quot;class&quot;文件。然后再使用JVM调用这个class中的方法。</span><br><span class="line"></span><br><span class="line">## 关于B/S结构系统的会话机制（session机制）</span><br><span class="line"></span><br><span class="line">- 什么是会话？</span><br><span class="line">  - 会话对应的英语单词：session</span><br><span class="line">  - 用户打开浏览器，进行一系列操作，然后最终将浏览器关闭，这个整个过程叫做：一次会话。会话在服务器端也有一个对应的java对象，这个java对象叫做：session。</span><br><span class="line">  - 什么是一次请求：用户在浏览器上点击了一下，然后到页面停下来，可以粗略认为是一次请求。请求对应的服务器端的java对象是：request。</span><br><span class="line">  - 一个会话当中包含多次请求。（一次会话对应N次请求。）</span><br><span class="line">  </span><br><span class="line">- 在java的servlet规范当中，session对应的类名：HttpSession（jarkata.servlet.http.HttpSession）</span><br><span class="line"></span><br><span class="line">- session机制属于B/S结构的一部分。如果使用php语言开发WEB项目，同样也是有session这种机制的。session机制实际上是一个规范。然后不同的语言对这种会话机制都有实现。</span><br><span class="line"></span><br><span class="line">- session对象最主要的作用是：保存会话状态。（用户登录成功了，这是一种登录成功的状态，你怎么把登录成功的状态一直保存下来呢？使用session对象可以保留会话状态。）</span><br><span class="line"></span><br><span class="line">- 为什么需要session对象来保存会话状态呢？</span><br><span class="line">  - 因为HTTP协议是一种无状态协议。</span><br><span class="line">  - 什么是无状态：请求的时候，B和S是连接的，但是请求结束之后，连接就断了。为什么要这么做？HTTP协议为什么要设计成这样？因为这样的无状态协议，可以降低服务器的压力。请求的瞬间是连接的，请求结束之后，连接断开，这样服务器压力小。</span><br><span class="line">  - 只要B和S断开了，那么关闭浏览器这个动作，服务器知道吗？</span><br><span class="line">    - 不知道。服务器是不知道浏览器关闭的。</span><br><span class="line">  </span><br><span class="line">- 张三打开一个浏览器A，李四打开一个浏览器B，访问服务器之后，在服务器端会生成：</span><br><span class="line">  - 张三专属的session对象</span><br><span class="line">  - 李四专属的session对象</span><br><span class="line">  </span><br><span class="line">- 为什么不使用request对象保存会话状态？为什么不使用ServletContext对象保存会话状态？</span><br><span class="line">  - request.setAttribute()存，request.getAttribute()取，ServletContext也有这个方法。request是请求域。ServletContext是应用域。</span><br><span class="line">  - request是一次请求一个对象。</span><br><span class="line">  - ServletContext对象是服务器启动的时候创建，服务器关闭的时候销毁，这个ServletContext对象只有一个。</span><br><span class="line">  - ServletContext对象的域太大。</span><br><span class="line">  - request请求域（HttpServletRequest）、session会话域（HttpSession）、application域（ServletContext）</span><br><span class="line">  - request &lt; session &lt; application</span><br><span class="line">  </span><br><span class="line">- 思考一下：session对象的实现原理。</span><br><span class="line">  - HttpSession session = request.getSession();</span><br><span class="line">  - 这行代码很神奇。张三访问的时候获取的session对象就是张三的。李四访问的时候获取的session对象就是李四的。</span><br><span class="line">  </span><br><span class="line">- ==**session的实现原理：**==</span><br><span class="line"></span><br><span class="line">  - JSESSIONID=xxxxxx  这个是以Cookie的形式保存在==浏览器的内存==中的。浏览器只要关闭。这个cookie就没有了。</span><br><span class="line">  - session列表是一个Map，map的key是sessionid，map的value是session对象。</span><br><span class="line">  - 用户第一次请求，服务器生成session对象，同时生成id，将id发送给浏览器。</span><br><span class="line">  - 用户第二次请求，自动将浏览器内存中的id发送给服务器，服务器根据id查找session对象。</span><br><span class="line">  - 关闭浏览器，内存消失，cookie消失，sessionid消失，会话等同于结束。</span><br><span class="line"></span><br><span class="line">- ==Cookie禁用了，session还能找到吗？==----&gt;面试题 </span><br><span class="line"></span><br><span class="line">  - cookie禁用是什么意思？服务器正常发送cookie给浏览器，但是浏览器不要了。拒收了。并不是服务器不发了。</span><br><span class="line">  - 找不到了。每一次请求都会获取到新的session对象。</span><br><span class="line">  - cookie禁用了，session机制还能实现吗？----&gt; URL重写机制</span><br><span class="line">    - 可以。需要使用URL重写机制。</span><br><span class="line">    - http://localhost:8080/servlet12/test/session;jsessionid=19D1C99560DCBF84839FA43D58F56E16</span><br><span class="line">    - URL重写机制会提高开发者的成本。开发人员在编写任何请求路径的时候，后面都要添加一个sessionid，给开发带来了很大的难度，很大的成本。所以大部分的网站都是这样设计的：你要是禁用cookie，你就别用了。</span><br><span class="line"></span><br><span class="line">- 总结一下到目前位置我们所了解的域对象：</span><br><span class="line"></span><br><span class="line">  - request（对应的类名：HttpServletRequest）</span><br><span class="line">    - 请求域（请求级别的）---&gt; 每次请求都会产生一个新的。</span><br><span class="line">  - session（对应的类名：HttpSession）</span><br><span class="line">    - 会话域（用户级别的）</span><br><span class="line">  - application（对应的类名：ServletContext）</span><br><span class="line">    - 应用域（项目级别的，所有用户共享的。）</span><br><span class="line">  - 这三个域对象的大小关系</span><br><span class="line">    - request &lt; session &lt; application</span><br><span class="line">  - 他们三个域对象都有以下三个公共的方法：</span><br><span class="line">    - setAttribute（向域当中绑定数据）</span><br><span class="line">    - getAttribute（从域当中获取数据）</span><br><span class="line">    - removeAttribute（删除域当中的数据）</span><br><span class="line">  - 使用原则：尽量使用小的域。尽量小，减少服务器压力。</span><br><span class="line"></span><br><span class="line">- session掌握之后，我们怎么解决oa项目中的登录问题，怎么能让登录起作用。</span><br><span class="line"></span><br><span class="line">  - 登录成功之后，可以将用户的登录信息存储到session当中。也就是说session中如果有用户的信息就代表用户登录成功了。session中没有用户信息，表示用户没有登录过。则跳转到登录页面。</span><br><span class="line"></span><br><span class="line">- 销毁session对象：</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    session.invalidate();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-Session的实现原理-—-gt-我想要一直拿到想要的篮球。-1-在篮球上做标记（web服务器）-2-在脑子中记忆该标记（浏览器）"><a href="#1-Session的实现原理-—-gt-我想要一直拿到想要的篮球。-1-在篮球上做标记（web服务器）-2-在脑子中记忆该标记（浏览器）" class="headerlink" title="1.Session的实现原理 —&gt; 我想要一直拿到想要的篮球。 1.在篮球上做标记（web服务器） 2.在脑子中记忆该标记（浏览器）"></a>1.Session的实现原理 —&gt; 我想要一直拿到想要的篮球。 1.在篮球上做标记（web服务器） 2.在脑子中记忆该标记（浏览器）</h3><p>一次会话:</p><p>​从 Session 对象的创建到销毁</p><p>A1:为什么关闭浏览器，会话会结束？</p><p> 关闭浏览器之后，浏览器中保存的 Session 消失，下次重新打开浏览器之后，浏览器缓存中没有这个 seesion Map 表的 sessionid，自然就找逼到服务器中对应的 session 对象， session 找不到就等同于会话结束。</p><p>A2：session 对象什么时候被销毁</p><ol><li>超时销毁</li><li>手动销毁</li></ol><p><img src="/2022/11/27/JavaWeb/Servlet-JSP-%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/image-20230112210658235.png" alt="image-20230112210658235"></p><h3 id="2-Session-的配置"><a href="#2-Session-的配置" class="headerlink" title="2.Session 的配置"></a>2.Session 的配置</h3><p>web.xml文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timout</span>&gt;</span>xxx（minutes）<span class="tag">&lt;/<span class="name">session-timout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="３．Session对象的获取"><a href="#３．Session对象的获取" class="headerlink" title="３．Ｓｅｓｓｉｏｎ对象的获取"></a>３．Ｓｅｓｓｉｏｎ对象的获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">如果有则返回，没有则创建</span><br><span class="line"><span class="number">2.</span><span class="type">HttpSession</span> <span class="variable">session1</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>);</span><br><span class="line">有则返回，没有就返回 <span class="literal">null</span></span><br></pre></td></tr></table></figure><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ul><li><p>session的实现原理中，每一个session对象都会关联一个sessionid，例如：</p><ul><li>JSESSIONID&#x3D;41C481F0224664BDB28E95081D23D5B8</li><li>以上的这个<strong>键值对数据</strong>其实就是cookie对象。</li><li>对于session关联的cookie来说，这个cookie是被保存在浏览器的“运行内存”当中。</li><li>只要浏览器不关闭，用户再次发送请求的时候，会自动将运行内存中的cookie发送给服务器。</li><li>例如，这个Cookie: JSESSIONID&#x3D;41C481F0224664BDB28E95081D23D5B8就会再次发送给服务器。</li><li>服务器就是根据41C481F0224664BDB28E95081D23D5B8这个值来找到对应的session对象的。</li></ul></li><li><p>cookie怎么生成？cookie保存在什么地方？cookie有啥用？浏览器什么时候会发送cookie，发送哪些cookie给服务器？？？？？？？</p></li><li><p>cookie最终是保存在浏览器客户端上的。</p><ul><li>可以保存在运行内存中。（浏览器只要关闭cookie就消失了。）</li><li>也可以保存在硬盘文件中。（永久保存。）</li></ul></li><li><p>cookie有啥用呢？</p><ul><li>cookie和session机制其实都是为了保存会话的状态。</li><li>cookie是将会话的状态保存在浏览器客户端上。（cookie数据存储在浏览器客户端上的。）</li><li>session是将会话的状态保存在服务器端上。（session对象是存储在服务器上。）</li><li>为什么要有cookie和session机制呢？因为HTTP协议是无状态 无连接协议。</li></ul></li><li><p>cookie的经典案例</p><ul><li>京东商城，在未登录的情况下，向购物车中放几件商品。然后关闭商城，再次打开浏览器，访问京东商城的时候，购物车中的商品还在，这是怎么做的？我没有登录，为什么购物车中还有商品呢？<ul><li>将购物车中的商品编号放到cookie当中，cookie保存在硬盘文件当中。这样即使关闭浏览器。硬盘上的cookie还在。下一次再打开京东商城的时候，查看购物车的时候，会自动读取本地硬盘中存储的cookie，拿到商品编号，动态展示购物车中的商品。<ul><li>京东存储购物车中商品的cookie可能是这样的：productIds&#x3D;xxxxx,yyyy,zzz,kkkk</li><li>注意：cookie如果清除掉，购物车中的商品就消失了。</li></ul></li></ul></li><li>126邮箱中有一个功能：十天内免登录<ul><li>这个功能也是需要cookie来实现的。</li><li>怎么实现的呢？<ul><li>用户输入正确的用户名和密码，并且同时选择十天内免登录。登录成功后。浏览器客户端会保存一个cookie，这个cookie中保存了用户名和密码等信息，这个cookie是保存在硬盘文件当中的，十天有效。在十天内用户再次访问126的时候，浏览器自动提交126的关联的cookie给服务器，服务器接收到cookie之后，获取用户名和密码，验证，通过之后，自动登录成功。</li><li>怎么让cookie失效？<ul><li>十天过后自动失效。</li><li>或者改密码。</li><li>或者在客户端浏览器上清除cookie。</li></ul></li></ul></li></ul></li></ul></li><li><p>cookie机制和session机制其实都不属于java中的机制，实际上cookie机制和session机制都是HTTP协议的一部分。php开发中也有cookie和session机制，只要是你是做web开发，不管是什么编程语言，cookie和session机制都是需要的。</p></li><li><p>HTTP协议中规定：任何一个cookie都是由name和value组成的。name和value都是字符串类型的。</p></li><li><p>在java的servlet中，对cookie提供了哪些支持呢？</p><ul><li>提供了一个Cookie类来专门表示cookie数据。jakarta.servlet.http.Cookie;</li><li>java程序怎么把cookie数据发送给浏览器呢？response.addCookie(cookie);</li></ul></li><li><p>在HTTP协议中是这样规定的：当浏览器发送请求的时候，会自动携带该path下的cookie数据给服务器。（URL。）</p></li><li><p>关于cookie的有效时间</p><ul><li>怎么用java设置cookie的有效时间<ul><li>cookie.setMaxAge(60 * 60); 设置cookie在一小时之后失效。</li></ul></li><li>没有设置有效时间：默认保存在浏览器的运行内存中，浏览器关闭则cookie消失。</li><li>只要设置cookie的有效时间 &gt; 0，这个cookie一定会存储到硬盘文件当中。</li><li>设置cookie的有效时间 &#x3D; 0 呢？<ul><li>cookie被删除，同名cookie被删除。</li></ul></li><li>设置cookie的有效时间 &lt; 0 呢？<ul><li>保存在运行内存中。和不设置一样。</li></ul></li></ul></li><li><p>关于cookie的path，cookie关联的路径：</p><ul><li>假设现在发送的请求路径是“<a href="http://localhost:8080/servlet13/cookie/generate%E2%80%9D%E7%94%9F%E6%88%90%E7%9A%84cookie%EF%BC%8C%E5%A6%82%E6%9E%9Ccookie%E6%B2%A1%E6%9C%89%E8%AE%BE%E7%BD%AEpath%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84path%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">http://localhost:8080/servlet13/cookie/generate”生成的cookie，如果cookie没有设置path，默认的path是什么？</a><ul><li>默认的path是：<a href="http://localhost:8080/servlet13/cookie">http://localhost:8080/servlet13/cookie</a> 以及它的子路径。</li><li>也就是说，以后只要浏览器的请求路径是<a href="http://localhost:8080/servlet13/cookie">http://localhost:8080/servlet13/cookie</a> 这个路径以及这个路径下的子路径，cookie都会被发送到服务器。</li></ul></li><li>手动设置cookie的path<ul><li>cookie.setPath(“&#x2F;servlet13”); 表示只要是这个servlet13项目的请求路径，都会提交这个cookie给服务器。</li></ul></li></ul></li><li><p>浏览器发送cookie给服务器了，服务器中的java程序怎么接收？</p><ul><li><p>&#96;&#96;&#96;java<br>Cookie[] cookies &#x3D; request.getCookies(); &#x2F;&#x2F; 这个方法可能返回null<br>if(cookies !&#x3D; null){<br>for(Cookie cookie : cookies){<br>    &#x2F;&#x2F; 获取cookie的name<br>    String name &#x3D; cookie.getName();<br>    &#x2F;&#x2F; 获取cookie的value<br>    String value &#x3D; cookie.getValue();<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 使用cookie实现一下十天内免登录功能。</span><br><span class="line"></span><br><span class="line">  - 先实现登录功能</span><br><span class="line">    - 登录成功</span><br><span class="line">      - 跳转到部门列表页面</span><br><span class="line">    - 登录失败</span><br><span class="line">      - 跳转到登录失败页面</span><br><span class="line">  - 修改前端页面</span><br><span class="line">    - 在登录页面给一个复选框，复选框后面给一句话：十天内免登录。</span><br><span class="line">    - 用户选择了复选框：表示要支持十天内免登录。</span><br><span class="line">    - 用户没有选择复选框：表示用户不想使用十天内免登录功能。</span><br><span class="line">  - 修改Servlet中的login方法</span><br><span class="line">    - 如果用户登录成功了，并且用户登录时选择了十天内免登录功能，这个时候应该在Servlet的login方法中创建cookie，用来存储用户名和密码，并且设置路径，设置有效期，将cookie响应给浏览器。（浏览器将其自动保存在硬盘文件当中10天）</span><br><span class="line">  - 用户再次访问该网站的时候，访问这个网站的首页的时候，有两个走向:</span><br><span class="line">    - 要么跳转到部门列表页面</span><br><span class="line">    - 要么跳转到登录页面</span><br><span class="line">    - 以上分别有两个走向，这显然是需要编写java程序进行控制的。</span><br><span class="line"></span><br><span class="line"># JSP</span><br><span class="line"></span><br><span class="line">&gt;  JSP 具有九个内置对象，包括 Session 等，在进入 jsp 页面时，会自动创建一个 session 对象</span><br><span class="line"></span><br><span class="line">- 我的第一个JSP程序：</span><br><span class="line">  </span><br><span class="line">  - 在WEB-INF目录之外创建一个index.jsp文件，然后这个文件中没有任何内容。</span><br><span class="line">  </span><br><span class="line">- 将上面的项目部署之后，启动服务器，打开浏览器，访问以下地址：</span><br><span class="line">  - http://localhost:8080/jsp/index.jsp 展现在大家面前的是一个空白。</span><br><span class="line">  - 实际上访问以上的这个：index.jsp，底层执行的是：index_jsp.class 这个java程序。</span><br><span class="line">  - 这个index.jsp会被tomcat翻译生成index_jsp.java文件，然后tomcat服务器又会将index_jsp.java编译生成index_jsp.class文件</span><br><span class="line">  - 访问index.jsp，实际上执行的是index_jsp.class中的方法。</span><br><span class="line">  </span><br><span class="line">- JSP实际上就是一个Servlet。</span><br><span class="line">  - index.jsp访问的时候，会自动翻译生成index_jsp.java，会自动编译生成index_jsp.class，那么index_jsp 这就是一个类。</span><br><span class="line">  - index_jsp 类继承 HttpJspBase，而HttpJspBase类继承的是HttpServlet。所以index_jsp类就是一个Servlet类。</span><br><span class="line">  - jsp的生命周期和Servlet的生命周期完全相同。完全就是一个东西。没有任何区别。</span><br><span class="line">  - jsp和servlet一样，都是单例的。（假单例。）</span><br><span class="line">  </span><br><span class="line">- jsp文件第一次访问的时候是比较慢的，为什么？</span><br><span class="line">  - 为什么大部分的运维人员在给客户演示项目的时候，为什么提前先把所有的jsp文件先访问一遍。</span><br><span class="line">  - 第一次比较麻烦：</span><br><span class="line">    - 要把jsp文件翻译生成java源文件</span><br><span class="line">    - java源文件要编译生成class字节码文件</span><br><span class="line">    - 然后通过class去创建servlet对象</span><br><span class="line">    - 然后调用servlet对象的init方法</span><br><span class="line">    - 最后调用servlet对象的service方法。</span><br><span class="line">  - 第二次就比较快了，为什么？</span><br><span class="line">    - 因为第二次直接调用单例servlet对象的service方法即可。</span><br><span class="line">  </span><br><span class="line">- JSP是什么？</span><br><span class="line">  - JSP是java程序。（JSP本质还是一个Servlet）</span><br><span class="line">  - JSP是：JavaServer Pages的缩写。（基于Java语言实现的服务器端的页面。）</span><br><span class="line">  - Servlet是JavaEE的13个子规范之一，那么JSP也是JavaEE的13个子规范之一。</span><br><span class="line">  - JSP是一套规范。所有的web容器/web服务器都是遵循这套规范的，都是按照这套规范进行的“翻译”</span><br><span class="line">  - 每一个web容器/web服务器都会内置一个JSP翻译引擎。</span><br><span class="line">  </span><br><span class="line">- 对JSP进行错误调试的时候，还是要直接打开JSP文件对应的java文件，检查java代码。</span><br><span class="line"></span><br><span class="line">- 开发JSP的最高境界：</span><br><span class="line">  </span><br><span class="line">  - 眼前是JSP代码，但是脑袋中呈现的是java代码。</span><br><span class="line">  </span><br><span class="line">- JSP既然本质上是一个Servlet，那么JSP和Servlet到底有什么区别呢？</span><br><span class="line">  - 职责不同：</span><br><span class="line">    - Servlet的职责是什么：收集数据。（Servlet的强项是逻辑处理，业务处理，然后链接数据库，获取/收集数据。）</span><br><span class="line">    - JSP的职责是什么：展示数据。（JSP的强项是做数据的展示）</span><br><span class="line">  </span><br><span class="line">- JSP的基础语法</span><br><span class="line">  - 在jsp文件中直接编写文字，都会自动被翻译到哪里？</span><br><span class="line">    - 翻译到servlet类的service方法的out.write(&quot;翻译到这里&quot;)，直接翻译到双引号里，被java程序当做普通字符串打印输出到浏览器。</span><br><span class="line">    - 在JSP中编写的HTML CSS JS代码，这些代码对于JSP来说只是一个普通的字符串。但是JSP把这个普通的字符串一旦输出到浏览器，浏览器就会对HTML CSS JS进行解释执行。展现一个效果。</span><br><span class="line">  - JSP的page指令（这个指令后面再详细说，这里先解决一下中文乱码问题），解决响应时的中文乱码问题：</span><br><span class="line">    - 通过page指令来设置响应的内容类型，在内容类型的最后面添加：charset=UTF-8</span><br><span class="line">      - &lt;%@page contentType=&quot;text/html;charset=UTF-8&quot;%&gt;，表示响应的内容类型是text/html，采用的字符集UTF-8</span><br><span class="line">      - &lt;%@page import=&quot;java.util.List,java.util.ArrayList&quot;%&gt;</span><br><span class="line">  - 怎么在JSP中编写Java程序：</span><br><span class="line">    - &lt;% java语句; %&gt;</span><br><span class="line">      - 在这个符号当中编写的被视为java程序，被翻译到Servlet类的service方法内部。</span><br><span class="line">      - 这里你要细心点，你要思考，在&lt;% %&gt;这个符号里面写java代码的时候，你要时时刻刻的记住你正在“方法体”当中写代码，方法体中可以写什么，不可以写什么，你心里是否明白呢？</span><br><span class="line">      - 在service方法当中编写的代码是有顺序的，方法体当中的代码要遵循自上而下的顺序依次逐行执行。</span><br><span class="line">      - service方法当中不能写静态代码块，不能写方法，不能定义成员变量。。。。。。</span><br><span class="line">      - 在同一个JSP当中 &lt;%%&gt; 这个符号可以出现多个。</span><br><span class="line">    - &lt;%! %&gt;</span><br><span class="line">      - 在这个符号当中编写的java程序会自动翻译到service方法之外。</span><br><span class="line">      - 这个语法很少用，为什么？不建议使用，因为在service方法外面写静态变量和实例变量，都会存在线程安全问题，因为JSP就是servlet，servlet是单例的，多线程并发的环境下，这个静态变量和实例变量一旦有修改操作，必然会存在线程安全问题。</span><br><span class="line">    - JSP的输出语句</span><br><span class="line">      - 怎么向浏览器上输出一个java变量。</span><br><span class="line">      - &lt;% String name = “jack”;  out.write(&quot;name = &quot; + name); %&gt;</span><br><span class="line">      - 注意：以上代码中的out是JSP的九大内置对象之一。可以直接拿来用。当然，必须只能在service方法内部使用。</span><br><span class="line">      - 如果向浏览器上输出的内容中没有“java代码”，例如输出的字符串是一个固定的字符串，可以直接在jsp中编写，不需要写到&lt;%%&gt; 这里。</span><br><span class="line">      - 如果输出的内容中含有“java代码”，这个时候可以使用以下语法格式：</span><br><span class="line">        - &lt;%= %&gt; 注意：在=的后面编写要输出的内容。</span><br><span class="line">        - &lt;%= %&gt; 这个符号会被翻译到哪里？最终翻译成什么？ </span><br><span class="line">          - 翻译成了这个java代码：   out.print();</span><br><span class="line">          - 翻译到service方法当中了。</span><br><span class="line">        - 什么时候使用&lt;%=%&gt; 输出呢？输出的内容中含有java的变量，输出的内容是一个动态的内容，不是一个死的字符串。如果输出的是一个固定的字符串，直接在JSP文件中编写即可。</span><br><span class="line">  - 在JSP中如何编写JSP的专业注释</span><br><span class="line">    - &lt;%--JSP的专业注释，不会被翻译到java源代码当中。--%&gt;</span><br><span class="line">    - &lt;!--这种注释属于HTML的注释，这个注释信息仍然会被翻译到java源代码当中，不建议。--&gt;</span><br><span class="line">  - JSP基础语法总结：</span><br><span class="line">    - JSP中直接编写普通字符串</span><br><span class="line">      - 翻译到service方法的out.write(&quot;这里&quot;)</span><br><span class="line">    - &lt;%%&gt;</span><br><span class="line">      - 翻译到service方法体内部，里面是一条一条的java语句。</span><br><span class="line">    - &lt;%! %&gt;</span><br><span class="line">      - 翻译到service方法之外。</span><br><span class="line">    - &lt;%= %&gt;</span><br><span class="line">      - 翻译到service方法体内部，翻译为：out.print();</span><br><span class="line">    - &lt;%@page  contentType=&quot;text/html;charset=UTF-8&quot;%&gt;</span><br><span class="line">      - page指令，通过contentType属性用来设置响应的内容类型。</span><br><span class="line">  - 使用Servlet + JSP完成oa项目的改造。</span><br><span class="line">    - 使用Servlet处理业务，收集数据。 使用JSP展示数据。</span><br><span class="line"></span><br><span class="line">    - 将之前原型中的html文件，全部修改为jsp，然后在jsp文件头部添加page指令（指定contentType防止中文乱码），将所有的JSP直接拷贝到web目录下。</span><br><span class="line"></span><br><span class="line">    - 完成所有页面的正常流转。（页面仍然能够正常的跳转。修改超链接的请求路径。）</span><br><span class="line">      </span><br><span class="line">      - &lt;%=request.getContextPath() %&gt;  在JSP中动态的获取应用的根路径。</span><br><span class="line">      </span><br><span class="line">    - Servlet中连接数据库，查询所有的部门，遍历结果集。</span><br><span class="line">      - 遍历结果集的过程中，取出部门编号、部门名、位置等信息，封装成java对象。</span><br><span class="line">      - 将java对象存放到List集合中。</span><br><span class="line">      - 将List集合存储到request域当中。</span><br><span class="line">      - 转发forward到jsp。</span><br><span class="line">      </span><br><span class="line">    - 在JSP中：</span><br><span class="line">      - 从request域当中取出List集合。</span><br><span class="line">      - 遍历List集合，取出每个部门对象。动态生成tr。</span><br><span class="line">      </span><br><span class="line">    - 思考一个问题：如果我只用JSP这一个技术，能不能开发web应用？</span><br><span class="line"></span><br><span class="line">      - 当然可以使用JSP来完成所有的功能。因为JSP就是Servlet，在JSP的&lt;%%&gt;里面写的代码就是在service方法当中的，所以在&lt;%%&gt;当中完全可以编写JDBC代码，连接数据库，查询数据，也可以在这个方法当中编写业务逻辑代码，处理业务，都是可以的，所以使用单独的JSP开发web应用完全没问题。</span><br><span class="line">      - 虽然JSP一个技术就可以完成web应用，但是不建议，还是建议采用servlet + jsp的方式进行开发。这样都能将各自的优点发挥出来。JSP就是做数据展示。Servlet就是做数据的收集。（JSP中编写的Java代码越少越好。）一定要职责分明。</span><br><span class="line"></span><br><span class="line">    - JSP文件的扩展名必须是xxx.jsp吗？</span><br><span class="line"></span><br><span class="line">      - jsp文件的扩展名是可以配置的。不是固定的。</span><br><span class="line"></span><br><span class="line">      - 在CATALINA_HOME/conf/web.xml，在这个文件当中配置jsp文件的扩展名。</span><br><span class="line"></span><br><span class="line">      - ```xml</span><br><span class="line">        &lt;servlet-mapping&gt;</span><br><span class="line">            &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class="line">            &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</span><br><span class="line">            &lt;url-pattern&gt;*.jspx&lt;/url-pattern&gt;</span><br><span class="line">        &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><ul><li><p>xxx.jsp文件对于小猫咪来说，只是一个普通的文本文件，web容器会将xxx.jsp文件最终生成java程序，最终调用的是java对象相关的方法，真正执行的时候，和jsp文件就没有关系了。</p></li><li><p>小窍门：JSP如果看不懂，建议把jsp翻译成java代码，就能看懂了。</p></li><li><p>同学问：包名bean是什么意思？</p><ul><li>javabean（java的logo是一杯冒着热气的咖啡。javabean被翻译为：咖啡豆）</li><li>java是一杯咖啡，咖啡又是由一粒一粒的咖啡豆研磨而成。</li><li>整个java程序中有很多bean的存在。由很多bean组成。</li><li>什么是javabean？实际上javabean你可以理解为符合某种规范的java类，比如：<ul><li>有无参数构造方法</li><li>属性私有化</li><li>对外提供公开的set和get方法</li><li>实现java.io.Serializable接口</li><li>重写toString</li><li>重写hashCode+equals</li><li>….</li></ul></li><li>javabean其实就是java中的实体类。负责数据的封装。</li><li>由于javabean符合javabean规范，具有更强的通用性。</li></ul></li><li><p>完成剩下所有功能的改造。</p></li></ul></li></ul></li><li><p>当前的oa应用存在的问题：</p><ul><li>任何一个用户都可以访问这个系统，都可以对这个系统当中的数据进行增删改这些危险的操作。我只想让合法的用户去使用这个系统，不合法的用户不能访问这个系统，怎么办？<ul><li>加一个登录功能。登录成功的可以访问该系统，登录失败不能访问。</li></ul></li><li>实现登录功能：<ul><li>步骤1：数据库当中添加一个用户表：t_user<ul><li>t_user表当中存储的是用户的登录信息，最基本的也包括：登录的用户名和登录的密码。</li><li>密码一般在数据库表当中存储的是密文。一般不以明文的形式存储。（这里先使用明文方式。）</li><li>向t_user表中插入数据。</li></ul></li><li>步骤2：再实现一个登录页面。<ul><li>登录页面上应该有一个登录的表单。有用户名和密码输入的框。</li><li>用户点击登录，提交表单，提交用户名和密码。form是post方式提交。</li></ul></li><li>步骤3：后台要有一个对应的Servlet来处理登录的请求。<ul><li>登录成功：跳转到部门列表页面。</li><li>登录失败：跳转到失败的页面。</li></ul></li><li>步骤4：再提供一个登录失败的页面。</li></ul></li></ul></li><li><p>登录功能实现了，目前存在的最大的问题：</p><ul><li>这个登录功能目前只是一个摆设，没有任何作用。只要用户知道后端的请求路径，照样可以在不登录的情况下访问。</li><li>这个登录没有真正起到拦截的作用。怎么解决？</li></ul></li><li><p>JSP的指令</p><ul><li><p>指令的作用：指导JSP的翻译引擎如何工作（指导当前的JSP翻译引擎如何翻译JSP文件。）</p></li><li><p>指令包括哪些呢？</p><ul><li>include指令：包含指令，在JSP中完成静态包含，很少用了。（这里不讲）</li><li>taglib指令：引入标签库的指令。这个到JJSTL标签库的时候再学习。现在先不管。</li><li>page指令：目前重点学习一个page指令。</li></ul></li><li><p>指令的使用语法是什么？</p><ul><li>&lt;%@指令名  属性名&#x3D;属性值  属性名&#x3D;属性值  属性名&#x3D;属性值….%&gt;</li></ul></li><li><p>关于page指令当中都有哪些常用的属性呢？</p><ul><li><pre><code>&lt;%@page session=&quot;true|false&quot; %&gt;true表示启用JSP的内置对象session，表示一定启动session对象。没有session对象会创建。如果没有设置，默认值就是session=&quot;true&quot;session=&quot;false&quot; 表示不启动内置对象session。当前JSP页面中无法使用内置对象session。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  &lt;%@page contentType=&quot;text/json&quot; %&gt;</span><br><span class="line">  contentType属性用来设置响应的内容类型</span><br><span class="line">  但同时也可以设置字符集。</span><br><span class="line">  &lt;%@page contentType=&quot;text/json;charset=UTF-8&quot; %&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code>&lt;%@page pageEncoding=&quot;UTF-8&quot; %&gt;pageEncoding=&quot;UTF-8&quot; 表示设置响应时采用的字符集。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  &lt;%@page import=&quot;java.util.List, java.util.Date, java.util.ArrayList&quot; %&gt;</span><br><span class="line">  &lt;%@page import=&quot;java.util.*&quot; %&gt;</span><br><span class="line">  import语句，导包。</span><br></pre></td></tr></table></figure></code></pre></li><li><p>&#96;&#96;&#96;<br>&lt;%@page errorPage&#x3D;”&#x2F;error.jsp” %&gt;<br>当前页面出现异常之后，跳转到error.jsp页面。<br>errorPage属性用来指定出错之后的跳转位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  &lt;%@page isErrorPage=&quot;true&quot; %&gt;</span><br><span class="line">  表示启用JSP九大内置对象之一：exception</span><br><span class="line">  默认值是false。</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>JSP的九大内置对象</p><ul><li><p>jakarta.servlet.jsp.PageContext pageContext       页面作用域</p></li><li><p>jakarta.servlet.http.HttpServletRequest request 请求作用域</p></li><li><p>jakarta.servlet.http.HttpSession session  会话作用域</p></li><li><p>jakarta.servlet.ServletContext application 应用作用域</p><ul><li>pageContext &lt; request &lt; session &lt; application</li><li>以上四个作用域都有：setAttribute、getAttribute、removeAttribute方法。</li><li>以上作用域的使用原则：尽可能使用小的域。</li></ul></li><li><p>java.lang.Throwable exception   </p></li><li><p>jakarta.servlet.ServletConfig config</p></li><li><p>java.lang.Object page  （其实是this，当前的servlet对象）</p></li><li><p>jakarta.servlet.jsp.JspWriter out  （负责输出）</p></li><li><p>jakarta.servlet.http.HttpServletResponse response （负责响应）</p></li></ul></li></ul><h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><ul><li><p>EL表达式是干什么用的？</p><ul><li>Expression Language（表达式语言）</li><li>EL表达式可以代替JSP中的java代码，让JSP文件中的程序看起来更加整洁，美观。</li><li>JSP中夹杂着各种java代码，例如&lt;% java代码 %&gt;、&lt;%&#x3D;%&gt;等，导致JSP文件很混乱，不好看，不好维护。所以才有了后期的EL表达式。</li><li>EL表达式可以算是JSP语法的一部分。EL表达式归属于JSP。</li></ul></li><li><p>EL表达式出现在JSP中主要是：</p><ul><li>从某个作用域中取数据，然后将其转换成字符串，然后将其输出到浏览器。这就是EL表达式的功效。三大功效：<ul><li>第一功效：从某个域中取数据。<ul><li>四个域：<ul><li>pageContext</li><li>request</li><li>session</li><li>application</li></ul></li></ul></li><li>第二功效：将取出的数据转成字符串。<ul><li>如果是一个java对象，也会自动调用java对象的toString方法将其转换成字符串。</li></ul></li><li>第三功效：将字符串输出到浏览器。<ul><li>和这个一样：&lt;%&#x3D; %&gt;，将其输出到浏览器。</li></ul></li></ul></li></ul></li><li><p>EL表达式很好用，基本的语法格式：</p><ul><li>${表达式}</li></ul></li><li><p>EL表达式的使用：</p><ul><li><pre><code class="jsp">&lt;%    // 创建User对象    User user = new User();    user.setUsername(&quot;jackson&quot;);    user.setPassword(&quot;1234&quot;);    user.setAge(50);    // 将User对象存储到某个域当中。一定要存，因为EL表达式只能从某个范围中取数据。    // 数据是必须存储到四大范围之一的。    request.setAttribute(&quot;userObj&quot;, user);%&gt;&lt;%--使用EL表达式取--%&gt;$&#123;这个位置写什么？？？？这里写的一定是存储到域对象当中时的name&#125;要这样写：$&#123;userObj&#125;等同于java代码：&lt;%=request.getAttribute(&quot;userObj&quot;)%&gt;你不要这样写：$&#123;&quot;userObj&quot;&#125;面试题：    $&#123;abc&#125; 和 $&#123;&quot;abc&quot;&#125;的区别是什么？        $&#123;abc&#125;表示从某个域中取出数据，并且被取的这个数据的name是&quot;abc&quot;，之前一定有这样的代码: 域.setAttribute(&quot;abc&quot;, 对象);        $&#123;&quot;abc&quot;&#125; 表示直接将&quot;abc&quot;当做普通字符串输出到浏览器。不会从某个域中取数据了。$&#123;userObj&#125; 底层是怎么做的？从域中取数据，取出user对象，然后调用user对象的toString方法，转换成字符串，输出到浏览器。&lt;%--如果想输出对象的属性值，怎么办？--%&gt;$&#123;userObj.username&#125; 使用这个语法的前提是：User对象有getUsername()方法。$&#123;userObj.password&#125; 使用这个语法的前提是：User对象有getPassword()方法。$&#123;userObj.age&#125; 使用这个语法的前提是：User对象有getAge()方法。$&#123;userObj.email&#125; 使用这个语法的前提是：User对象有getEmail()方法。EL表达式中的. 这个语法，实际上调用了底层的getXxx()方法。注意：如果没有对应的get方法，则出现异常。报500错误。$&#123;userObj.addr222.zipcode&#125;以上EL表达式对应的java代码：user.getAddr222().getZipcode()<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- EL表达式优先从小范围中读取数据。</span><br><span class="line"></span><br><span class="line">  - pageContext &lt; request &lt; session &lt; application</span><br><span class="line"></span><br><span class="line">- EL表达式中有四个隐含的隐式的范围：</span><br><span class="line"></span><br><span class="line">  - pageScope 对应的是 pageContext范围。</span><br><span class="line">  - requestScope 对应的是 request范围。</span><br><span class="line">  - sessionScope 对应的是 session范围。</span><br><span class="line">  - applicationScope 对应的是 application范围。</span><br><span class="line"></span><br><span class="line">- EL表达式对null进行了预处理。如果是null，则向浏览器输出一个空字符串。</span><br><span class="line"></span><br><span class="line">- EL表达式取数据的时候有两种形式：</span><br><span class="line"></span><br><span class="line">  - 第一种：.  （大部分使用这种方式）</span><br><span class="line">  - 第二种：[ ] （如果存储到域的时候，这个name中含有特殊字符，可以使用 [ ]）</span><br><span class="line">    - request.setAttribute(&quot;abc.def&quot;, &quot;zhangsan&quot;);</span><br><span class="line">    - $&#123;requestScope.abc.def&#125; 这样是无法取值的。</span><br><span class="line">    - 应该这样：$&#123;requestScope[&quot;abc.def&quot;]&#125;</span><br><span class="line"></span><br><span class="line">- 掌握使用EL表达式，怎么从Map集合中取数据：</span><br><span class="line"></span><br><span class="line">  - $&#123;map.key&#125;</span><br><span class="line"></span><br><span class="line">- 掌握使用EL表达式，怎么从数组和List集合中取数据：</span><br><span class="line"></span><br><span class="line">  - $&#123;数组[0]&#125;</span><br><span class="line">  - $&#123;数组[1]&#125;</span><br><span class="line">  - $&#123;list[0]&#125;</span><br><span class="line"></span><br><span class="line">- page指令当中，有一个属性，可以忽略EL表达式</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    &lt;%@page contentType=&quot;text/html;charset=UTF-8&quot; isELIgnored=&quot;true&quot; %&gt;</span><br><span class="line">    isELIgnored=&quot;true&quot; 表示忽略EL表达式</span><br><span class="line">    isELIgnored=&quot;false&quot; 表示不忽略EL表达式。（这是默认值）</span><br><span class="line">    </span><br><span class="line">    isELIgnored=&quot;true&quot; 这个是全局的控制。</span><br><span class="line">    </span><br><span class="line">    可以使用反斜杠进行局部控制：\$&#123;username&#125; 这样也可以忽略EL表达式。</span><br></pre></td></tr></table></figure></code></pre></li><li><p>通过EL表达式获取应用的根：</p><ul><li>${pageContext.request.contextPath}</li></ul></li><li><p>EL表达式中其他的隐式对象：</p><ul><li>pageContext</li><li>param</li><li>paramValues</li><li>initParam</li></ul></li><li><p>EL表达式的运算符</p><ul><li>算术运算符<ul><li>+、-、*、&#x2F;、%</li></ul></li><li>关系运算符<ul><li><input disabled type="checkbox"> &#x3D;&#x3D; eq !&#x3D; &gt; &gt;&#x3D; &lt; &lt;&#x3D;</li></ul></li><li>逻辑运算符<ul><li><input disabled type="checkbox"> !  &amp;&amp; ||  not and or</li></ul></li><li>条件运算符<ul><li><input disabled type="checkbox"> ? :</li></ul></li><li>取值运算符<ul><li>[ ]和.</li></ul></li><li>empty运算符<ul><li><input disabled type="checkbox"> empty运算符的结果是boolean类型</li><li><input disabled type="checkbox"> ${empty param.username}</li><li><input disabled type="checkbox"> ${not empty param.username}</li><li><input disabled type="checkbox"> ${!empty param.password}</li></ul></li></ul></li></ul></li></ul><h1 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h1><ul><li><p>什么是JSTL标签库？</p><ul><li>Java Standard Tag Lib（Java标准的标签库）</li><li>JSTL标签库通常结合EL表达式一起使用。目的是让JSP中的java代码消失。</li><li>标签是写在JSP当中的，但实际上最终还是要执行对应的java程序。（java程序在jar包当中。）</li></ul></li><li><p>使用JSTL标签库的步骤：</p><ul><li><p>第一步：引入JSTL标签库对应的jar包。</p><ul><li>tomcat10之后引入的jar包是：<ul><li>jakarta.servlet.jsp.jstl-2.0.0.jar</li><li>jakarta.servlet.jsp.jstl-api-2.0.0.jar</li></ul></li><li>在IDEA当中怎么引入？<ul><li>在WEB-INF下新建lib目录，然后将jar包拷贝到lib当中。然后将其“Add Lib…”</li><li>一定是要和mysql的数据库驱动一样，都是放在WEB-INF&#x2F;lib目录下的。</li><li>什么时候需要将jar包放到WEB-INF&#x2F;lib目录下？如果这个jar是tomcat服务器没有的。</li></ul></li></ul></li><li><p>第二步：在JSP中引入要使用标签库。（使用taglib指令引入标签库。）</p><ul><li><p>JSTL提供了很多种标签，你要引入哪个标签？？？？重点掌握核心标签库。</p></li><li><p>&#96;&#96;&#96;<br>&lt;%@taglib prefix&#x3D;”c” uri&#x3D;”<a href="http://java.sun.com/jsp/jstl/core&quot;">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;<br>这个就是核心标签库。<br>prefix&#x3D;”这里随便起一个名字就行了，核心标签库，大家默认的叫做c，你随意。”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">  - 第三步：在需要使用标签的位置使用即可。表面使用的是标签，底层实际上还是java程序。</span><br><span class="line">  </span><br><span class="line">- JSTL标签的原理</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    &lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">    以上uri后面的路径实际上指向了一个xxx.tld文件。</span><br><span class="line">    tld文件实际上是一个xml配置文件。</span><br><span class="line">    在tld文件中描述了“标签”和“java类”之间的关系。</span><br><span class="line">    以上核心标签库对应的tld文件是：c.tld文件。它在哪里。</span><br><span class="line">    在jakarta.servlet.jsp.jstl-2.0.0.jar里面META-INF目录下，有一个c.tld文件。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>源码解析：配置文件tld解析</p><ul><li>&#96;&#96;&#96;<tag>    <description>对该标签的描述</description>    <name>catch</name> 标签的名字    <tag-class>org.apache.taglibs.standard.tag.common.core.CatchTag</tag-class> 标签对应的java类。    <body-content>JSP</body-content> 标签体当中可以出现的内容，如果是JSP，就表示标签体中可以出现符合JSP所有语法的代码。例如EL表达式。    <attribute>        <description>            对这个属性的描述        </description>        <name>var</name> 属性名        <required>false</required> false表示该属性不是必须的。true表示该属性是必须的。        <rtexprvalue>false</rtexprvalue> 这个描述说明了该属性是否支持EL表达式。false表示不支持。true表示支持EL表达式。    </attribute>  </tag>&lt;c:catch var&#x3D;””&gt;<br>JSP….<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- jstl中的核心标签库core当中有哪些常用的标签呢？</span><br><span class="line"></span><br><span class="line">  - c:if</span><br><span class="line"></span><br><span class="line">    - &lt;c:if test=&quot;boolean类型，支持EL表达式&quot;&gt;&lt;/c: if&gt;</span><br><span class="line"></span><br><span class="line">  - c:forEach</span><br><span class="line"></span><br><span class="line">    - &lt;c:forEach items=&quot;集合，支持EL表达式&quot; var=&quot;集合中的元素&quot; varStatus=&quot;元素状态对象&quot;&gt; $&#123;元素状态对象.count&#125; &lt;/c: forEach&gt;</span><br><span class="line">    - &lt;c:forEach var=&quot;i&quot; begin=&quot;1&quot; end=&quot;10&quot; step=&quot;2&quot;&gt; $&#123;i&#125; &lt;/c: forEach&gt;</span><br><span class="line"></span><br><span class="line">  - c:choose c:when c:otherwise</span><br><span class="line"></span><br><span class="line">    - ```</span><br><span class="line">      &lt;c:choose&gt;</span><br><span class="line">          &lt;c:when test=&quot;$&#123;param.age &lt; 18&#125;&quot;&gt;</span><br><span class="line">              青少年</span><br><span class="line">          &lt;/c:when&gt;</span><br><span class="line">          &lt;c:when test=&quot;$&#123;param.age &lt; 35&#125;&quot;&gt;</span><br><span class="line">              青年</span><br><span class="line">          &lt;/c:when&gt;</span><br><span class="line">          &lt;c:when test=&quot;$&#123;param.age &lt; 55&#125;&quot;&gt;</span><br><span class="line">              中年</span><br><span class="line">          &lt;/c:when&gt;</span><br><span class="line">          &lt;c:otherwise&gt;</span><br><span class="line">              老年</span><br><span class="line">          &lt;/c:otherwise&gt;</span><br><span class="line">      &lt;/c:choose&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="改造OA"><a href="#改造OA" class="headerlink" title="改造OA"></a>改造OA</h2><ul><li><p>使用什么技术改造呢？</p><ul><li>Servlet + JSP + EL表达式 + JSTL标签。进行改造。</li></ul></li><li><p>在前端HTML代码中，有一个标签，叫做base标签，这个标签可以设置整个网页的基础路径。</p><ul><li><p>这是Java的语法，也不是JSP的语法。是HTML中的一个语法。HTML中的一个标签。通常出现在head标签中。</p></li><li><p>&lt; base href&#x3D;”<a href="http://localhost:8080/oa/&quot;&gt;">http://localhost:8080/oa/&quot;&gt;</a></p></li><li><p>在当前页面中，凡是路径没有以“&#x2F;”开始的，都会自动将base中的路径添加到这些路径之前。</p><ul><li>&lt; a href&#x3D;”ab&#x2F;def”&gt;&lt;&#x2F; a&gt;</li><li>等同于：&lt; a href&#x3D;”<a href="http://localhost:8080/oa/ab/def&quot;&gt;">http://localhost:8080/oa/ab/def&quot;&gt;</a>&lt;&#x2F; a&gt;</li></ul></li><li><p>需要注意：在JS代码中的路径，保险起见，最好不要依赖base标签。JS代码中的路径最好写上全路径。</p></li><li><p>&#96;&#96;&#96;</p><base href="${pageContext.request.scheme}://${pageContext.request.serverName}:${pageContext.request.serverPort}${pageContext.request.contextPath}/"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Filter过滤器</span><br><span class="line"></span><br><span class="line">- 当前的OA项目存在什么缺陷？</span><br><span class="line">  - DeptServlet、EmpServlet、OrderServlet。每一个Servlet都是处理自己相关的业务。在这些Servlet执行之前都是需要判断用户是否登录了。如果用户登录了，可以继续操作，如果没有登录，需要用户登录。这段判断用户是否登录的代码是固定的，并且在每一个Servlet类当中都需要编写，显然代码没有得到重复利用。包括每一个Servlet都要解决中文乱码问题，也有公共的代码。这些代码目前都是重复编写，并没有达到复用。怎么解决这个问题?</span><br><span class="line">    - 可以使用Servlet规范中的Filter过滤器来解决这个问题。</span><br><span class="line">  </span><br><span class="line">- Filter是什么，有什么用，执行原理是什么？</span><br><span class="line">  - Filter是过滤器。</span><br><span class="line">  - Filter可以在Servlet这个目标程序执行之前添加代码。也可以在目标Servlet执行之后添加代码。之前之后都可以添加过滤规则。</span><br><span class="line">  - 一般情况下，都是在过滤器当中编写公共代码。</span><br><span class="line">  </span><br><span class="line">- 一个过滤器怎么写呢？</span><br><span class="line"></span><br><span class="line">  - 第一步：编写一个Java类实现一个接口：jarkata.servlet.Filter。并且实现这个接口当中所有的方法。</span><br><span class="line"></span><br><span class="line">    - init方法：在Filter对象第一次被创建之后调用，并且只调用一次。</span><br><span class="line">    - doFilter方法：只要用户发送一次请求，则执行一次。发送N次请求，则执行N次。在这个方法中编写过滤规则。</span><br><span class="line">    - destroy方法：在Filter对象被释放/销毁之前调用，并且只调用一次。</span><br><span class="line"></span><br><span class="line">  - 第二步：在web.xml文件中对Filter进行配置。这个配置和Servlet很像。</span><br><span class="line"></span><br><span class="line">    - ```</span><br><span class="line">      &lt;filter&gt;</span><br><span class="line">          &lt;filter-name&gt;filter2&lt;/filter-name&gt;</span><br><span class="line">          &lt;filter-class&gt;com.bjpowernode.javaweb.servlet.Filter2&lt;/filter-class&gt;</span><br><span class="line">      &lt;/filter&gt;</span><br><span class="line">      &lt;filter-mapping&gt;</span><br><span class="line">          &lt;filter-name&gt;filter2&lt;/filter-name&gt;</span><br><span class="line">          &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;</span><br><span class="line">      &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><ul><li>或者使用注解：@WebFilter({“*.do”})</li></ul></li></ul></li><li><p>注意：</p><ul><li>Servlet对象默认情况下，在服务器启动的时候是不会新建对象的。</li><li>Filter对象默认情况下，在服务器启动的时候会新建对象。</li><li>Servlet是单例的。Filter也是单例的。（单实例。）</li></ul></li><li><p>目标Servlet是否执行，取决于两个条件：</p><ul><li>第一：在过滤器当中是否编写了：chain.doFilter(request, response); 代码。</li><li>第二：用户发送的请求路径是否和Servlet的请求路径一致。</li></ul></li><li><p>chain.doFilter(request, response); 这行代码的作用：</p><ul><li>执行下一个过滤器，如果下面没有过滤器了，执行最终的Servlet。</li></ul></li><li><p>注意：Filter的优先级，天生的就比Servlet优先级高。</p><ul><li>&#x2F;a.do 对应一个Filter，也对应一个Servlet。那么一定是先执行Filter，然后再执行Servlet。</li></ul></li><li><p>关于Filter的配置路径：</p><ul><li>&#x2F;a.do、&#x2F;b.do、&#x2F;dept&#x2F;save。这些配置方式都是精确匹配。</li><li>&#x2F;* 匹配所有路径。</li><li>*.do 后缀匹配。不要以 &#x2F; 开始</li><li>&#x2F;dept&#x2F;*  前缀匹配。</li></ul></li><li><p>在web.xml文件中进行配置的时候，Filter的执行顺序是什么？</p><ul><li>依靠filter-mapping标签的配置位置，越靠上优先级越高。</li></ul></li><li><p>过滤器的调用顺序，遵循栈数据结构。</p></li><li><p>使用@WebFilter的时候，Filter的执行顺序是怎样的呢？</p><ul><li>执行顺序是：比较Filter这个类名。</li><li>比如：FilterA和FilterB，则先执行FilterA。</li><li>比如：Filter1和Filter2，则先执行Filter1.</li></ul></li><li><p>Filter的生命周期？</p><ul><li>和Servlet对象生命周期一致。</li><li>唯一的区别：Filter默认情况下，在服务器启动阶段就实例化。Servlet不会。</li></ul></li><li><p>Filter过滤器这里有一个设计模式：</p><ul><li>责任链设计模式。</li><li>过滤器最大的优点：<ul><li>在程序编译阶段不会确定调用顺序。因为Filter的调用顺序是配置到web.xml文件中的，只要修改web.xml配置文件中filter-mapping的顺序就可以调整Filter的执行顺序。显然Filter的执行顺序是在程序运行阶段动态组合的。那么这种设计模式被称为责任链设计模式。</li></ul></li><li>责任链设计模式最大的核心思想：<ul><li>在程序运行阶段，动态的组合程序的调用顺序。</li></ul></li></ul></li><li><p>使用过滤器改造OA项目。</p></li></ul><h1 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h1><ul><li><p>什么是监听器？</p><ul><li>监听器是Servlet规范中的一员。就像Filter一样。Filter也是Servlet规范中的一员。</li><li>在Servlet中，所有的监听器接口都是以“Listener”结尾。</li></ul></li><li><p>监听器有什么用？</p><ul><li>监听器实际上是Servlet规范留给我们javaweb程序员的特殊时机。</li><li>特殊的时刻如果想执行这段代码，你需要想到使用对应的监听器。</li></ul></li><li><p>Servlet规范中提供了哪些监听器？</p><ul><li>jakarta.servlet包下：<ul><li>ServletContextListener</li><li>ServletContextAttributeListener</li><li>ServletRequestListener</li><li>ServletRequestAttributeListener</li></ul></li><li>jakarta.servlet.http包下：<ul><li>HttpSessionListener</li><li>HttpSessionAttributeListener<ul><li>该监听器需要使用@WebListener注解进行标注。</li><li>该监听器监听的是什么？是session域中数据的变化。只要数据变化，则执行相应的方法。主要监测点在session域对象上。</li></ul></li><li>HttpSessionBindingListener<ul><li>该监听器不需要使用@WebListener进行标注。</li><li>假设User类实现了该监听器，那么User对象在被放入session的时候触发bind事件，User对象从session中删除的时候，触发unbind事件。</li><li>假设Customer类没有实现该监听器，那么Customer对象放入session或者从session删除的时候，不会触发bind和unbind事件。</li></ul></li><li>HttpSessionIdListener<ul><li>session的id发生改变的时候，监听器中的唯一一个方法就会被调用。</li></ul></li><li>HttpSessionActivationListener<ul><li>监听session对象的钝化和活化的。</li><li>钝化：session对象从内存存储到硬盘文件。</li><li>活化：从硬盘文件把session恢复到内存。</li></ul></li></ul></li></ul></li><li><p>实现一个监听器的步骤：以ServletContextListener为例。</p><ul><li><p>第一步：编写一个类实现ServletContextListener接口。并且实现里面的方法。</p><ul><li><pre><code>void contextInitialized(ServletContextEvent event)void contextDestroyed(ServletContextEvent event)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 第二步：在web.xml文件中对ServletContextListener进行配置，如下：</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;com.bjpowernode.javaweb.listener.MyServletContextListener&lt;/listener-class&gt;</span><br><span class="line">    &lt;/listener&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>当然，第二步也可以不使用配置文件，也可以用注解，例如：@WebListener</p></li></ul></li></ul></li><li><p>注意：所有监听器中的方法都是不需要javaweb程序员调用的，由服务器来负责调用？什么时候被调用呢？</p><ul><li>当某个特殊的事件发生（特殊的事件发生其实就是某个时机到了。）之后，被web服务器自动调用。</li></ul></li><li><p>思考一个业务场景：</p><ul><li>请编写一个功能，记录该网站实时的在线用户的个数。</li><li>我们可以通过服务器端有没有分配session对象，因为一个session代表了一个用户。有一个session就代表有一个用户。如果你采用这种逻辑去实现的话，session有多少个，在线用户就有多少个。这种方式的话：HttpSessionListener够用了。session对象只要新建，则count++，然后将count存储到ServletContext域当中，在页面展示在线人数即可。</li><li>业务发生改变了，只统计登录的用户的在线数量，这个该怎么办？<ul><li>session.setAttribute(“user”, userObj); </li><li>用户登录的标志是什么？session中曾经存储过User类型的对象。那么这个时候可以让User类型的对象实现HttpSessionBindingListener监听器，只要User类型对象存储到session域中，则count++，然后将count++存储到ServletContext对象中。页面展示在线人数即可。</li></ul></li></ul></li><li><p>实现oa项目中当前登录在线的人数。</p><ul><li>什么代表着用户登录了？<ul><li>session.setAttribute(“user”, userObj); User类型的对象只要往session中存储过，表示有新用户登录。</li></ul></li><li>什么代表着用户退出了？<ul><li>session.removeAttribute(“user”); User类型的对象从session域中移除了。</li><li>或者有可能是session销毁了。（session超时）</li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/22/JAVA/9-%E9%9B%86%E5%90%88/6-hashset/"/>
      <url>/2022/11/22/JAVA/9-%E9%9B%86%E5%90%88/6-hashset/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/11/22/JAVA/9-%E9%9B%86%E5%90%88/6-hashset/image-20221124142842120.png" alt="image-20221124142842120"></p><blockquote><p>equals 方法可以根据程序猿重写 &#x3D;&#x3D;对应类中的equals&#x3D;&#x3D;方法进行判断。 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetSource</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">hashSet.add(<span class="string">&quot;java&quot;</span>);<span class="comment">//到此位置，第 1 次 add 分析完毕. hashSet.add(&quot;php&quot;);//到此位置，第 2 次 add 分析完毕</span></span><br><span class="line">hashSet.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;set=&quot;</span> + hashSet);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">老韩对 HashSet 的源码解读</span></span><br><span class="line"><span class="comment">1. 执行 HashSet()</span></span><br><span class="line"><span class="comment">public HashSet() &#123;</span></span><br><span class="line"><span class="comment">map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">2. 执行 add()</span></span><br><span class="line"><span class="comment">public boolean add(E e) &#123;//e = &quot;java&quot;</span></span><br><span class="line"><span class="comment">return map.put(e, PRESENT)==null;//(static) PRESENT = new Object();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">3.执行 put() , 该方法会执行 hash(key) 得到 key 对应的 hash 值 算法 h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</span></span><br><span class="line"><span class="comment">public V put(K key, V value) &#123;//key = &quot;java&quot; value = PRESENT 共享</span></span><br><span class="line"><span class="comment">return putVal(hash(key), key, value, false, true);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">韩顺平循序渐进学 Java 零基础</span></span><br><span class="line"><span class="comment">第 649页</span></span><br><span class="line"><span class="comment">4.执行 putVal</span></span><br><span class="line"><span class="comment">final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) &#123;</span></span><br><span class="line"><span class="comment">Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; //定义了辅助变量</span></span><br><span class="line"><span class="comment">//table 就是 HashMap 的一个数组，类型是 Node[]</span></span><br><span class="line"><span class="comment">//if 语句表示如果当前 table 是 null, 或者 大小=0</span></span><br><span class="line"><span class="comment">//就是第一次扩容，到 16 个空间. if ((tab = table) == null || (n = tab.length) == 0)</span></span><br><span class="line"><span class="comment">n = (tab = resize()).length;</span></span><br><span class="line"><span class="comment">//(1)根据 key，得到 hash 去计算该 key 应该存放到 table 表的哪个索引位置</span></span><br><span class="line"><span class="comment">//并把这个位置的对象，赋给 p</span></span><br><span class="line"><span class="comment">//(2)判断 p 是否为 null</span></span><br><span class="line"><span class="comment">//(2.1) 如果 p 为 null, 表示还没有存放元素, 就创建一个 Node (key=&quot;java&quot;,value=PRESENT)</span></span><br><span class="line"><span class="comment">//(2.2) 就放在该位置 tab[i] = newNode(hash, key, value, null)</span></span><br><span class="line"><span class="comment">if ((p = tab[i = (n - 1) &amp; hash]) == null)</span></span><br><span class="line"><span class="comment">tab[i] = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="comment">else &#123;</span></span><br><span class="line"><span class="comment">//一个开发技巧提示： 在需要局部变量(辅助变量)时候，在创建</span></span><br><span class="line"><span class="comment">Node&lt;K,V&gt; e; K k; //</span></span><br><span class="line"><span class="comment">//如果当前索引位置对应的链表的第一个元素和准备添加的 key 的 hash 值一样</span></span><br><span class="line"><span class="comment">//并且满足 下面两个条件之一:</span></span><br><span class="line"><span class="comment">//(1) 准备加入的 key 和 p 指向的 Node 结点的 key 是同一个对象</span></span><br><span class="line"><span class="comment">//(2) p 指向的 Node 结点的 key 的 equals() 和准备加入的 key 比较后相同</span></span><br><span class="line"><span class="comment">//就不能加入</span></span><br><span class="line"><span class="comment">韩顺平循序渐进学 Java 零基础</span></span><br><span class="line"><span class="comment">第 650页</span></span><br><span class="line"><span class="comment">if (p.hash == hash &amp;&amp;</span></span><br><span class="line"><span class="comment">((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span></span><br><span class="line"><span class="comment">e = p;</span></span><br><span class="line"><span class="comment">//再判断 p 是不是一颗红黑树, //如果是一颗红黑树，就调用 putTreeVal , 来进行添加</span></span><br><span class="line"><span class="comment">else if (p instanceof TreeNode)</span></span><br><span class="line"><span class="comment">e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span></span><br><span class="line"><span class="comment">else &#123;//如果 table 对应索引位置，已经是一个链表, 就使用 for 循环比较</span></span><br><span class="line"><span class="comment">//(1) 依次和该链表的每一个元素比较后，都不相同, 则加入到该链表的最后</span></span><br><span class="line"><span class="comment">// 注意在把元素添加到链表后，立即判断 该链表是否已经达到 8 个结点</span></span><br><span class="line"><span class="comment">// , 就调用 treeifyBin() 对当前这个链表进行树化(转成红黑树)</span></span><br><span class="line"><span class="comment">// 注意，在转成红黑树时，要进行判断, 判断条件</span></span><br><span class="line"><span class="comment">// if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY(64))</span></span><br><span class="line"><span class="comment">// resize();</span></span><br><span class="line"><span class="comment">// 如果上面条件成立，先 table 扩容. // 只有上面条件不成立时，才进行转成红黑树</span></span><br><span class="line"><span class="comment">//(2) 依次和该链表的每一个元素比较过程中，如果有相同情况,就直接 break</span></span><br><span class="line"><span class="comment">for (int binCount = 0; ; ++binCount) &#123;</span></span><br><span class="line"><span class="comment">if ((e = p.next) == null) &#123;</span></span><br><span class="line"><span class="comment">p.next = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="comment">if (binCount &gt;= TREEIFY_THRESHOLD(8) - 1) // -1 for 1st</span></span><br><span class="line"><span class="comment">treeifyBin(tab, hash);</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (e.hash == hash &amp;&amp;</span></span><br><span class="line"><span class="comment">韩顺平循序渐进学 Java 零基础</span></span><br><span class="line"><span class="comment">第 651页</span></span><br><span class="line"><span class="comment">((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">p = e;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (e != null) &#123; // existing mapping for key</span></span><br><span class="line"><span class="comment">V oldValue = e.value;</span></span><br><span class="line"><span class="comment">if (!onlyIfAbsent || oldValue == null)</span></span><br><span class="line"><span class="comment">e.value = value;</span></span><br><span class="line"><span class="comment">afterNodeAccess(e);</span></span><br><span class="line"><span class="comment">return oldValue;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">++modCount;</span></span><br><span class="line"><span class="comment">//size 就是我们每加入一个结点 Node(k,v,h,next), size++</span></span><br><span class="line"><span class="comment">if (++size &gt; threshold)</span></span><br><span class="line"><span class="comment">resize();//扩容</span></span><br><span class="line"><span class="comment">afterNodeInsertion(evict);</span></span><br><span class="line"><span class="comment">return null;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>public class HashSetSource {<br>public static void main(String[] args) {<br>HashSet hashSet &#x3D; new HashSet();<br>hashSet.add(“java”);&#x2F;&#x2F;到此位置，第 1 次 add 分析完毕. hashSet.add(“php”);&#x2F;&#x2F;到此位置，第 2 次 add 分析完毕<br>hashSet.add(“java”);<br>System.out.println(“set&#x3D;” + hashSet);<br>&#x2F;*<br>老韩对 HashSet 的源码解读</p><ol><li><p>执行 HashSet()<br> public HashSet() {<br> map &#x3D; new HashMap&lt;&gt;();<br> }</p></li><li><p>执行 add()<br> public boolean add(E e) {&#x2F;&#x2F;e &#x3D; “java”<br> return map.put(e, PRESENT)&#x3D;&#x3D;null;&#x2F;&#x2F;(static) PRESENT &#x3D; new Object();<br> }</p></li><li><p>3.执行 put() , 该方法会执行 hash(key) 得到 key 对应的 hash 值 算法 h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16)<br> public V put(K key, V value) {&#x2F;&#x2F;key &#x3D; “java” value &#x3D; PRESENT 共享<br> return putVal(hash(key), key, value, false, true);<br> }</p></li><li><p>4.执行 putVal<br> final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) {<br> Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; &#x2F;&#x2F;定义了辅助变量<br> &#x2F;&#x2F;table 就是 HashMap 的一个数组，类型是 Node[]<br> &#x2F;&#x2F;if 语句表示如果当前 table 是 null, 或者 大小&#x3D;0<br> &#x2F;&#x2F;就是第一次扩容，到 16 个空间. if ((tab &#x3D; table) &#x3D;&#x3D; null || (n &#x3D; tab.length) &#x3D;&#x3D; 0)<br> n &#x3D; (tab &#x3D; resize()).length;<br> &#x2F;&#x2F;(1)根据 key，得到 hash 去计算该 key 应该存放到 table 表的哪个索引位置<br> &#x2F;&#x2F;并把这个位置的对象，赋给 p<br> &#x2F;&#x2F;(2)判断 p 是否为 null<br> &#x2F;&#x2F;(2.1) 如果 p 为 null, 表示还没有存放元素, 就创建一个 Node (key&#x3D;”java”,value&#x3D;PRESENT)<br> &#x2F;&#x2F;(2.2) 就放在该位置 tab[i] &#x3D; newNode(hash, key, value, null)<br> if ((p &#x3D; tab[i &#x3D; (n - 1) &amp; hash]) &#x3D;&#x3D; null)<br> tab[i] &#x3D; newNode(hash, key, value, null);<br> else {</p></li></ol><p>  &#x2F;&#x2F;一个开发技巧提示： 在需要局部变量(辅助变量)时候，在创建<br>  Node&lt;K,V&gt; e; K k; &#x2F;&#x2F;<br>  &#x2F;&#x2F;如果当前索引位置对应的链表的第一个元素和准备添加的 key 的 hash 值一样<br>  &#x2F;&#x2F;并且满足 下面两个条件之一:<br>  &#x2F;&#x2F;(1) 准备加入的 key 和 p 指向的 Node 结点的 key 是同一个对象<br>  &#x2F;&#x2F;(2) p 指向的 Node 结点的 key(&#x3D;&#x3D;动态绑定机制&#x3D;&#x3D;)的 equals() 和准备加入的 key 比较后相同<br>  &#x2F;&#x2F;就不能加入</p><blockquote><p>这里可以自定义 对象中的 equals 方法去判断要放入的对象是否相同。</p><p>例如两个不同的 Dog 对象，可以设置 一个 equal 方法，来根据某一些特性进行判断。使其判断结果为相同的对象。</p></blockquote><p>  if (p.hash &#x3D;&#x3D; hash &amp;&amp;<br>  ((k &#x3D; p.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k))))<br>  e &#x3D; p;</p><ol start="5"><li>&#x2F;&#x2F;再判断 p 是不是一颗红黑树,</li></ol><p>  &#x2F;&#x2F;如果是一颗红黑树，就调用 putTreeVal , 来进行添加<br>  else if (p instanceof TreeNode)<br>  e &#x3D; ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);<br>  else {&#x2F;&#x2F;如果 table 对应索引位置，已经是一个链表, 就使用 for 循环比较<br>  &#x2F;&#x2F;(1) 依次和该链表的每一个元素比较后，都不相同, 则加入到该链表的最后<br>  &#x2F;&#x2F; 注意在把元素添加到链表后，立即判断 该链表是否已经达到 8 个结点<br>  &#x2F;&#x2F; , 就调用 treeifyBin() 对当前这个链表进行树化(转成红黑树)<br>  &#x2F;&#x2F; 注意，在转成红黑树时，要进行判断, 判断条件<br>  &#x2F;&#x2F; if (tab &#x3D;&#x3D; null || (n &#x3D; tab.length) &lt; MIN_TREEIFY_CAPACITY(64))<br>  &#x2F;&#x2F; resize();<br>  &#x2F;&#x2F; 如果上面条件成立，先 table 扩容. &#x2F;&#x2F; 只有上面条件不成立时，才进行转成红黑树<br>  &#x2F;&#x2F;(2) 依次和该链表的每一个元素比较过程中，如果有相同情况,就直接 break<br>  for (int binCount &#x3D; 0; ; ++binCount) {<br>  if ((e &#x3D; p.next) &#x3D;&#x3D; null) {<br>  p.next &#x3D; newNode(hash, key, value, null);<br>  if (binCount &gt;&#x3D; TREEIFY_THRESHOLD(8) - 1) &#x2F;&#x2F; -1 for 1st<br>  treeifyBin(tab, hash);<br>  break;<br>  }<br>  if (e.hash &#x3D;&#x3D; hash &amp;&amp;<br>  ((k &#x3D; e.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k))))<br>  break;<br>  p &#x3D; e;<br>  }<br>  }<br>  if (e !&#x3D; null) { &#x2F;&#x2F; existing mapping for key<br>  V oldValue &#x3D; e.value;<br>  if (!onlyIfAbsent || oldValue &#x3D;&#x3D; null)<br>  e.value &#x3D; value;<br>  afterNodeAccess(e);<br>  return oldValue;<br>  }<br>  }<br>  ++modCount;<br>  &#x2F;&#x2F;size 就是我们每加入一个结点 Node(k,v,h,next), size++<br>  if (++size &gt; threshold)<br>  resize();&#x2F;&#x2F;扩容<br>  afterNodeInsertion(evict);<br>  return null;<br>  }<br>  *&#x2F;<br>  }<br>  }</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>5-set接口</title>
      <link href="/2022/11/22/JAVA/9-%E9%9B%86%E5%90%88/5-set%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/11/22/JAVA/9-%E9%9B%86%E5%90%88/5-set%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>——–进度 522截止</p><h2 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h2><p><img src="/2022/11/22/JAVA/9-%E9%9B%86%E5%90%88/5-set%E6%8E%A5%E5%8F%A3/image-20221122123010935.png" alt="image-20221122123010935"></p><ul><li><p>&#x3D;&#x3D;无序、没有索引，不允许重复元素（重复添加，内容只会有一个）&#x3D;&#x3D;</p></li><li><p>可以添加 null</p></li></ul><h2 id="二、常用方法"><a href="#二、常用方法" class="headerlink" title="二、常用方法"></a>二、常用方法</h2><ul><li>set</li><li>isempty</li><li>size</li><li>迭代器</li><li>remove(Object ) –&gt;指定删除某一个对象。</li></ul><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><p><img src="/2022/11/22/JAVA/9-%E9%9B%86%E5%90%88/5-set%E6%8E%A5%E5%8F%A3/image-20221122123140352.png" alt="image-20221122123140352"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line">&#125;</span><br><span class="line">set.remove(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//方式 2: 增强 for</span></span><br><span class="line">System.out.println(<span class="string">&quot;=====增强 for====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Object o : set) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;o=&quot;</span> + o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、原理分析"><a href="#三、原理分析" class="headerlink" title="三、原理分析"></a>三、原理分析</h2><p><img src="/2022/11/22/JAVA/9-%E9%9B%86%E5%90%88/5-set%E6%8E%A5%E5%8F%A3/image-20221122130702174.png" alt="image-20221122130702174"></p><h3 id="String对象添加失败的原因"><a href="#String对象添加失败的原因" class="headerlink" title="String对象添加失败的原因"></a>String对象添加失败的原因</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hashset.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;john&quot;</span>))T</span><br><span class="line">hashset.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;john&quot;</span>))F</span><br></pre></td></tr></table></figure><p>因为 String 类中的 equal 方法已经被重写，当 hashset 调用判断时，就会得到两个对象是相同的结果。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4-LinkedList</title>
      <link href="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/4-LinkedList/"/>
      <url>/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/4-LinkedList/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、LinkedList"><a href="#一、LinkedList" class="headerlink" title="一、LinkedList"></a>一、LinkedList</h3><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/4-LinkedList/image-20221122121943077.png" alt="image-20221122121943077"></p><ol><li><p>底层实现了双向链表和双端队列等特点。</p></li><li><p>可以添加任意元素（元素可以重复），包括&#x3D;&#x3D;null&#x3D;&#x3D;</p></li><li><p>线程不安全，没有实现同步。</p></li></ol><h3 id="二、底层源码分析"><a href="#二、底层源码分析" class="headerlink" title="二、底层源码分析"></a>二、底层源码分析</h3><h4 id="1-底层原理"><a href="#1-底层原理" class="headerlink" title="1)底层原理"></a>1)底层原理</h4><p>底层维护了一个&#x3D;&#x3D;双向链表&#x3D;&#x3D;。</p><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/4-LinkedList/image-20221122122521791.png" alt="image-20221122122521791"></p><h4 id="2-简单案例"><a href="#2-简单案例" class="headerlink" title="2)简单案例"></a>2)简单案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//模拟一个简单的双向链表</span></span><br><span class="line"><span class="type">Node</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line"><span class="type">Node</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line"><span class="type">Node</span> <span class="variable">hsp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;老韩&quot;</span>);</span><br><span class="line"><span class="comment">//连接三个结点，形成双向链表</span></span><br><span class="line"><span class="comment">//jack -&gt; tom -&gt; hsp</span></span><br><span class="line">jack.next = tom;</span><br><span class="line">tom.next = hsp;</span><br><span class="line"><span class="comment">//hsp -&gt; tom -&gt; jack</span></span><br><span class="line">hsp.pre = tom;</span><br><span class="line">tom.pre = jack;</span><br><span class="line"><span class="type">Node</span> <span class="variable">first</span> <span class="operator">=</span> jack;<span class="comment">//让 first 引用指向 jack,就是双向链表的头结点</span></span><br><span class="line"><span class="type">Node</span> <span class="variable">last</span> <span class="operator">=</span> hsp; <span class="comment">//让 last 引用指向 hsp,就是双向链表的尾结点</span></span><br><span class="line"><span class="comment">//演示，从头到尾进行遍历</span></span><br><span class="line">System.out.println(<span class="string">&quot;===从头到尾进行遍历===&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">韩顺平循序渐进学 Java 零基础</span><br><span class="line">第 <span class="number">632</span>页</span><br><span class="line"><span class="keyword">if</span>(first == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出 first 信息</span></span><br><span class="line">System.out.println(first);</span><br><span class="line">first = first.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//演示，从尾到头的遍历</span></span><br><span class="line">System.out.println(<span class="string">&quot;====从尾到头的遍历====&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(last == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出 last 信息</span></span><br><span class="line">System.out.println(last);</span><br><span class="line">last = last.pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//演示链表的添加对象/数据，是多么的方便</span></span><br><span class="line"><span class="comment">//要求，是在 tom --------- 老韩直接，插入一个对象 smith</span></span><br><span class="line"><span class="comment">//1. 先创建一个 Node 结点，name 就是 smith</span></span><br><span class="line"><span class="type">Node</span> <span class="variable">smith</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line"><span class="comment">//下面就把 smith 加入到双向链表了</span></span><br><span class="line">smith.next = hsp;</span><br><span class="line">韩顺平循序渐进学 Java 零基础</span><br><span class="line">第 <span class="number">633</span>页</span><br><span class="line">smith.pre = tom;</span><br><span class="line">hsp.pre = smith;</span><br><span class="line">tom.next = smith;</span><br><span class="line"><span class="comment">//让 first 再次指向 jack</span></span><br><span class="line">first = jack;<span class="comment">//让 first 引用指向 jack,就是双向链表的头结点</span></span><br><span class="line">System.out.println(<span class="string">&quot;===从头到尾进行遍历===&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(first == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出 first 信息</span></span><br><span class="line">System.out.println(first);</span><br><span class="line">first = first.next;</span><br><span class="line">&#125;</span><br><span class="line">last = hsp; <span class="comment">//让 last 重新指向最后一个结点</span></span><br><span class="line"><span class="comment">//演示，从尾到头的遍历</span></span><br><span class="line">System.out.println(<span class="string">&quot;====从尾到头的遍历====&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(last == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出 last 信息</span></span><br><span class="line">System.out.println(last);</span><br><span class="line">韩顺平循序渐进学 Java 零基础</span><br><span class="line">第 <span class="number">634</span>页</span><br><span class="line">last = last.pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个 Node 类，Node 对象 表示双向链表的一个结点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Object item; <span class="comment">//真正存放数据</span></span><br><span class="line"><span class="keyword">public</span> Node next; <span class="comment">//指向后一个结点</span></span><br><span class="line"><span class="keyword">public</span> Node pre; <span class="comment">//指向前一个结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.item = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Node name=&quot;</span> + item;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、选择"><a href="#三、选择" class="headerlink" title="三、选择"></a>三、选择</h3><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/4-LinkedList/image-20221122122716665.png" alt="image-20221122122716665"></p><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3-List接口</title>
      <link href="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/3-List%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/3-List%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>使用 System.out.println(arrayList); 打印 ArrayList 时，调用的也是 ArrayList 类的 &#x3D;&#x3D;toString&#x3D;&#x3D;方法</p></blockquote><h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/3-List%E6%8E%A5%E5%8F%A3/image-20221121165104877.png" alt="image-20221121165104877"></p><ul><li>有序且可重复</li><li>支持索引，且&#x3D;&#x3D;索引从 0 开始&#x3D;&#x3D;,可以使用 索引读取指定数据。</li></ul><h3 id="二、常用方法"><a href="#二、常用方法" class="headerlink" title="二、常用方法"></a>二、常用方法</h3><ul><li>void add(int index, Object ele):在 index 位置插入 ele 元素</li><li>boolean addAll(int index, Collection eles):从 index 位置开始将 eles 中的所有元素添加进来</li><li>Object get(int index):获取指定 index 位置的元素</li><li>int indexOf(Object obj):返回 obj 在集合中&#x3D;&#x3D;首次&#x3D;&#x3D;出现的位置</li><li>int lastIndexOf(Object obj):返回 obj 在当前集合中&#x3D;&#x3D;末次&#x3D;&#x3D;出现的位置</li><li>Object remove(&#x3D;&#x3D;int index&#x3D;&#x3D;):移除指定 index 位置的元素，并&#x3D;&#x3D;返回此元素&#x3D;&#x3D;</li><li>Object set(int index, Object ele):设置指定 index 位置的元素为 ele , 相当于是替换. list.set(1, “玛丽”);</li><li>List subList(int fromIndex, int toIndex):返回从 fromIndex 到 toIndex 位置的子集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="keyword">class</span> <span class="title class_">ListMethod</span> &#123;</span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;贾宝玉&quot;</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">// void add(int index, Object ele):在 index 位置插入 ele 元素</span></span><br><span class="line"><span class="comment">//在 index = 1 的位置插入一个对象</span></span><br><span class="line">list.add(<span class="number">1</span>, <span class="string">&quot;韩顺平&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">// boolean addAll(int index, Collection eles):从 index 位置开始将 eles 中的所有元素添加进来</span></span><br><span class="line"><span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list2.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">list2.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">list.addAll(<span class="number">1</span>, list2);</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">// Object get(int index):获取指定 index 位置的元素</span></span><br><span class="line"><span class="comment">//说过</span></span><br><span class="line"><span class="comment">// int indexOf(Object obj):返回 obj 在集合中首次出现的位置</span></span><br><span class="line">System.out.println(list.indexOf(<span class="string">&quot;tom&quot;</span>));<span class="comment">//2</span></span><br><span class="line"><span class="comment">// int lastIndexOf(Object obj):返回 obj 在当前集合中末次出现的位置</span></span><br><span class="line">list.add(<span class="string">&quot;韩顺平&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line">System.out.println(list.lastIndexOf(<span class="string">&quot;韩顺平&quot;</span>));</span><br><span class="line"><span class="comment">// Object remove(int index):移除指定 index 位置的元素，并返回此元素</span></span><br><span class="line">list.remove(<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">// Object set(int index, Object ele):设置指定 index 位置的元素为 ele , 相当于是替换. list.set(1, &quot;玛丽&quot;);</span></span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">// List subList(int fromIndex, int toIndex):返回从 fromIndex 到 toIndex 位置的子集合</span></span><br><span class="line"><span class="comment">// 注意返回的子集合 fromIndex &lt;= subList &lt; toIndex</span></span><br><span class="line"><span class="type">List</span> <span class="variable">returnlist</span> <span class="operator">=</span> list.subList(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;returnlist=&quot;</span> + returnlist);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、练习"><a href="#三、练习" class="headerlink" title="三、练习"></a>三、练习</h3><h4 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h4><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/3-List%E6%8E%A5%E5%8F%A3/image-20221121165501932.png" alt="image-20221121165501932"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListExercise</span> &#123;</span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">添加 10 个以上的元素(比如 String &quot;hello&quot; )，在 2 号位插入一个元素&quot;韩顺平教育&quot;，</span></span><br><span class="line"><span class="comment">获得第 5 个元素，删除第 6 个元素，修改第 7 个元素，在使用迭代器遍历集合，</span></span><br><span class="line"><span class="comment">要求:使用 List 的实现类 ArrayList 完成。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">list.add(<span class="string">&quot;hello&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//在 2 号位插入一个元素&quot;韩顺平教育&quot;</span></span><br><span class="line">list.add(<span class="number">1</span>, <span class="string">&quot;韩顺平教育&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//获得第 5 个元素</span></span><br><span class="line">System.out.println(<span class="string">&quot;第五个元素=&quot;</span> + list.get(<span class="number">4</span>));</span><br><span class="line"><span class="comment">//删除第 6 个元素</span></span><br><span class="line">list.remove(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//修改第 7 个元素</span></span><br><span class="line">list.set(<span class="number">6</span>, <span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">//在使用迭代器遍历集合</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h4><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/3-List%E6%8E%A5%E5%8F%A3/image-20221121190010416.png" alt="image-20221121190010416"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 四、普通 <span class="keyword">for</span> 循环</span><br><span class="line"></span><br><span class="line">#### what?</span><br><span class="line"></span><br><span class="line">使用 get 方法</span><br><span class="line"></span><br><span class="line">#### how</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"> <span class="title function_">for</span> <span class="params">(<span class="type">int</span> i = <span class="number">0</span>; i &lt;arrayList.size()</span> ; i++) &#123;</span><br><span class="line">            System.out.println(arrayList.get(i));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="五、注意"><a href="#五、注意" class="headerlink" title="五、注意"></a>五、注意</h3><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/3-List%E6%8E%A5%E5%8F%A3/image-20221121191931474.png" alt="image-20221121191931474"></p><p>线程不安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">没有 <span class="keyword">synchronized</span></span><br></pre></td></tr></table></figure><h3 id="六、底层分析"><a href="#六、底层分析" class="headerlink" title="六、底层分析"></a>六、底层分析</h3><h4 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1)ArrayList"></a>1)ArrayList</h4><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/3-List%E6%8E%A5%E5%8F%A3/image-20221121193141042.png" alt="image-20221121193141042"></p><ol><li>不会被序列化 维护一个elementData</li><li>扩充<ol><li>0(默认构造器)—&gt;10 —&gt;15 —&gt; 22</li><li>8(指定)—&gt;14—-&gt;21</li></ol></li></ol><blockquote><p>Arrays.copy(url  , int newlength)方法。且会保留原有的数据。</p></blockquote><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/3-List%E6%8E%A5%E5%8F%A3/image-20221121195549894.png" alt="image-20221121195549894"></p><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/3-List%E6%8E%A5%E5%8F%A3/image-20221121195648294.png" alt="image-20221121195648294"></p><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/3-List%E6%8E%A5%E5%8F%A3/image-20221121195703567.png" alt="image-20221121195703567"></p><blockquote><p>一个利用移位扩容。<br><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/3-List%E6%8E%A5%E5%8F%A3/image-20221121195742085.png" alt="image-20221121195742085"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">默认为空的调试代码</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">默认不为空的调试代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//老韩解读源码</span></span><br><span class="line"><span class="comment">//注意，注意，注意，Idea 默认情况下，Debug 显示的数据是简化后的，如果希望看到完整的数据</span></span><br><span class="line"><span class="comment">//需要做设置. //使用无参构造器创建 ArrayList 对象</span></span><br><span class="line"><span class="comment">//ArrayList list = new ArrayList();</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(<span class="number">8</span>);</span><br><span class="line"><span class="comment">//使用 for 给 list 集合添加 1-10 数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用 for 给 list 集合添加 11-15 数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">11</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line">list.add(i);</span><br><span class="line">&#125;</span><br><span class="line">list.add(<span class="number">100</span>);</span><br><span class="line">list.add(<span class="number">200</span>);</span><br><span class="line">list.add(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-vector"><a href="#2-vector" class="headerlink" title="2)vector"></a>2)vector</h4><h5 id="自定义扩容"><a href="#自定义扩容" class="headerlink" title="自定义扩容"></a>自定义扩容</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?capacityIncrement : oldCapacity);</span><br><span class="line">=================有构造器中可以设置 increment=========================</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">int</span> capacityIncrement)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">        <span class="built_in">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vector_</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//无参构造器</span></span><br><span class="line"><span class="comment">//有参数的构造</span></span><br><span class="line"><span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">vector.add(i);</span><br><span class="line">韩顺平循序渐进学 Java 零基础</span><br><span class="line">第 <span class="number">628</span>页</span><br><span class="line">&#125;</span><br><span class="line">vector.add(<span class="number">100</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;vector=&quot;</span> + vector);</span><br><span class="line"><span class="comment">//老韩解读源码</span></span><br><span class="line"><span class="comment">//1. new Vector() 底层</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public Vector() &#123;</span></span><br><span class="line"><span class="comment">this(10);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">补充：如果是 Vector vector = new Vector(8);</span></span><br><span class="line"><span class="comment">走的方法:</span></span><br><span class="line"><span class="comment">public Vector(int initialCapacity) &#123;</span></span><br><span class="line"><span class="comment">this(initialCapacity, 0);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">2. vector.add(i)</span></span><br><span class="line"><span class="comment">2.1 //下面这个方法就添加数据到 vector 集合</span></span><br><span class="line"><span class="comment">public synchronized boolean add(E e) &#123;</span></span><br><span class="line"><span class="comment">modCount++;</span></span><br><span class="line"><span class="comment">ensureCapacityHelper(elementCount + 1);</span></span><br><span class="line"><span class="comment">elementData[elementCount++] = e;</span></span><br><span class="line"><span class="comment">return true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">2.2 //确定是否需要扩容 条件 ： minCapacity - elementData.length&gt;0</span></span><br><span class="line"><span class="comment">private void ensureCapacityHelper(int minCapacity) &#123;</span></span><br><span class="line"><span class="comment">// overflow-conscious code</span></span><br><span class="line"><span class="comment">if (minCapacity - elementData.length &gt; 0)</span></span><br><span class="line"><span class="comment">韩顺平循序渐进学 Java 零基础</span></span><br><span class="line"><span class="comment">第 629页</span></span><br><span class="line"><span class="comment">grow(minCapacity);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">2.3 //如果 需要的数组大小 不够用，就扩容 , 扩容的算法</span></span><br><span class="line"><span class="comment">//newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span></span><br><span class="line"><span class="comment">// capacityIncrement : oldCapacity);</span></span><br><span class="line"><span class="comment">//就是扩容两倍. private void grow(int minCapacity) &#123;</span></span><br><span class="line"><span class="comment">// overflow-conscious code</span></span><br><span class="line"><span class="comment">int oldCapacity = elementData.length;</span></span><br><span class="line"><span class="comment">int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span></span><br><span class="line"><span class="comment">capacityIncrement : oldCapacity);</span></span><br><span class="line"><span class="comment">if (newCapacity - minCapacity &lt; 0)</span></span><br><span class="line"><span class="comment">newCapacity = minCapacity;</span></span><br><span class="line"><span class="comment">if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span></span><br><span class="line"><span class="comment">newCapacity = hugeCapacity(minCapacity);</span></span><br><span class="line"><span class="comment">elementData = Arrays.copyOf(elementData, newCapacity);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-ArrayList-和-vector"><a href="#3-ArrayList-和-vector" class="headerlink" title="3)ArrayList 和 vector"></a>3)ArrayList 和 vector</h4><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/3-List%E6%8E%A5%E5%8F%A3/image-20221121221012765.png" alt="image-20221121221012765"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2-集合的遍历</title>
      <link href="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/2-%E9%9B%86%E5%90%88%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/2-%E9%9B%86%E5%90%88%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、iter-———-gt-Iterable-接口里的方法。"><a href="#一、iter-———-gt-Iterable-接口里的方法。" class="headerlink" title="一、iter ———-&gt; Iterable 接口里的方法。"></a>一、iter ———-&gt; Iterable 接口里的方法。</h3><h4 id="how"><a href="#how" class="headerlink" title="how?"></a>how?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 先得到 col 对应的 迭代器</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> col.iterator();</span><br><span class="line"><span class="comment">//2. 使用 while 循环遍历</span></span><br><span class="line"><span class="comment">// while (iterator.hasNext()) &#123;//判断是否还有数据</span></span><br><span class="line"><span class="comment">// //返回下一个元素，类型是 Object</span></span><br><span class="line"><span class="comment">// Object obj = iterator.next();</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;obj=&quot; + obj);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//老师教大家一个快捷键，快速生成 while =&gt; itit</span></span><br><span class="line"><span class="comment">//显示所有的快捷键的的快捷键 ctrl + j</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 当退出 while 循环后 , 这时 iterator 迭代器，指向最后的元素</span></span><br><span class="line"><span class="comment">// iterator.next();//NoSuchElementException</span></span><br><span class="line"><span class="comment">//4. 如果希望再次遍历，需要重置我们的迭代器</span></span><br><span class="line">iterator = col.iterator();</span><br><span class="line">System.out.println(<span class="string">&quot;===第二次遍历===&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">System.out.println(<span class="string">&quot;obj=&quot;</span> + obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/2-%E9%9B%86%E5%90%88%E7%9A%84%E9%81%8D%E5%8E%86/image-20221121162950590.png" alt="image-20221121162950590"></p><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/2-%E9%9B%86%E5%90%88%E7%9A%84%E9%81%8D%E5%8E%86/image-20221121163002700.png" alt="image-20221121163002700"></p><h3 id="二、for-增强循环"><a href="#二、for-增强循环" class="headerlink" title="二、for 增强循环"></a>二、for 增强循环</h3><h4 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h4><p>​底层依然是迭代器。可以在 &#x3D;&#x3D;集合、数组&#x3D;&#x3D;中使用。</p><p>快捷键—-&gt;  输入 &#x3D;&#x3D;I（大写I）&#x3D;&#x3D;</p><h4 id="How"><a href="#How" class="headerlink" title="How"></a>How</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object object:col)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、普通-for-循环"><a href="#三、普通-for-循环" class="headerlink" title="三、普通 for 循环"></a>三、普通 for 循环</h3><h4 id="what"><a href="#what" class="headerlink" title="what?"></a>what?</h4><p>使用 get 方法</p><h4 id="how-1"><a href="#how-1" class="headerlink" title="how"></a>how</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;arrayList.size() ; i++) &#123;</span><br><span class="line">           System.out.println(arrayList.get(i));</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="四、练习"><a href="#四、练习" class="headerlink" title="四、练习"></a>四、练习</h3><p><img src="/2022/11/21/JAVA/9-%E9%9B%86%E5%90%88/2-%E9%9B%86%E5%90%88%E7%9A%84%E9%81%8D%E5%8E%86/image-20221121163522007.png" alt="image-20221121163522007"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-集合入门</title>
      <link href="/2022/11/20/JAVA/9-%E9%9B%86%E5%90%88/1-%E9%9B%86%E5%90%88%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/20/JAVA/9-%E9%9B%86%E5%90%88/1-%E9%9B%86%E5%90%88%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p><img src="/2022/11/20/JAVA/9-%E9%9B%86%E5%90%88/1-%E9%9B%86%E5%90%88%E5%85%A5%E9%97%A8/image-20221120171421439.png" alt="image-20221120171421439"></p><ol><li><p>集合主要是两组(单列集合 , 双列集合) </p></li><li><p>Collection 接口有两个重要的子接口 List Set , 他们的实现子类都是单列集合 &#x2F;&#x2F;</p><ol><li>单列集合<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Collection</span></span><br><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">arrayList.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Map 接口的实现子类 是双列集合，存放的 K-V &#x2F;&#x2F;</p><ol><li>双列集合<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">hashMap.put(<span class="string">&quot;NO1&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">hashMap.put(<span class="string">&quot;NO2&quot;</span>, <span class="string">&quot;上海&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>&#x3D;&#x3D;把两张图记住&#x3D;&#x3D;</p></li></ol><p><img src="/2022/11/20/JAVA/9-%E9%9B%86%E5%90%88/1-%E9%9B%86%E5%90%88%E5%85%A5%E9%97%A8/image-20221120171518671.png" alt="image-20221120171518671"></p><p><img src="/2022/11/20/JAVA/9-%E9%9B%86%E5%90%88/1-%E9%9B%86%E5%90%88%E5%85%A5%E9%97%A8/image-20221120171532128.png" alt="image-20221120171532128"></p><h3 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h3><p><img src="/2022/11/20/JAVA/9-%E9%9B%86%E5%90%88/1-%E9%9B%86%E5%90%88%E5%85%A5%E9%97%A8/image-20221120173011762.png" alt="image-20221120173011762"></p><ul><li><p>子类可以存放多个元素</p></li><li><p>存与取的顺序问题。</p></li><li><p>没有直接实现的子类。</p></li></ul><p><img src="/2022/11/20/JAVA/9-%E9%9B%86%E5%90%88/1-%E9%9B%86%E5%90%88%E5%85%A5%E9%97%A8/image-20221120171518671.png" alt="image-20221120171518671"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.collection_;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionMethod</span> &#123;</span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">// add:添加单个元素</span></span><br><span class="line">list.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">list.add(<span class="number">10</span>);<span class="comment">//list.add(new Integer(10))</span></span><br><span class="line">list.add(<span class="literal">true</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">// remove:删除指定元素</span></span><br><span class="line"><span class="comment">//list.remove(0);//删除第一个元素</span></span><br><span class="line">list.remove(<span class="literal">true</span>);<span class="comment">//指定删除某个元素</span></span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">// contains:查找元素是否存在</span></span><br><span class="line">System.out.println(list.contains(<span class="string">&quot;jack&quot;</span>));<span class="comment">//T</span></span><br><span class="line"><span class="comment">// size:获取元素个数</span></span><br><span class="line">System.out.println(list.size());<span class="comment">//2</span></span><br><span class="line"><span class="comment">// isEmpty:判断是否为空</span></span><br><span class="line">System.out.println(list.isEmpty());<span class="comment">//F</span></span><br><span class="line"><span class="comment">// clear:清空</span></span><br><span class="line">list.clear();</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">// addAll:添加多个元素</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list2.add(<span class="string">&quot;红楼梦&quot;</span>);</span><br><span class="line">list2.add(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">list.addAll(list2);</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);</span><br><span class="line"><span class="comment">// containsAll:查找多个元素是否都存在</span></span><br><span class="line">System.out.println(list.containsAll(list2));<span class="comment">//T</span></span><br><span class="line"><span class="comment">// removeAll：删除多个元素</span></span><br><span class="line">list.add(<span class="string">&quot;聊斋&quot;</span>);</span><br><span class="line">list.removeAll(list2);</span><br><span class="line">System.out.println(<span class="string">&quot;list=&quot;</span> + list);<span class="comment">//[聊斋]</span></span><br><span class="line"><span class="comment">// 说明：以 ArrayList 实现类来演示. &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>list.add(10);&#x2F;&#x2F;list.add(new Integer(10)),—&gt; 放入的是一个&#x3D;&#x3D;对象&#x3D;&#x3D;，只是默认有&#x3D;&#x3D;自动装箱的过程&#x3D;&#x3D;</p><p>Sytem.out.println(arraylist)—&gt;逐个输出，自动拆箱。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-String结构剖析</title>
      <link href="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/3-String%E7%BB%93%E6%9E%84%E5%89%96%E6%9E%90/"/>
      <url>/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/3-String%E7%BB%93%E6%9E%84%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p><img src="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/3-String%E7%BB%93%E6%9E%84%E5%89%96%E6%9E%90/image-20221119164435119.png" alt="image-20221119164435119"></p><p>serializable:网络传输</p><p>comparable：比较</p><p>charsequence: 字符序列</p><p>String</p><ol><li><p>String 对象用于保存字符串，也就是一组字符序列 </p></li><li><p>“jack” 字符串常量, 双引号括起的字符序列 &#x2F;&#x2F;</p></li><li><p>字符串的字符使用 Unicode 字符编码，一个字符(不区分字母还是汉字)占两个字节 &#x2F;&#x2F;</p></li><li><p>String 类有&#x3D;&#x3D;很多构造器&#x3D;&#x3D;，构造器的重载</p><ol><li>&#x2F;常用的有 String s1 &#x3D; new String(); &#x2F;&#x2F; &#x2F;&#x2F;</li><li>String s2 &#x3D; new String(String original); &#x2F;&#x2F;</li><li>String s3 &#x3D; new String(char[] a); &#x2F;&#x2F;</li><li>String s4 &#x3D; new String(char[] a,int startIndex,int count) &#x2F;&#x2F;</li><li>String s5 &#x3D; new String(byte[] b) &#x2F;&#x2F;</li></ol></li><li><p>String 类实现了接口 Serializable【String 可以串行化:可以在网络传输】 &#x2F;&#x2F; </p></li><li><p>接口 Comparable [String 对象可以比较大小] &#x2F;&#x2F;6.</p></li><li><p>String 是 final 类，不能被其他的类继承 &#x2F;&#x2F;7. </p></li><li><p>！！！！！！！！String 有属性 private final char value[]; 用于存放字符串内容 ！！！！！！！！！！！！！！！<br><img src="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/3-String%E7%BB%93%E6%9E%84%E5%89%96%E6%9E%90/image-20221119165336796.png" alt="image-20221119165336796"></p><ol><li><p>&#x3D;&#x3D;一定要注意：value 是一个 final 类型， 不可以修改(需要功力)：即 value 不能指向 &#x2F;&#x2F; 新的地址，但是单个字符内容是可以变化&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">name = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">char</span>[] value = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span>[] v2 = &#123;<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;m&#x27;</span>&#125;;</span><br><span class="line">value[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span>; √</span><br><span class="line">    value=v2 × 不可以修改 value 地址</span><br><span class="line"><span class="comment">//value = v2; 不可以修改 value 地址</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="how？"><a href="#how？" class="headerlink" title="how？"></a>how？</h4><p><img src="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/3-String%E7%BB%93%E6%9E%84%E5%89%96%E6%9E%90/image-20221119170341507.png" alt="image-20221119170341507"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2-Integer创建机制</title>
      <link href="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/2-Integer%E5%88%9B%E5%BB%BA%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/2-Integer%E5%88%9B%E5%BB%BA%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperExercise02</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">System.out.println(i == j); <span class="comment">//False --&gt;比较内存地址。</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// valueof（手动装箱和自动装箱的原理）的源码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line"><span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">老韩解读</span></span><br><span class="line"><span class="comment">//1. 如果 i 在 IntegerCache.low(-128)~IntegerCache.high(127),就直接从数组返回</span></span><br><span class="line"><span class="comment">//2. 如果不在 -128~127,就直接 new Integer(i)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//底层 Integer.valueOf(1); -&gt; 阅读源码</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//底层 Integer.valueOf(1);</span></span><br><span class="line">System.out.println(m == n); <span class="comment">//Ttru</span></span><br><span class="line"><span class="comment">//所以，这里主要是看范围 -128 ~ 127 就是直接返回</span></span><br><span class="line"><span class="comment">//，否则，就 new Integer(xx);</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">128</span>;<span class="comment">//底层 Integer.valueOf(1);</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">128</span>;<span class="comment">//底层 Integer.valueOf(1);</span></span><br><span class="line">System.out.println(x == y);<span class="comment">//False</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码中 integercache.cache在类加载时完成了加载</p><p><img src="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/2-Integer%E5%88%9B%E5%BB%BA%E6%9C%BA%E5%88%B6/image-20221119162543116.png" alt="image-20221119162543116"></p><h3 id="二、面试题"><a href="#二、面试题" class="headerlink" title="二、面试题"></a>二、面试题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">看看下面代码，输出什么结果.WrapperExercise03.java 5min</span><br><span class="line"><span class="keyword">package</span> com.hspedu.wrapper;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperExercise03</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//示例一</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line">System.out.println(i1 == i2);<span class="comment">//F</span></span><br><span class="line"><span class="comment">//示例二</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line">System.out.println(i3 == i4);<span class="comment">//F</span></span><br><span class="line"><span class="comment">//示例三</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i5</span> <span class="operator">=</span> <span class="number">127</span>;<span class="comment">//底层 Integer.valueOf(127)</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i6</span> <span class="operator">=</span> <span class="number">127</span>;<span class="comment">//-128~127</span></span><br><span class="line">System.out.println(i5 == i6); <span class="comment">//T</span></span><br><span class="line"><span class="comment">//示例四</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i7</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i8</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">System.out.println(i7 == i8);<span class="comment">//F</span></span><br><span class="line"><span class="comment">//示例五</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i9</span> <span class="operator">=</span> <span class="number">127</span>; <span class="comment">//Integer.valueOf(127)</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line">System.out.println(i9 == i10);<span class="comment">//F</span></span><br><span class="line"><span class="comment">//示例六</span></span><br><span class="line">Integer i11=<span class="number">127</span>;</span><br><span class="line"><span class="type">int</span> i12=<span class="number">127</span>;</span><br><span class="line">    ===========================================</span><br><span class="line"> 只要有基本数据类型，判断的是</span><br><span class="line">    值是否相等。 </span><br><span class="line">    这里 i11 自动调用了 intValue 方法</span><br><span class="line">System.out.println(i11==i12); <span class="comment">//T</span></span><br><span class="line"><span class="comment">//示例七</span></span><br><span class="line">Integer i13=<span class="number">128</span>;</span><br><span class="line"><span class="type">int</span> i14=<span class="number">128</span>;</span><br><span class="line">System.out.println(i13==i14);<span class="comment">//T</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-包装类入门</title>
      <link href="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/1-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/1-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><p>包装类—&gt; 基本数据类型的扩展</p><p><img src="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/1-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221119145240988.png" alt="image-20221119145240988"></p><p><img src="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/1-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221119145248728.png" alt="image-20221119145248728"></p><p><img src="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/1-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221119145257527.png" alt="image-20221119145257527"></p><h3 id="二、装箱"><a href="#二、装箱" class="headerlink" title="二、装箱"></a>二、装箱</h3><p><img src="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/1-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221119145321510.png" alt="image-20221119145321510"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//手动装箱</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> Integer.valueOf(i);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//手动拆箱</span></span><br><span class="line">        <span class="type">int</span> i1=integer.intValue();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//自动装箱 ---&gt; 直接将 int 类型 转换为 </span></span><br><span class="line">        Integer intetger3=i;</span><br><span class="line">        <span class="comment">//自动拆箱</span></span><br><span class="line">        <span class="type">int</span> i2=intetger3;</span><br></pre></td></tr></table></figure><p>自动装箱底层 –&gt; 依然走的 valueof方法</p><p><img src="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/1-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221119145653088.png" alt="image-20221119145653088"></p><p>自动拆箱 —&gt; Intvalue</p><p><img src="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/1-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221119151455024.png" alt="image-20221119151455024"></p><h3 id="三、包装类测试"><a href="#三、包装类测试" class="headerlink" title="三、包装类测试"></a>三、包装类测试</h3><p><img src="/2022/11/19/JAVA/8-%E5%8C%85%E8%A3%85%E7%B1%BB/1-%E5%8C%85%E8%A3%85%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221119151914020.png" alt="image-20221119151914020"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> Object object=<span class="literal">true</span>?<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>):<span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);</span><br><span class="line">        System.out.println(object);</span><br><span class="line">        Object object1;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            object1=<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            object1=<span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(object1);</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>5-自定义异常</title>
      <link href="/2022/11/19/JAVA/7-Exception/5-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/"/>
      <url>/2022/11/19/JAVA/7-Exception/5-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p> 1.基本概念</p><p><img src="/2022/11/19/JAVA/7-Exception/5-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/image-20230110151746331.png" alt="image-20230110151746331"></p><p>2.自定义异常的步骤</p><ul><li>1.定义异常类，并继承 Exception 或 runtimeException<ul><li>Excepetion 一般为编译异常</li><li>RuntimeExcetion 一般为运行异常</li></ul></li></ul><p>3.案例</p><p>两个题目</p><p><img src="/2022/11/19/JAVA/7-Exception/5-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/image-20221119143300678.png" alt="image-20221119143300678"></p><p><img src="/2022/11/19/JAVA/7-Exception/5-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/image-20221119143308906.png" alt="image-20221119143308906"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>4-throws异常处理</title>
      <link href="/2022/11/19/JAVA/7-Exception/4-throws%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2022/11/19/JAVA/7-Exception/4-throws%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="/2022/11/19/JAVA/7-Exception/4-throws%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20221119133344040.png" alt="image-20221119133344040"></p><p>3.<img src="/2022/11/19/JAVA/7-Exception/4-throws%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20221119133335191.png" alt="image-20221119133335191"></p><p>案例</p><ol><li>编译异常一定要进行处理。—&gt;必须进行显示处理<ol><li>throws 给调用此方法的方法<ol><li>调用此方法的方法进行处理<ol><li>throws</li><li>try catch</li></ol></li></ol></li><li>try catch</li></ol></li><li>运行异常 —&gt; java 中具有默认处理 —&gt;throws<ol><li>显示处理<ol><li>try cathch</li><li>throws</li></ol></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.throws_;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThrowsDetail</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">f2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">()</span> <span class="comment">/*throws ArithmeticException*/</span> &#123;</span><br><span class="line"><span class="comment">//1.对于编译异常，程序中必须处理，比如 try-catch 或者 throws</span></span><br><span class="line"><span class="comment">//2.对于运行时异常，程序中如果没有处理，默认就是 throws 的方式处理</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> n1 / n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"><span class="comment">//这里大家思考问题 调用 f3() 报错</span></span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1. 因为 f3() 方法抛出的是一个编译异常</span></span><br><span class="line"><span class="comment">//2. 即这时，就要 f1() 必须处理这个编译异常</span></span><br><span class="line"><span class="comment">//3. 在 f1() 中，要么 try-catch-finally ,或者继续 throws 这个编译异常</span></span><br><span class="line">f3(); <span class="comment">// 抛出异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f3</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;d://aa.txt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f4</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//老韩解读:</span></span><br><span class="line"><span class="comment">//1. 在 f4()中调用方法 f5() 是 OK</span></span><br><span class="line"><span class="comment">//2. 原因是 f5() 抛出的是运行异常</span></span><br><span class="line"><span class="comment">//3. 而 java 中，并不要求程序员显示处理,因为有默认处理机制</span></span><br><span class="line">f5();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f5</span><span class="params">()</span> <span class="keyword">throws</span> ArithmeticException &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">韩顺平循序渐进学 Java 零基础</span><br><span class="line">第 <span class="number">528</span>页</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123; <span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;<span class="comment">//子类</span></span><br><span class="line"><span class="comment">//3. 子类重写父类的方法时，对抛出异常的规定:子类重写的方法，</span></span><br><span class="line"><span class="comment">// 所抛出的异常类型要么和父类抛出的异常一致，要么为父类抛出的异常类型的子类型</span></span><br><span class="line"><span class="comment">//4. 在 throws 过程中，如果有方法 try-catch , 就相当于处理异常，就可以不必 throws</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> ArithmeticException &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/18/MySQL/JDBC/1-JDBC%E6%A6%82%E8%BF%B0/0-JDBC%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/1-%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/"/>
      <url>/2022/11/18/MySQL/JDBC/1-JDBC%E6%A6%82%E8%BF%B0/0-JDBC%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/1-%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>基本 sql 语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select field, from table_name where fielid3 like &#x27;%xxx%&#x27;</span><br></pre></td></tr></table></figure><p>JDBC中的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> String sql=<span class="string">&quot;select * from blogTable where title like ?&quot;</span>;</span><br><span class="line">preparedStatement=connection.prepareStatement(sql);</span><br><span class="line">       String keyword_v2=<span class="string">&quot;%&quot;</span>+keyword+<span class="string">&quot;%&quot;</span>;</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,keyword_v2);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3-两种异常处理机制</title>
      <link href="/2022/11/16/JAVA/7-Exception/3-%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/11/16/JAVA/7-Exception/3-%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="/2022/11/16/JAVA/7-Exception/3-%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/image-20221116213815625.png" alt="image-20221116213815625"></p><h3 id="一、try-catch-finnally"><a href="#一、try-catch-finnally" class="headerlink" title="一、try-catch-finnally"></a>一、try-catch-finnally</h3><h4 id="1-try-catch-finally"><a href="#1-try-catch-finally" class="headerlink" title="1)try-catch-finally"></a>1)try-catch-finally</h4><p>ctrl + alt + t</p><p>程序员在代码中捕获发生的异常，自行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    可能有异常的代码块</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">//捕获到异常</span></span><br><span class="line">    <span class="number">1.</span>当一场发生时</span><br><span class="line">    <span class="number">2.</span>系统将异常封装成 exception 对象 e，传递给<span class="keyword">catch</span></span><br><span class="line">    <span class="number">3.</span>得到异常对象后，程序猿，自己处理</span><br><span class="line">        </span><br><span class="line">！！<span class="number">4.</span>注意，如果没有发生异常，<span class="keyword">catch</span> 代码快不执行！！！！</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="number">1.</span>不管<span class="keyword">try</span>代码快是否发生异常，都会执行<span class="keyword">finally</span>代码快里的。</span><br><span class="line">    <span class="number">2.</span>通常将释放资源的代码放在 <span class="keyword">finally</span>。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2)throws</p><p>将发生的异常抛出，交给调用者(方法)来处理，最顶级的处理者就是 JVM。</p><h4 id="2-注意点"><a href="#2-注意点" class="headerlink" title="2)注意点"></a>2)注意点</h4><p><img src="/2022/11/16/JAVA/7-Exception/3-%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/image-20221116215843007.png" alt="image-20221116215843007"></p><ol><li><p>如果异常发生了那，异常后面的代码不会执行，直接进入catch快。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exception2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String str=<span class="string">&quot;13a&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>Integer.parseInt(str);</span><br><span class="line">            System.out.println(<span class="string">&quot;前面发生后面这个不会执行了&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现异常进入catch&quot;</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;代码继续执行trycatch后面的代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finaly被执行了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">=====</span><br><span class="line">出现异常进入catchFor input string: <span class="string">&quot;13a&quot;</span></span><br><span class="line">    finaly被执行了</span><br><span class="line">代码继续执行trycatch后面的代码</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>可以由多个 catch 语句，捕获不同的异常。 但要求&#x3D;&#x3D;父类异常在后，子类异常在前&#x3D;&#x3D;。比如(EXCEPTION 在后，nullpointexception 在前。) 。如果报错，&#x3D;&#x3D;只会匹配一个 catch&#x3D;&#x3D;</li></ol><p><img src="/2022/11/16/JAVA/7-Exception/3-%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/image-20221116220408732.png" alt="image-20221116220408732"><img src="/2022/11/16/JAVA/7-Exception/3-%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/image-20221116220822674.png" alt="image-20221116220822674"></p></li><li><p>不管结果怎么样，最终都要执行 finally 的方法<img src="/2022/11/16/JAVA/7-Exception/3-%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/image-20221116220932055.png" alt="image-20221116220932055"><br>案例<br><img src="/2022/11/16/JAVA/7-Exception/3-%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/image-20221116221058103.png" alt="image-20221116221058103"><br>这里出现异常没有进行 catch ，则直接到 finally ，然后就退出该方法了，不会继续执行后面的代码。</p></li></ol><h3 id="二、throw"><a href="#二、throw" class="headerlink" title="二、throw"></a>二、throw</h3><blockquote><p>如果程序抛出了异常，而没有进行异常捕获处理，那默认就是 throw 抛出这个异常。</p></blockquote><p><img src="/2022/11/16/JAVA/7-Exception/3-%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/image-20221116215345573.png" alt="image-20221116215345573"></p><h3 id="三、案例分析"><a href="#三、案例分析" class="headerlink" title="三、案例分析"></a>三、案例分析</h3><p>1.try&#x2F;catch finally</p><p>1.1</p><p><img src="/2022/11/16/JAVA/7-Exception/3-%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/image-20221116223021962.png" alt="image-20221116223021962"></p><blockquote><p>finally 优先级很高，必须执行！！！！。</p></blockquote><p>1.2<img src="/2022/11/16/JAVA/7-Exception/3-%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/image-20221116223201338.png" alt="image-20221116223201338"></p><blockquote><p>return i++; ，i++会执行，但因为必须执行 finally ，所以先不能执行 return。</p></blockquote><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p><img src="/2022/11/16/JAVA/7-Exception/3-%E4%B8%A4%E7%A7%8D%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/image-20221116223943319.png" alt="image-20221116223943319"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2-五大常见异常</title>
      <link href="/2022/11/16/JAVA/7-Exception/2-%E4%BA%94%E5%A4%A7%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/"/>
      <url>/2022/11/16/JAVA/7-Exception/2-%E4%BA%94%E5%A4%A7%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、运行异常"><a href="#一、运行异常" class="headerlink" title="一、运行异常"></a>一、运行异常</h3><p><img src="/2022/11/16/JAVA/7-Exception/2-%E4%BA%94%E5%A4%A7%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/image-20221116213051374.png" alt="image-20221116213051374"></p><p><img src="/2022/11/16/JAVA/7-Exception/2-%E4%BA%94%E5%A4%A7%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/image-20221116213057799.png" alt="image-20221116213057799"></p><p><img src="/2022/11/16/JAVA/7-Exception/2-%E4%BA%94%E5%A4%A7%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/image-20221116213133619.png" alt="image-20221116213133619"></p><p><img src="/2022/11/16/JAVA/7-Exception/2-%E4%BA%94%E5%A4%A7%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/image-20221116213141514.png" alt="image-20221116213141514"></p><p>4-类型转换异常 —-&gt;将对象强制转换为不是实例的子类。<img src="/2022/11/16/JAVA/7-Exception/2-%E4%BA%94%E5%A4%A7%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/image-20221116213202801.png" alt="image-20221116213202801"></p><ul><li><img src="/2022/11/16/JAVA/7-Exception/2-%E4%BA%94%E5%A4%A7%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/image-20221116213308955.png" alt="image-20221116213308955"></li></ul><p>5.数字格式不正确异常。<img src="/2022/11/16/JAVA/7-Exception/2-%E4%BA%94%E5%A4%A7%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/image-20221116213319567.png" alt="image-20221116213319567"></p><h3 id="二、编译异常。"><a href="#二、编译异常。" class="headerlink" title="二、编译异常。"></a>二、编译异常。</h3><p><img src="/2022/11/16/JAVA/7-Exception/2-%E4%BA%94%E5%A4%A7%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/image-20221116213529359.png" alt="image-20221116213529359"></p><p><img src="/2022/11/16/JAVA/7-Exception/2-%E4%BA%94%E5%A4%A7%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/image-20221116213720853.png" alt="image-20221116213720853"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-异常入门</title>
      <link href="/2022/11/16/JAVA/7-Exception/1-%E5%BC%82%E5%B8%B8%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/16/JAVA/7-Exception/1-%E5%BC%82%E5%B8%B8%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><h4 id="1-引出："><a href="#1-引出：" class="headerlink" title="1)引出："></a>1)引出：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">对异常进行捕获，保证程序可以继续运行. 看老师的代码演示 <span class="keyword">try</span>-<span class="keyword">catch</span></span><br><span class="line"><span class="keyword">package</span> com.hspedu.exception_;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//Scanner();</span></span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1. num1 / num2 =&gt; 10 / 0</span></span><br><span class="line"><span class="comment">//2. 当执行到 num1 / num2 因为 num2 = 0, 程序就会出现(抛出)异常 ArithmeticException</span></span><br><span class="line"><span class="comment">//3. 当抛出异常后，程序就退出，崩溃了 , 下面的代码就不在执行</span></span><br><span class="line"><span class="comment">//4. 大家想想这样的程序好吗? 不好，不应该出现了一个不算致命的问题，就导致整个系统崩溃</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>java 设计者，提供了一个叫 异常处理机制来解决该问题  try catch</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int res = num1 / num2;</span></span><br><span class="line">如果程序员，认为一段代码可能出现异常/问题，可以使用 <span class="keyword">try</span>-<span class="keyword">catch</span> 异常处理机制来解决</span><br><span class="line">从而保证程序的健壮性</span><br><span class="line">将该代码块-&gt;选中-&gt;快捷键 ctrl + alt + t -&gt; 选中 <span class="keyword">try</span>-<span class="keyword">catch</span></span><br><span class="line"><span class="number">6.</span> 如果进行异常处理(c)，那么即使出现了异常，程序可以继续执行。</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> num1 / num2;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line">System.out.println(<span class="string">&quot;出现异常的原因=&quot;</span> + e.getMessage());<span class="comment">//输出异常信息</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;程序继续运行....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-分类"><a href="#2-分类" class="headerlink" title="2)分类"></a>2)分类</h4><ul><li>Error(错误)：java 虚拟机无法解决的问题。如：jvm系统内部错误、资源耗尽等严重情况。比如：stackovererror[栈溢出]和 OOM（out of memory），error 是严重错误，程序会奔溃。</li><li>Exception：其他因编程错误或偶然的外在因素导致的。<ul><li>编译时异常[&#x3D;&#x3D;编译时&#x3D;&#x3D;，编译器检查出的异常]</li><li>运行时异常[程序&#x3D;&#x3D;运行时&#x3D;&#x3D;，程序出现的异常] –&gt; 例如空指针</li></ul></li></ul><p><img src="/2022/11/16/JAVA/7-Exception/1-%E5%BC%82%E5%B8%B8%E5%85%A5%E9%97%A8/image-20221116210909156.png" alt="image-20221116210909156"></p><blockquote><p>Throwable–&gt;本类 。</p><p>—虚线为实现了接口</p><p>——为子类</p></blockquote><p><img src="/2022/11/16/JAVA/7-Exception/1-%E5%BC%82%E5%B8%B8%E5%85%A5%E9%97%A8/image-20221116211025214.png" alt="image-20221116211025214"></p><p>小结</p><p><img src="/2022/11/16/JAVA/7-Exception/1-%E5%BC%82%E5%B8%B8%E5%85%A5%E9%97%A8/image-20221116212657171.png" alt="image-20221116212657171"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jhfuture.Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">customerexctpion</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="comment">/*throws AgeException*/</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">180</span>;</span><br><span class="line"><span class="comment">//要求范围在 18 – 120 之间，否则抛出一个自定义异常</span></span><br><span class="line">            <span class="keyword">if</span>(!(age &gt;= <span class="number">18</span> &amp;&amp; age &lt;= <span class="number">120</span>)) &#123;</span><br><span class="line"><span class="comment">//这里我们可以通过构造器，设置信息</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span>(<span class="string">&quot;年龄需要在 18~120 之间&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;你的年龄范围正确.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义一个异常</span></span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1. 一般情况下，我们自定义异常是继承 RuntimeException</span></span><br><span class="line"><span class="comment">//2. 即把自定义异常做成 运行时异常，好处时，我们可以使用默认的处理机制</span></span><br><span class="line"><span class="comment">//3. 即比较方便</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">            <span class="built_in">super</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>6-服务器端转发和客户端重定向</title>
      <link href="/2022/11/16/JavaWeb/servlet/6-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%BD%AC%E5%8F%91%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%87%8D%E5%AE%9A%E5%90%91/"/>
      <url>/2022/11/16/JavaWeb/servlet/6-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%BD%AC%E5%8F%91%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="/2022/11/16/JavaWeb/servlet/6-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%BD%AC%E5%8F%91%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%87%8D%E5%AE%9A%E5%90%91/image-20221116114942776.png" alt="image-20221116114942776"></p><p>服务端转发</p><p>&#x3D;&#x3D;request.getRequestDispatcher(“demo7”).forward(request,response);&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">demo6</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo6Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">     <span class="comment">//内部转发</span></span><br><span class="line">        System.out.println(<span class="string">&quot;demo6&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;demo7&quot;</span>).forward(request,response);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dmeo7</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo7Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//内部转发</span></span><br><span class="line">        System.out.println(<span class="string">&quot;demo7&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/11/16/JavaWeb/servlet/6-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%BD%AC%E5%8F%91%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%87%8D%E5%AE%9A%E5%90%91/image-20221116144918845.png" alt="image-20221116144918845">路径不发生改变</p><p><img src="/2022/11/16/JavaWeb/servlet/6-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%BD%AC%E5%8F%91%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%87%8D%E5%AE%9A%E5%90%91/image-20221116111023245.png" alt="image-20221116111023245"></p><p>客户端重定向</p><p><img src="/2022/11/16/JavaWeb/servlet/6-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%BD%AC%E5%8F%91%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%87%8D%E5%AE%9A%E5%90%91/image-20221116113858712.png" alt="image-20221116113858712"></p><p><img src="/2022/11/16/JavaWeb/servlet/6-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%BD%AC%E5%8F%91%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%87%8D%E5%AE%9A%E5%90%91/image-20221116145113163.png" alt="image-20221116145113163">发送改变并且有两个请求</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-局部内部类入门</title>
      <link href="/2022/11/15/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/1-%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB/1-%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/15/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/1-%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB/1-%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><p><img src="/2022/11/15/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/1-%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB/1-%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221115222731602.png" alt="image-20221115222731602"></p><p><img src="/2022/11/15/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/1-%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB/1-%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221115223550340.png" alt="image-20221115223550340"></p><p>记住：</p><p>(1)局部内部类定义在方法&#x2F;代码块中</p><p>(2) 作用域在方法体&#x2F;代码块中。—&gt;定义它的地方</p><p>(3)本质还是一个方法</p><p>()</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-枚举</title>
      <link href="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/1-%E6%9E%9A%E4%B8%BE/"/>
      <url>/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/1-%E6%9E%9A%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/1-%E6%9E%9A%E4%B8%BE/image-20221116153231003.png" alt="image-20221116153231003"></p><p><img src="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/1-%E6%9E%9A%E4%B8%BE/image-20221116153251740.png" alt="image-20221116153251740"></p><p><img src="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/1-%E6%9E%9A%E4%B8%BE/image-20220720155346506.png" alt="image-20220720155346506"></p><p><img src="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/1-%E6%9E%9A%E4%B8%BE/image-20220720155859138.png" alt="image-20220720155859138"></p><ol><li><p>toString:Enum 类已经重写过了，返回的是当前对象 名,子类可以重写该方法，用于返回对象的属性信息 </p></li><li><p>name：返回当前对象名（常量名），子类中不能重写 </p></li><li><p>ordinal：返回当前对象的位置号，默认从 0 开始 </p></li><li><p>values：返回当前枚举类中所有的常量 </p></li><li><p>valueOf：将字符串转换成枚举对象，要求字符串必须 为已有的常量名，否则报异常！ </p></li><li><p>compareTo：比较两个枚举常量，比较的就是编号！ 7) 代码</p></li></ol><p><img src="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/1-%E6%9E%9A%E4%B8%BE/image-20221116161253012.png" alt="image-20221116161253012"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-注解</title>
      <link href="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/2-%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/2-%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><p>注解的理解 </p><ol><li>注解(Annotation)也被称为元数据(Metadata)，用于修饰解释 包、类、方法、属性、构造器、局部变量等数据信息。 </li><li>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息。 </li><li>在 JavaSE 中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在 JavaEE 中注解占据了更重要的角 色，例如用来配置应用程序的任何切面，代替 java EE 旧版中所遗留的繁冗代码和 XML 配置等。</li></ol><p>基本的 Annotation 介绍<br>使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元<br>素<br>三个基本的 Annotation:</p><ol><li>@Override: 限定某个方法，是重写父类方法, 该注解只能用于方法</li><li>@Deprecated: 用于表示某个程序元素(类, 方法等)已过时</li><li>@SuppressWarnings: 抑制编译器警告</li></ol><p><img src="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/2-%E6%B3%A8%E8%A7%A3/image-20221116162804499.png" alt="image-20221116162804499"></p><p><img src="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/2-%E6%B3%A8%E8%A7%A3/image-20221116162939749.png" alt="image-20221116162939749"></p><h3 id="二、逐个分析"><a href="#二、逐个分析" class="headerlink" title="二、逐个分析"></a>二、逐个分析</h3><h4 id="1-override"><a href="#1-override" class="headerlink" title="1.override"></a>1.override</h4><p>重写</p><h4 id="2-Deprecated"><a href="#2-Deprecated" class="headerlink" title="2.Deprecated"></a>2.Deprecated</h4><ol><li><p>@Deprecated 修饰某个元素, 表示该元素已经过时 &#x2F;&#x2F;</p></li><li><p>即不在推荐使用，但是仍然可以使用 </p></li><li><p>查看 @Deprecated 注解类的源码 韩顺平循序渐进学 Java 零基础 第 495页</p></li><li><p>可以修饰方法，类，字段, 包, 参数 等等 </p></li><li><p>@Deprecated 可以做版本升级过渡使用 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-SuppressWarnings-抑制编译警告。"><a href="#3-SuppressWarnings-抑制编译警告。" class="headerlink" title="3. SuppressWarnings  抑制编译警告。"></a>3. SuppressWarnings  抑制编译警告。</h4><p>​    </p><p>&#x2F;&#x2F;1. 当我们不希望看到这些警告的时候，可以使用 SuppressWarnings 注解来抑制警告信息<br>&#x2F;&#x2F;2. 在{“”} 中，可以写入你希望抑制(不显示)警告信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;&#123;all,boxing,&#125;&quot;)</span></span><br></pre></td></tr></table></figure><ol start="3"><li>可以指定的警告类型有:</li></ol><ul><li><p>all，抑制所有警告</p></li><li><p>boxing，抑制与封装&#x2F;拆装作业相关的警告</p></li><li><p>cast，抑制与强制转型作业相关的警告</p></li><li><p>dep-ann，抑制与淘汰注释相关的警告</p></li><li><p>deprecation，抑制与淘汰的相关警告</p></li><li><p>fallthrough，抑制与 switch 陈述式中遗漏 break 相关的警告</p></li><li><p>finally，抑制与未传回 finally 区块相关的警告</p></li><li><p>hiding，抑制与隐藏变数的区域变数相关的警告</p></li><li><p>incomplete-switch，抑制与 switch 陈述式(enum case)中遗漏项目相关的警告</p></li><li><p>javadoc，抑制与 javadoc 相关的警告</p></li><li><p>nls，抑制与非 nls 字串文字相关的警告</p></li><li><p>null，抑制与空值分析相关的警告</p></li><li><p>rawtypes，抑制与使用 raw 类型相关的警告</p></li><li><p>resource，抑制与使用 Closeable 类型的资源相关的警告</p></li><li><p>restriction，抑制与使用不建议或禁止参照相关的警告</p></li><li><p>serial，抑制与可序列化的类别遗漏 serialVersionUID 栏位相关的警告</p></li><li><p>static-access，抑制与静态存取不正确相关的警告</p></li><li><p>static-method，抑制与可能宣告为 static 的方法相关的警告</p></li><li><p>super，抑制与置换方法相关但不含 super 呼叫的警告</p></li><li><p>synthetic-access，抑制与内部类别的存取未最佳化相关的警告</p></li><li><p>sync-override，抑制因为置换同步方法而遗漏同步化的警告</p></li><li><p>unchecked，抑制与未检查的作业相关的警告</p></li><li><p>unqualified-field-access，抑制与栏位存取不合格相关的警告</p></li><li><p>unused，抑制与未用的程式码及停用的程式码相关的警告</p></li></ul><ol start="4"><li>作用范围和放置的位置有关。 —-&gt;通常放在 具体的语句&#x2F;方法&#x2F;类 &#x3D;&#x3D;上&#x3D;&#x3D;</li></ol><p> &#x2F;比如 @SuppressWarnings 放置在 main 方法，那么抑制警告的范围就是 main </p><p>&#x2F;&#x2F; 通常我们可以放置具体的语句, </p><h3 id="三、元注解"><a href="#三、元注解" class="headerlink" title="三、元注解"></a>三、元注解</h3><p><img src="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/2-%E6%B3%A8%E8%A7%A3/image-20221116194503733.png" alt="image-20221116194503733"></p><blockquote><p>元注解：修饰注解的注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Target --&gt; 在哪地方使用</span><br><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class="line">Retention --&gt; 注解的作用范围</span><br><span class="line">    source 源码</span><br><span class="line">    class 类</span><br><span class="line">       runtime 运行时</span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line">Documented 指定该注解是否会在 javadoc 体现</span><br><span class="line"><span class="meta">@Inherited</span> 子类会继承父类注解。</span><br></pre></td></tr></table></figure><h4 id="1-Retention"><a href="#1-Retention" class="headerlink" title="1.Retention"></a>1.Retention</h4><p><img src="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/2-%E6%B3%A8%E8%A7%A3/image-20221116194743026.png" alt="image-20221116194743026"></p><ul><li>source<br>编译器使用后，直接丢弃这种策略的注释。</li><li>class<br>编译器将注释记录放在 class 文件中，当运行 java 程序时，jvm 不会保留注解。</li><li>runtime<br>编译器保留在 class 文件中，jvm 会保留，可以通过反射获取该注释。</li></ul><p><img src="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/2-%E6%B3%A8%E8%A7%A3/image-20221116195312259.png" alt="image-20221116195312259"></p><h4 id="2-Target"><a href="#2-Target" class="headerlink" title="2.Target"></a>2.Target</h4><p><img src="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/2-%E6%B3%A8%E8%A7%A3/image-20221116195730682.png" alt="image-20221116195730682"></p><h4 id="3-Documented"><a href="#3-Documented" class="headerlink" title="3.Documented"></a>3.Documented</h4><p><img src="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/2-%E6%B3%A8%E8%A7%A3/image-20221116203123029.png" alt="image-20221116203123029"></p><h4 id="4-inherited"><a href="#4-inherited" class="headerlink" title="4.inherited"></a>4.inherited</h4><p><img src="/2022/11/15/JAVA/6-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/2-%E6%B3%A8%E8%A7%A3/image-20221116203139525.png" alt="image-20221116203139525"></p><blockquote><p>A 具有 inherited 注解，B是 A 的子类，那么它将自动拥有这个注解</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-内部类总结</title>
      <link href="/2022/11/15/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/0-%E5%86%85%E9%83%A8%E7%B1%BB%E6%80%BB%E7%BB%93/"/>
      <url>/2022/11/15/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/0-%E5%86%85%E9%83%A8%E7%B1%BB%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简要"><a href="#一、简要" class="headerlink" title="一、简要"></a>一、简要</h3><h4 id="一、类型"><a href="#一、类型" class="headerlink" title="一、类型"></a>一、类型</h4><p>（1）内部类有四种</p><ul><li>局部内部类</li><li>匿名内部类！！！！<ul><li>new 类&#x2F;接口(参数列表){|<br>}</li><li></li></ul></li><li>成员内部类</li><li>静态内部类</li></ul><h4 id="二、自我总结要点"><a href="#二、自我总结要点" class="headerlink" title="二、自我总结要点"></a>二、自我总结要点</h4><ol><li><p>成员内部类和静态内部类 都是放在外部类的&#x3D;&#x3D;成员位置&#x3D;&#x3D;，本质上就是一个成员</p><ol><li>可以使用修饰符进行修饰</li><li>静态类拥有 static 的属性。<ol><li>只能访问 外部类中 static  修饰的静态属性。</li><li>使用 &#x3D;&#x3D;外部类.成员名&#x3D;&#x3D; 访问内外同名成员（本内部类中和外部类同名的属性&#x2F;方法）</li></ol></li></ol></li><li><p>当 外部类和子类的成员重名时。!!!!! 不重名就直接&#x3D;&#x3D;就近原则&#x3D;&#x3D;</p><ol><li>outerClss.&#x3D;&#x3D;this&#x3D;&#x3D;.memberName<ol><li>局部内部类</li><li>成员内部类</li><li>匿名内部类</li></ol></li><li>outerClass.memberName<ol><li>静态成员内部类，因为 静态属性可以直接使用 &#x3D;&#x3D;类名.xxx&#x3D;&#x3D;。</li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-静态内部类入门</title>
      <link href="/2022/11/15/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/4-%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB/1-%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/15/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/4-%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB/1-%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><p><img src="/2022/11/15/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/4-%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB/1-%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221115211650611.png" alt="image-20221115211650611"></p><p>what?</p><p>​定义在 outer类 的&#x3D;&#x3D;成员位置&#x3D;&#x3D;，并且有 static 修饰。</p><p>how</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outerName=<span class="string">&quot;我是一个外部类的私有属性&quot;</span>;</span><br><span class="line">    <span class="comment">//1.放在成员位置</span></span><br><span class="line">    <span class="comment">//2.static 修饰</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">inner</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name=<span class="string">&quot;我是一个内部类的私有属性&quot;</span>;</span><br><span class="line">        <span class="keyword">void</span>   <span class="title function_">innerprint</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(outerName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h3><ol><li><p>使用 static 修饰，符合 static 修饰的原则。</p><ol><li>只能访问 外部类的 &#x3D;&#x3D;所有静态成员&#x3D;&#x3D;，无法访问非静态。</li></ol></li><li><p>可以添加任意的 访问修饰符 (public、protected、private、默认)</p></li><li><p>作用域的问题</p><ol><li><p>外部类 –&gt;访问 –&gt;静态成员 [访问方式：1. 创建对象 2.使用方法名访问。]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建对象</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>对象名.xxx</span><br></pre></td></tr></table></figure></li><li><p>内部成员—&gt; 访问 —&gt; 外部成员 [访问方式：直接访问所有静态成员]</p><ol><li>&#x3D;&#x3D;就近原则&#x3D;&#x3D;。如果重名，使用 &#x3D;&#x3D;外部类.属性名&#x3D;&#x3D;进行访问。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">outer</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>  String Staticname=<span class="string">&quot;外部类的属性&quot;</span>;</span><br><span class="line">String name=<span class="string">&quot;外部类非静态属性&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">staticInner</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>  String Staticname=<span class="string">&quot;静态内部类的属性&quot;</span>;</span><br><span class="line">       <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(Staticname);</span><br><span class="line">         System.out.println(outer.staticname);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/11/15/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/4-%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB/1-%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221115212849597.png" alt="image-20221115212849597"></p></li><li><p>外部其他类 使用静态内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jhfuture.innerclass.staticInnerclass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">staticner</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//其他外部类访问静态成员内部类的三种方法</span></span><br><span class="line">        <span class="comment">//1.使用 外部类名.静态类名 方法创建</span></span><br><span class="line">        outer.<span class="type">staticInner</span> <span class="variable">staticInner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">outer</span>.staticInner();</span><br><span class="line">        staticInner.print();</span><br><span class="line">        <span class="comment">//2.在外部类里 创建一个方法/静态方法 使用外部类对象名/外部类名 . 方法名来创建。</span></span><br><span class="line">        <span class="comment">//2.1</span></span><br><span class="line">        <span class="type">outer</span> <span class="variable">outerObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">outer</span>();</span><br><span class="line">        outer.<span class="type">staticInner</span> <span class="variable">staticInner1</span> <span class="operator">=</span> outerObject.getstaticInnerInstace_commonly();</span><br><span class="line">        staticInner1.print();</span><br><span class="line">        <span class="comment">//2.2</span></span><br><span class="line">        outer.staticInner staticInner2= outer.getstaticInnerInstace_StaticVersion();</span><br><span class="line">        staticInner2.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">outer</span>&#123;</span><br><span class="line"><span class="keyword">static</span>  String Staticname=<span class="string">&quot;外部类的属性&quot;</span>;</span><br><span class="line">String name=<span class="string">&quot;外部类非静态属性&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">staticInner</span>&#123;</span><br><span class="line">       <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">           System.out.println(Staticname);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    staticInner <span class="title function_">getstaticInnerInstace_commonly</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">staticInner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">static</span> staticInner <span class="title function_">getstaticInnerInstace_StaticVersion</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">staticInner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li></li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-成员内部类入门</title>
      <link href="/2022/11/15/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/3-%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB/1-%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/15/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/3-%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB/1-%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><p>what?</p><p>成员内部类定义在在 outer类 成员属性 的位置，属于类成员的内部类。</p><p>how?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line"> <span class="comment">//内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">inner</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name=<span class="string">&quot;我是一个内部类的私有属性&quot;</span>;</span><br><span class="line">        <span class="keyword">void</span>   <span class="title function_">innerprint</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(outerName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h3><p>说明：成员内部类定义在在 outer类 成员属性 的位置，并且没有 static 修饰。</p><ol><li><p>作用域问题：</p><ol><li><p>在 成员内部类 中可以随意访问 outer类 中的内容，outer类也可以使用 成员内部类。</p></li><li><p>成员内部类访问 outer类 的属性。</p><ol><li>直接使用属性名 </li><li>&#x3D;&#x3D;—-&gt;包括private属性–&gt;因为在同一个类中&#x3D;&#x3D;</li><li>&#x3D;&#x3D;就近原则&#x3D;&#x3D;&gt;如果外部类的属性成员名字 和 内部类相同 <ol><li>通过&#x3D;&#x3D;外部类.this.属性&#x3D;&#x3D;来访问外部类的成员</li></ol></li></ol></li><li><p>外部类的成员使用成员内部类</p><ol><li>&#x3D;&#x3D;同样包括 private 属性&#x3D;&#x3D;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建内部类的对象</span><br><span class="line">    <span class="type">neinner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">inner</span>();</span><br><span class="line"><span class="number">2.</span>使用 inner.xx即可</span><br><span class="line">System.out.println(inner.name);</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>外部其他类–访问—-&gt;成员内部类</p><blockquote><p>外部类名.成员内部类 xxx &#x3D;new 外部类对象.new 成员内部类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">memberClass_1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.print();</span><br><span class="line">        <span class="comment">//外部其他类访问成员内部类的两种方法</span></span><br><span class="line">        <span class="comment">//1.使用外部类的对象创建---&gt;成员内部类也是外部类对象的一个成员。</span></span><br><span class="line">        Outer.<span class="type">inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">inner</span>();</span><br><span class="line">        inner.innerprint();</span><br><span class="line">        <span class="comment">//2.在外部类中创建一个方法---&gt;返回成员内部类对象</span></span><br><span class="line">        Outer.inner inner1= outer.getinnerInstace();</span><br><span class="line">        inner1.innerprint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String outerName=<span class="string">&quot;我是一个外部类的私有属性&quot;</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">inner</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name=<span class="string">&quot;我是一个内部类的私有属性&quot;</span>;</span><br><span class="line">        <span class="keyword">void</span>   <span class="title function_">innerprint</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(outerName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">inner</span>();</span><br><span class="line">        System.out.println(inner.name);</span><br><span class="line">        inner.innerprint();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> inner <span class="title function_">getinnerInstace</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>可以添加任意修饰符(public、protected、默认、private)，因为它的地位就是&#x3D;&#x3D;一个成员&#x3D;&#x3D;</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3-JDBC批处理</title>
      <link href="/2022/11/14/MySQL/JDBC/3-JDBC%E6%89%B9%E5%A4%84%E7%90%86/"/>
      <url>/2022/11/14/MySQL/JDBC/3-JDBC%E6%89%B9%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><p>what?</p><p><img src="/2022/11/14/MySQL/JDBC/3-JDBC%E6%89%B9%E5%A4%84%E7%90%86/image-20221114193443823.png" alt="image-20221114193443823"></p><p>how?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>添加语句到批处理包</span><br><span class="line">    preparestatement.addBatch()</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>执行批处理包中的 sql 语句</span><br><span class="line">    preparestatement.executeBatch()</span><br><span class="line"><span class="number">3.</span>清空批处理包中的内容。</span><br><span class="line">    preparestatement.clea</span><br></pre></td></tr></table></figure><p><img src="/2022/11/14/MySQL/JDBC/3-JDBC%E6%89%B9%E5%A4%84%E7%90%86/image-20221114203537636.png" alt="image-20221114203537636"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2-JDBC中的事务</title>
      <link href="/2022/11/14/MySQL/JDBC/2-JDBC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/11/14/MySQL/JDBC/2-JDBC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><p><img src="/2022/11/14/MySQL/JDBC/2-JDBC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20221114190659428.png" alt="image-20221114190659428"></p><p>how?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1.在获取连接后，设置自动提交为off</span></span><br><span class="line"> connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.在异常处理中进行回滚。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">    coonection.rollback();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.没有问题在 sql执行的最后进行提交</span></span><br><span class="line"></span><br><span class="line">connectio</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.jdbc.transaction_;</span><br><span class="line"><span class="keyword">import</span> com.hspedu.jdbc.utils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 韩顺平</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">* 演示 jdbc 中如何使用事务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transaction_</span> &#123;</span><br><span class="line"></span><br><span class="line">    /没有使用事务. <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">noTransaction</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//操作转账的业务</span></span><br><span class="line"><span class="comment">//1. 得到连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//2. 组织一个 sql</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance - 100 where id = 1&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance + 100 where id = 2&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//3. 创建 PreparedStatement 对象</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection = JDBCUtils.getConnection(); <span class="comment">// 在默认情况下，connection 是默认自动提交</span></span><br><span class="line">preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">preparedStatement.executeUpdate(); <span class="comment">// 执行第 1 条 sql</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>; <span class="comment">//抛出异常</span></span><br><span class="line">preparedStatement = connection.prepareStatement(sql2);</span><br><span class="line">preparedStatement.executeUpdate(); <span class="comment">// 执行第 3 条 sql</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">    DBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//事务来解决</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useTransaction</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//操作转账的业务</span></span><br><span class="line"><span class="comment">//1. 得到连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//2. 组织一个 sql</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance - 100 where id = 1&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance + 100 where id = 2&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//3. 创建 PreparedStatement 对象</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection = JDBCUtils.getConnection(); <span class="comment">// 在默认情况下，connection 是默认自动提交</span></span><br><span class="line"><span class="comment">//将 connection 设置为不自动提交</span></span><br><span class="line">connection.setAutoCommit(<span class="literal">false</span>); <span class="comment">//开启了事务</span></span><br><span class="line">preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">preparedStatement.executeUpdate(); <span class="comment">// 执行第 1 条 sql</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>; <span class="comment">//抛出异常</span></span><br><span class="line">preparedStatement = connection.prepareStatement(sql2);</span><br><span class="line">preparedStatement.executeUpdate(); <span class="comment">// 执行第 3 条 sql</span></span><br><span class="line">    <span class="comment">//这里提交事务</span></span><br><span class="line">connection.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">//这里我们可以进行回滚，即撤销执行的 SQL</span></span><br><span class="line"><span class="comment">//默认回滚到事务开始的状态. System.out.println(&quot;执行发生了异常，撤销执行的 sql&quot;);</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">throwables.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">JDBCUtils.close(<span class="literal">null</span>, preparedStatement, connection);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL\JDBC\2-JDBC中的事务.md</title>
      <link href="/2022/11/14/MySQL-JDBC-2-JDBC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1-md/"/>
      <url>/2022/11/14/MySQL-JDBC-2-JDBC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1-md/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-数据库三范式基本介绍</title>
      <link href="/2022/11/14/MySQL/11-%E8%AE%BE%E8%AE%A1%E4%B8%89%E8%8C%83%E5%BC%8F/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%89%E8%8C%83%E5%BC%8F%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/11/14/MySQL/11-%E8%AE%BE%E8%AE%A1%E4%B8%89%E8%8C%83%E5%BC%8F/1-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%89%E8%8C%83%E5%BC%8F%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>用 时间 换 空间 </p><p>几亿。 数据量可能是几个T，但是你如果数据库设计的得当，这个储存量是可以减少，可能只有几百G</p><p>1000G&#x3D;1T  硬盘产商计算。</p><p>操作系统计算 1024G&#x3D;1T</p><p>很多东西</p><p>sql里面有一个概念叫  笛卡尔积。 n* n * n</p><p>第一张表里有100条数据，我只相查一条 。</p><p>那100遍。</p><p>分数&#x3D;90分。</p><table><thead><tr><th>学生名字</th><th>分数</th></tr></thead><tbody><tr><td>小名</td><td>12</td></tr><tr><td>小华</td><td>50</td></tr><tr><td>李华</td><td>60</td></tr><tr><td>李四</td><td>12</td></tr></tbody></table><p>第一条开始，  假如说我要的数据在第50条，计算机认为你后面50条至100条可能还会有符合条件的数据。</p><p>我要查两个表，并且，我要用第一张表查到的数据，再去查第二张表。</p><p>n * n&#x3D;n²</p><p>我一开始的数据，用一张表，储存很多数据，会造成数据的冗余，—&gt;n </p><p>优化后，用多张表储存，避免了数据的冗余，但是我原来只需要查一张表，那我现在就要查多张表。 时间就变成了 n²</p><h3 id="一、一览"><a href="#一、一览" class="headerlink" title="一、一览"></a>一、一览</h3><p>第一范式：要求任何一张表必须有主键，每一个字段原子性不可再分。</p><p>第二范式：建立在第一范式的基础上，要求所有非主键字段完全依赖主键，不要产生部分依赖。</p><p>第三范式：建立在第二范式基础，要求所有非主键字段直接依赖主键，不要产生传递依赖。</p><blockquote><p>避免数据的冗余，空间的浪费。</p></blockquote><blockquote><p>什么叫依赖：</p><p>如果确定一个表中的某个数据（A），则就可以确定该表中的其他另一个数据（B），则我们说：B依赖于A。</p><p>实际上，一个表只要有主键，则其他非主键一定是依赖于主键的。</p><p>什么叫“部分依赖”：</p><p>如果确定一个表中的某个数据组合（A，B），则就可以确定该表中的其他另一个数据（C），则我们说：C依赖于（A，B）（此时A，B通常就是做出主键）。</p><p>但：如果某个数据D，它只依赖于数据A，或者说，A一确定，则D也可以确定，此时我们就称为“数据D部分依赖于数据A——可见部分依赖是指某个非主键字段，依赖于联合主键字段的其中部分字段。</p></blockquote><p>依赖—————&gt;  一种关系</p><h3 id="二、逐个分析"><a href="#二、逐个分析" class="headerlink" title="二、逐个分析"></a>二、逐个分析</h3><h4 id="1、第一范式-（1NF）：原子性（存储的数据应该具有“不可再分性”）"><a href="#1、第一范式-（1NF）：原子性（存储的数据应该具有“不可再分性”）" class="headerlink" title="1、第一范式 （1NF）：原子性（存储的数据应该具有“不可再分性”）"></a>1、第一范式 （1NF）：原子性（存储的数据应该具有“不可再分性”）</h4><p>1必须有<strong>主键</strong>，且2.每个字段是原子性的不能再分。</p><p>不符合第一范式的示例 </p><blockquote><p>主键：主键是唯一的。可以为一个字段，也可以为多个字段一起组合成一个主键—&gt;复合主键。</p></blockquote><p>学生编号 学生姓名联系方式</p><p>1001 张三 <a href="mailto:&#x7a;&#115;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;">&#x7a;&#115;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;</a>,1359999999  </p><p>1002 李四 <a href="mailto:&#x6c;&#x73;&#64;&#103;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;">&#x6c;&#x73;&#64;&#103;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;</a>,13699999999 </p><p>1001 王五 <a href="mailto:&#119;&#x77;&#x40;&#x31;&#x36;&#51;&#x2e;&#x6e;&#101;&#x74;">&#119;&#x77;&#x40;&#x31;&#x36;&#51;&#x2e;&#x6e;&#101;&#x74;</a>,13488888888</p><p> 存在问题： </p><ul><li>最后一条记录和第一条重复（不唯一，没有主键） </li><li>联系方式字段可以再分，不是原子性的</li></ul><p>解决方案：</p><p>学生编号(pk) 学生姓名 email 联系电话 </p><p>1001 张三 <a href="mailto:&#x7a;&#x73;&#64;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#x7a;&#x73;&#64;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a> 1359999999 </p><p>1002 李四 <a href="mailto:&#x6c;&#x73;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#109;">&#x6c;&#x73;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#109;</a> 13699999999 </p><p>1003 王五 <a href="mailto:&#119;&#x77;&#x40;&#x31;&#54;&#x33;&#x2e;&#x6e;&#101;&#116;">&#119;&#x77;&#x40;&#x31;&#54;&#x33;&#x2e;&#x6e;&#101;&#116;</a> 13488888888 </p><p>关于第一范式:</p><p>每一行必须唯一，也就是每个表必须有主键，这是我们数据库设计的最基本要求，主要通常采用数值 型或定长字符串表示，关于列不可再分，应该根据具体的情况来决定。如联系方式，为了开发上的便利可能就采用 一个字段了。</p><h4 id="2、第二范式-唯一性-消除非主键部分依赖联合主键中的部分字段-（一定要在第一范式已经满足的情况下）"><a href="#2、第二范式-唯一性-消除非主键部分依赖联合主键中的部分字段-（一定要在第一范式已经满足的情况下）" class="headerlink" title="2、第二范式 唯一性 (消除非主键部分依赖联合主键中的部分字段)（一定要在第一范式已经满足的情况下）"></a>2、第二范式 唯一性 (消除非主键部分依赖联合主键中的部分字段)（一定要在第一范式已经满足的情况下）</h4><p>二范式是建立在第一范式基础上的，另外要求所有非主键字段<strong>完全依赖</strong>主键，不能产生&#x3D;&#x3D;部分依赖&#x3D;&#x3D;。</p><p>1.学生和教师的表 </p><p>示例： </p><p>这里涉及到一个关系  &#x3D;&#x3D;多对多&#x3D;&#x3D;</p><p>学生编号 学生姓名 教师编号 教师姓名 </p><p>1001 张三 001 王老师 </p><p>1002 李四 002 赵老师 </p><p>1003 王五 001 王老师 </p><p>1001张三 002 赵老师 </p><p>1001 张三 003陈老师</p><p>2个中文字符一个中文字符对应3个字节，1Byte&#x3D;8bit</p><p>分析以上的表满足第一范式吗？不满足，没有主键</p><p>情况一</p><p>修改建议</p><p>确定主键： —&gt;使用复合主键</p><p>学生编号 教师姓名  学生姓名 教师编号</p><p>1001王老师 张三 001</p><p>1002赵老师 李四 002 </p><p>1003王老师 王五 001</p><p>1001赵老师  张三 002</p><p>情况二、</p><p>修改建议</p><p>确定主键： —&gt;使用复合主键  依赖于一部分。</p><p><strong>考虑—&gt;数据冗余</strong></p><p>原来的作用</p><p>这张表是要描述一个 </p><p>学生 与老师的关系对应。</p><p><strong>学生与老师的对应关系。</strong></p><p>Final</p><p>假如</p><p>一、我想确定这个老师跟这个学生是否有关系？</p><p>我有学生的编号和教师的编号。</p><p> 学生编号(PK) 教师编号(PK) 学生姓名 教师姓名 </p><p>1001 001 张三 王老师 </p><p>1002 002 李四 赵老师 </p><p>1003 001 王五 王老师 </p><p>1001 002 张三 赵老师 </p><p>SQL例子。</p><p>SELECT stuName FROM test_table WHERE  StuID&#x3D;1001;</p><p>这张表描述了学生和老师的关系：一个学生可能有多个老师，一个老师有多个学生。</p><p>张三依赖1001 王老师依赖001 产生了部分依赖。</p><p>有什么缺点？数据冗余，空间浪费。<strong>大量的冗余</strong>，</p><p>主要涉及到的冗余字段为“学生姓名”和“教师姓名”。</p><p>出现冗余的原因在于：</p><p>学生姓名部分依赖了主键的一个字段学生编号，而没有依赖教师编号，而教师姓名部门依赖了主键的一个 字段教师编号，这就是第二范式部分依赖。</p><p>学生姓名依赖于学生编号，老师名字依赖于教师编号，都是&#x3D;&#x3D;主键的一部分&#x3D;&#x3D;，——&gt;部分依赖。</p><p>即&#x3D;&#x3D;多对多的问题&#x3D;&#x3D;</p><p>how ？</p><p>建立多张表</p><p>一个学生表、一个教师表、一个学生关系关系表。</p><p>学生信息表</p><table><thead><tr><th>学生编号</th><th>学生姓名</th></tr></thead><tbody><tr><td>1001</td><td>张三</td></tr><tr><td>1002</td><td>李四</td></tr><tr><td>1003</td><td>王五</td></tr></tbody></table><p>学生名字和一个教师名字</p><p> 次数n1* n2* *n3 —&gt; 时间复杂度的问题。</p><p>n1 用空间换时间。</p><p>SQL 有索引进制。</p><p>教师信息表</p><table><thead><tr><th>教师编号</th><th>教师姓名</th></tr></thead><tbody><tr><td>001</td><td>王老师</td></tr><tr><td>002</td><td>赵老师</td></tr><tr><td>003</td><td>陈老师</td></tr></tbody></table><p>教师学生关系表</p><table><thead><tr><th>id(fk)</th><th>学生编号(fk) –&gt;学生表的学生编号 教师编号(PK)</th><th>教师编号(fk) –&gt;教师表的教师编号</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>001</td></tr><tr><td>2</td><td>1002</td><td>002</td></tr><tr><td>3</td><td>1001</td><td>003</td></tr></tbody></table><blockquote><p>多对多，三张表，关系表两个外键。</p></blockquote><p>小练习</p><p>看另一个案例 student_course</p><table><thead><tr><th>student_number</th><th>student_name</th><th>course_name</th><th>credit（课程代码）</th><th></th></tr></thead><tbody><tr><td>100</td><td>小明</td><td>马克思</td><td>1aaa</td><td></td></tr><tr><td>102</td><td>小花</td><td>马克思</td><td>1aaa</td><td></td></tr><tr><td>100</td><td>小明</td><td>毛泽东思想</td><td>2bbbb</td><td></td></tr></tbody></table><blockquote><p>多对多，三张表，关系表两个外键。</p></blockquote><h4 id="3-第三范式-（独立性，消除传递依赖）"><a href="#3-第三范式-（独立性，消除传递依赖）" class="headerlink" title="3.第三范式 （独立性，消除传递依赖）"></a>3.第三范式 （独立性，消除传递依赖）</h4><p>第三范式建立在第二范式的基础上。</p><p>​要求非主键字段必须直接依赖主键，不要产生传递依赖。</p><blockquote><p>在一个具有主键的表中，假设主键为A，其必然其他非主键都依赖于该主键，比如：B依赖于A，C依赖于A，D依赖于A。。。。。。</p><p><strong>但同时：如果该表中的某个字段B的值一确定，就能够确定另一个字段的值C，则我们称为C依赖于B。</strong></p><p>那么，就出现了：</p><p>C依赖B，B依赖A——这就是传递依赖。</p><p>则消除该传递依赖的的通常做法，就是将C依赖于B的数据，分离到另一个表中。</p></blockquote><p>学生班级对应表</p><p><strong>一对多。</strong>一个班级可以包含多个学生，一个学生只能对应一个班级。</p><p>学生与班级。</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>班级编号</th><th>班级名称</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>01</td><td>一年级一班</td></tr><tr><td>1002</td><td>李四</td><td>01</td><td>一年级一班</td></tr><tr><td>1003</td><td>王五</td><td>03</td><td>一年级三班</td></tr><tr><td>1004</td><td>六</td><td>03</td><td>一年级三班</td></tr></tbody></table><p>一个教室中有多个学生。 —-&gt;一对多。</p><p>A1:符合第一范式吗？</p><p>​Q:符合，只有一个外键。</p><p>A2:符合第二范式吗？</p><p>​Q:没有部分依赖。符合</p><p>A3:符合第三范式吗？</p><p>​Q：班级名称依赖于班级编号，班级编号依赖于学生编号—&gt;存在&#x3D;&#x3D;传递依赖&#x3D;&#x3D;</p><p>解决方法</p><blockquote><p>一对多，两张表，多的表加外键。</p></blockquote><p>一、学生表</p><table><thead><tr><th>学生编号（pk）</th><th>学生姓名</th><th>班级编号(fk)</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>01</td></tr><tr><td>1002</td><td>李四</td><td>02</td></tr><tr><td>1003</td><td>王五</td><td>03</td></tr><tr><td>1004</td><td>老六</td><td>03</td></tr></tbody></table><p>二、班级信息表</p><table><thead><tr><th>班级编号(pk)</th><th>班级名称</th></tr></thead><tbody><tr><td>01</td><td>一年级一班</td></tr><tr><td>02</td><td>一年级二班</td></tr><tr><td>03</td><td>一年级三班</td></tr></tbody></table><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>学生与班级 ，</p><p>一对多：</p><p>​两张表，多的表加外键。</p><p>学生与课程。一个学生可能有多门课程，一门课程会有多个学生。</p><p>多对多：</p><p>​三张表，关系表两个外键。</p><p>一对一：</p><p>​一对一、拆分表，外键唯一！</p><p>​在实际开发中，可能存在一张表字段太多，太庞大，这个时候要拆分表。</p><p>一对一怎么设计？</p><p>没有查分表之前：一张表</p><table><thead><tr><th>id(pk)</th><th>account</th><th>password</th><th>email</th><th>realname</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>zhangsang</td><td>123</td><td><a href="mailto:&#49;&#x34;&#49;&#50;&#56;&#x34;&#x32;&#x33;&#x32;&#x33;&#x34;&#x39;&#x31;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#x6d;">&#49;&#x34;&#49;&#50;&#56;&#x34;&#x32;&#x33;&#x32;&#x33;&#x34;&#x39;&#x31;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#x6d;</a></td><td>张三</td><td>广东省xxx</td></tr><tr><td>2</td><td>lisi</td><td>123</td><td><a href="mailto:&#49;&#x34;&#49;&#x32;&#56;&#50;&#x31;&#x33;&#50;&#57;&#x31;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#x6d;">&#49;&#x34;&#49;&#x32;&#56;&#50;&#x31;&#x33;&#50;&#57;&#x31;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#x6d;</a></td><td>李四</td><td>广东省xxx</td></tr></tbody></table><p>这种庞大的表建议拆分为两张：</p><p>t_login 登录表</p><table><thead><tr><th>id(pk)</th><th>account</th><th>password</th></tr></thead><tbody><tr><td>1</td><td>1235</td><td>123</td></tr><tr><td>2</td><td>1234</td><td>123</td></tr></tbody></table><p>t_user 用户信息表</p><table><thead><tr><th>id(pk)</th><th>realname</th><th>email</th><th>address</th><th>loginid(fk) unique –&gt;以t_login表中的id为外键</th><th>account</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td><a href="mailto:&#x31;&#52;&#x31;&#x32;&#x38;&#52;&#50;&#51;&#x32;&#51;&#x34;&#57;&#49;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;">&#x31;&#52;&#x31;&#x32;&#x38;&#52;&#50;&#51;&#x32;&#51;&#x34;&#57;&#49;&#64;&#113;&#113;&#46;&#99;&#111;&#x6d;</a></td><td>广东省</td><td>1</td><td>1235</td></tr><tr><td>1002</td><td>李四</td><td><a href="mailto:&#49;&#x34;&#49;&#50;&#56;&#x32;&#x31;&#51;&#50;&#x39;&#x31;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#109;">&#49;&#x34;&#49;&#50;&#56;&#x32;&#x31;&#51;&#50;&#x39;&#x31;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#109;</a></td><td>广东省</td><td>2</td><td>1234</td></tr></tbody></table><h3 id="四、老杜一些嘱咐的话"><a href="#四、老杜一些嘱咐的话" class="headerlink" title="四、老杜一些嘱咐的话"></a>四、老杜一些嘱咐的话</h3><p>数据库设计尽量遵循三范式，但是还是根据实际情况进行取舍，有时可能会拿冗余换速度，最终用目的要满足客户需 求。</p><p>因为在 sql 当中，表和表之间链接次数越多，效率越低（笛卡尔积）</p><p>有的时候可能会存在冗余，但为了减少表的连接次数，这样子做也是合理的，并且对于开发人员来说，sql 语句的编写难度也会降低。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-DBA基本介绍</title>
      <link href="/2022/11/14/MySQL/10-DBA/1-DBA%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/11/14/MySQL/10-DBA/1-DBA%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、创建"><a href="#一、创建" class="headerlink" title="一、创建"></a>一、创建</h3><h3 id="二、权限管理"><a href="#二、权限管理" class="headerlink" title="二、权限管理"></a>二、权限管理</h3><h3 id="三、导入导出（常用-）"><a href="#三、导入导出（常用-）" class="headerlink" title="三、导入导出（常用 ）"></a>三、导入导出（常用 ）</h3><h4 id="1-备份数据库"><a href="#1-备份数据库" class="headerlink" title="1.备份数据库"></a>1.备份数据库</h4><p>1)导出数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump databaseName <span class="operator">&gt;</span> path <span class="operator">-</span>uroot <span class="operator">-</span>ppassword</span><br></pre></td></tr></table></figure><p>2)导入数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.先创建一个数据表  create database xxx</span><br><span class="line">2.使用该数据表  use xxxx;</span><br><span class="line">3.导入.sql文件初始化数据库 source .sql文件路径</span><br></pre></td></tr></table></figure><h4 id="2-备份指定表"><a href="#2-备份指定表" class="headerlink" title="2.备份指定表"></a>2.备份指定表</h4><p>1)导出指定表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-索引失效</title>
      <link href="/2022/11/14/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/3-%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/"/>
      <url>/2022/11/14/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/3-%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h3><p>​索引可以在一些查询情况下加速查询速度，但某一些情况下索引也会失效，我们需要知道这些特殊情况，以更好的优化 sql 语句。</p><ol><li><p>模糊匹配以 &#x3D;&#x3D;%开头&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> ename <span class="keyword">like</span> &quot;%T&quot;;</span><br></pre></td></tr></table></figure></li><li><p>使用 or ，如果 or 的两边存在有一个字段 &#x3D;&#x3D;没有索引&#x3D;&#x3D;，那它会导致 另一个 &#x3D;&#x3D;有索引&#x3D;&#x3D;的字段&#x3D;&#x3D;索引失效&#x3D;&#x3D;。<br>解决办法：</p><ol><li><p>不使用 or</p></li><li><p>给 or 两边的字段&#x3D;&#x3D;都 建立索引&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span><span class="string">&#x27;king &#x27;</span><span class="keyword">or</span> job<span class="operator">=</span> <span class="string">&#x27;manager&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用复合索引时，没有使用 &#x3D;&#x3D;左侧&#x3D;&#x3D;的列进行查找，索引失效。<br>什么是复合索引？</p><blockquote><p>两个字段，或者更多的字段联合起来，添加一个索引，叫做复合索引。———-&gt;多个字段，一个索引</p></blockquote></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#建立复合索引</span><br><span class="line"><span class="keyword">create</span> index emp_job_sal_index <span class="keyword">on</span> emp(job,sal);</span><br><span class="line">#查询左侧</span><br><span class="line"><span class="operator">&gt;</span> 以下的 type </span><br><span class="line">  <span class="keyword">ref</span> 表示索引</span><br><span class="line">  <span class="keyword">all</span> 表示遍历</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span><span class="string">&#x27;manager&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys     <span class="operator">|</span> key               <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>(<span class="keyword">ref</span>代表索引)  <span class="operator">|</span> emp_job_sal_index <span class="operator">|</span> emp_job_sal_index <span class="operator">|</span> <span class="number">39</span>      <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#查询右侧</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">=</span><span class="number">800</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>(表示遍历)  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>    <span class="number">10.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="4"><li>在 where 中，索引列参加了运算，索引失效</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index emp_sal_index <span class="keyword">on</span> emp(sal);</span><br><span class="line">#</span><br><span class="line">#普通</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal<span class="operator">=</span><span class="number">800</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key           <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> emp_sal_index <span class="operator">|</span> emp_sal_index <span class="operator">|</span> <span class="number">9</span>       <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#加了运算</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal<span class="operator">+</span><span class="number">1</span><span class="operator">=</span><span class="number">800</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><ol start="5"><li>在 where 当中索引使用了 &#x3D;&#x3D;函数&#x3D;&#x3D;。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index emp_ename_index <span class="keyword">on</span> emp(ename);</span><br><span class="line"></span><br><span class="line"># 转小写</span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="built_in">lower</span>(ename)<span class="operator">=</span><span class="string">&#x27;smith&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> emp   <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">14</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql索引失效 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql事务隔离级别</title>
      <link href="/2022/11/13/MySQL/8-mysql%E4%BA%8B%E5%8A%A1/2-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/1-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/11/13/MySQL/8-mysql%E4%BA%8B%E5%8A%A1/2-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/1-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><p>what?</p><p>&#x3D;&#x3D;多个链接&#x3D;&#x3D;开启各自事务操作数据库，数据库系统要负责 &#x3D;&#x3D;隔离操作&#x3D;&#x3D;，以保证各个链接在获取数据时的准确性。</p><blockquote><p>隔离级别：定义了事务与事务之间的隔离程度。</p></blockquote><p>不考虑隔离性,可能会引发一下问题：</p><ul><li>脏读<br>一个事务读取到了另一个事务，&#x3D;&#x3D;尚未提交的修改&#x3D;&#x3D;。</li><li>不可重复读<br>不可重复读对应的操作为 &#x3D;&#x3D;修改&#x2F;删除&#x3D;&#x3D;</li><li>幻读<br>幻读对应的操作为 &#x3D;&#x3D;插入&#x3D;&#x3D;</li></ul><h3 id="二、具体分析"><a href="#二、具体分析" class="headerlink" title="二、具体分析"></a>二、具体分析</h3><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id><a href="#" class="headerlink" title></a></h3><p><img src="/2022/11/13/MySQL/8-mysql%E4%BA%8B%E5%8A%A1/2-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/1-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/image-20221113143117565.png" alt="image-20221113143117565"></p><p>查看隔离级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">旧版 <span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line">新版 (<span class="number">5.7</span>以后及<span class="number">8</span>)   <span class="keyword">select</span> @<span class="variable">@transaction</span>_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@transaction</span>_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>隔离级别的设置操作必须在&#x3D;&#x3D;开启事务之前&#x3D;&#x3D;,否则会不生效！！！。</p></blockquote><h4 id="1-读未提交-——–set-session-transactionread-committed"><a href="#1-读未提交-——–set-session-transactionread-committed" class="headerlink" title="1.读未提交 ——–set session transactionread committed"></a>1.读未提交 ——–set session transactionread committed</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置命令</span><br><span class="line"><span class="keyword">set</span> session transaction isolation level read uncommitted</span><br></pre></td></tr></table></figure><p>有A、B两个链接，B的链接为 &#x3D;&#x3D;Read uncommitted&#x3D;&#x3D;.</p><p>ALTER  TABLE <code>account</code> ADD <code>name</code> VARCHAR(255);</p><p>A 连接的事务还在修改，但未提交，</p><p>B 处的链接就可以查看到 A 事务所做的修改—-</p><blockquote><p>看到未提交的修改–脏读、不可重复读</p><p>看到插入的新数据—幻读</p></blockquote><h4 id="2-读已经提交"><a href="#2-读已经提交" class="headerlink" title="2.读已经提交"></a>2.读已经提交</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> session transaction isolation level read committed</span><br></pre></td></tr></table></figure><p>A 、B:为 read commited</p><p>A、B均为commit</p><p>A未提交时，B不可以读到A修改的数据。</p><p>A提交后，B可以读到。</p><h4 id="3-可重复读——-gt-mysql-默认级别"><a href="#3-可重复读——-gt-mysql-默认级别" class="headerlink" title="3.可重复读——-&gt; mysql 默认级别"></a>3.可重复读——-&gt; mysql 默认级别</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> session transaction isolation level repeatable read;</span><br></pre></td></tr></table></figure><h4 id="4-序列化"><a href="#4-序列化" class="headerlink" title="4.序列化"></a>4.序列化</h4><p>synchronized，线程同步（事务同步）</p><p>每一次读取到的数据都是最真实的，并且&#x3D;&#x3D;效率最低的&#x3D;&#x3D;.</p><p>当有另一个事务在进行的时候</p><h3 id="三、怎么启动事务"><a href="#三、怎么启动事务" class="headerlink" title="三、怎么启动事务"></a>三、怎么启动事务</h3><h3 id="三、操作"><a href="#三、操作" class="headerlink" title="三、操作"></a>三、操作</h3><ol><li><p>查看系统隔离级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@global</span>.transaction_isolation;</span><br></pre></td></tr></table></figure></li><li><p>查看会话的级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction</span>_isolation;</span><br></pre></td></tr></table></figure></li><li><p>修改系统隔离</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level 级别;</span><br></pre></td></tr></table></figure></li><li><p>设置会话隔离级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="operator">=</span><span class="operator">=</span>session<span class="operator">=</span><span class="operator">=</span> transaction isolation level 级别;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-匿名内部类入门</title>
      <link href="/2022/11/13/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/2-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/1-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/13/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/2-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/1-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><blockquote><p>综合性强：1继承 2 多态 3 动态绑定 4内部类</p></blockquote><p>what?</p><ol><li>本质还是类</li><li>属于内部类</li><li>该类没有名字</li><li>&#x3D;&#x3D;同时还是一个对象&#x3D;&#x3D;  —-&gt; 在创建过程中使用了 new xxx()。类似创建对象的方法</li></ol><p>位置：外部类的&#x3D;&#x3D;局部位置&#x3D;&#x3D;，比如方法中。</p><p>why?</p><p>一个需求：</p><p>&#x2F;&#x2F;1.如果想使用 IA 接口。</p><p>2.传统方式 ：创建一个 class 实现这个接口，然后再创建对象。</p><p>3.使用匿名内部类 直接 IA ia &#x3D; new IA(){</p><p>} 就完成了一个 实现了接口的类的对象实例。</p><p>老韩的需求是 Tiger&#x2F;Dog 类只是使用一次，后面不再使用。</p><p>–&gt;.使用匿名内部类来简化 开发</p><p>How?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类或接口(参数列表)&#123;</span><br><span class="line">    类体。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.hspedu.innerclass;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 演示匿名内部类的使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Outer04</span> <span class="variable">outer04</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer04</span>();</span><br><span class="line">outer04.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer04</span> &#123; <span class="comment">//外部类</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line"><span class="comment">//基于接口的匿名内部类</span></span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1.需求： 想使用 IA 接口,并创建对象</span></span><br><span class="line"><span class="comment">//2.传统方式，是写一个类，实现该接口，并创建对象</span></span><br><span class="line"><span class="comment">//3.老韩需求是 Tiger/Dog 类只是使用一次，后面再不使用</span></span><br><span class="line"><span class="comment">//4. 可以使用匿名内部类来简化开发</span></span><br><span class="line"><span class="comment">//5. tiger 的编译类型 ? IA</span></span><br><span class="line"><span class="comment">//6. tiger 的运行类型 ? 就是匿名内部类 Outer04$1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我们看底层 会分配 类名 Outer04$1</span></span><br><span class="line"><span class="comment">class Outer04$1 implements IA &#123;</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void cry() &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;老虎叫唤...&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//7. jdk 底层在创建匿名内部类 Outer04$1,立即马上就创建了 Outer04$1 实例，并且把地址</span></span><br><span class="line"><span class="comment">// 返回给 tiger</span></span><br><span class="line"><span class="comment">//8. 匿名内部类使用一次，就不能再使用</span></span><br><span class="line">演示基于接口的匿名内部类。</span><br><span class="line"><span class="type">IA</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IA</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;老虎叫唤...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;tiger 的运行类型=&quot;</span> + tiger.getClass());</span><br><span class="line">tiger.cry();</span><br><span class="line">tiger.cry();</span><br><span class="line">tiger.cry();</span><br><span class="line"><span class="comment">// IA tiger = new Tiger();</span></span><br><span class="line"><span class="comment">// tiger.cry();</span></span><br><span class="line"> </span><br><span class="line">演示基于类的匿名内部类</span><br><span class="line"><span class="comment">//分析</span></span><br><span class="line"><span class="comment">//1. father 编译类型 Father</span></span><br><span class="line"><span class="comment">//2. father 运行类型 Outer04$2</span></span><br><span class="line"><span class="comment">//3. 底层会创建匿名内部类</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Outer04$2 extends Father&#123;</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void test() &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;匿名内部类重写了 test 方法&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//4. 同时也直接返回了 匿名内部类 Outer04$2 的对象</span></span><br><span class="line"><span class="comment">//5. 注意(&quot;jack&quot;) 参数列表会传递给 构造器</span></span><br><span class="line"><span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;jack&quot;</span>)&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;匿名内部类重写了 test 方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;father 对象的运行类型=&quot;</span> + father.getClass());<span class="comment">//Outer04$2</span></span><br><span class="line">father.test();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">基于抽象类的匿名内部类</span><br><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;小狗吃骨头...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">animal.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IA</span> &#123;<span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class Tiger implements IA &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @Override</span></span><br><span class="line"><span class="comment">// public void cry() &#123;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;老虎叫唤...&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//class Dog implements IA&#123;</span></span><br><span class="line"><span class="comment">// @Override</span></span><br><span class="line"><span class="comment">// public void cry() &#123;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;小狗汪汪...&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;<span class="comment">//类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line">System.out.println(<span class="string">&quot;接收到 name=&quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123; <span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一、接口的匿名内部类使用"><a href="#一、接口的匿名内部类使用" class="headerlink" title="一、接口的匿名内部类使用"></a>一、接口的匿名内部类使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnoymouslnnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">tiger</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">tiger</span>();</span><br><span class="line">        tiger.cry();</span><br><span class="line">        <span class="comment">//使用匿名内部类实现</span></span><br><span class="line">    <span class="comment">// 底层 会分配类名</span></span><br><span class="line">        <span class="comment">/*class outerName+$1 implements IA&#123;</span></span><br><span class="line"><span class="comment">        * @Override</span></span><br><span class="line"><span class="comment">        * public void cry() &#123;</span></span><br><span class="line"><span class="comment">         *       System.out.println(&quot;tigger&quot;);</span></span><br><span class="line"><span class="comment">          * &#125;</span></span><br><span class="line"><span class="comment">        *&#125;</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 7 dk 底层在创建了 匿名内部类立即马上就创建了它的实例，并且把地址返回。</span></span><br><span class="line"><span class="comment">        * 8.匿名内部类使用一次就没有了，不能再使用， ---但是匿名内部类的对象还可以使用</span></span><br><span class="line"><span class="comment">        * 就没有了 不能使用 new outerclass$1这个方法再来调用</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        IA tigger=<span class="keyword">new</span> <span class="title class_">IA</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;tigger&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        tigger.cry();</span><br><span class="line">        <span class="comment">//验证</span></span><br><span class="line">        <span class="comment">// getclass 获取运行类型</span></span><br><span class="line">        System.out.println(<span class="string">&quot;tigger的运行类型&quot;</span>+tigger.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="二、类的匿名内部类。"><a href="#二、类的匿名内部类。" class="headerlink" title="二、类的匿名内部类。"></a>二、类的匿名内部类。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> 基于类的匿名内部类</span><br><span class="line">        <span class="comment">//1.father --编译类型</span></span><br><span class="line">        <span class="comment">//2.编译类型  outerClass$2 --&gt; extend father</span></span><br><span class="line">     <span class="comment">//这个类只能使用一次，且是 继承了father的</span></span><br><span class="line">     <span class="comment">//m </span></span><br><span class="line">     <span class="comment">//1. father 编译类型 Father</span></span><br><span class="line"><span class="comment">//2. father 运行类型 Outer04$2</span></span><br><span class="line"><span class="comment">//3. 底层会创建匿名内部类</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Outer04$2 extends Father&#123;</span></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line"><span class="comment">public void test() &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;匿名内部类重写了 test 方法&quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//4. 同时也直接返回了 匿名内部类 Outer04$2 的对象</span></span><br><span class="line"><span class="comment">//5. 注意(&quot;jack&quot;) 参数列表会传递给 构造器</span></span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;hello&quot;</span>) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;匿名内部类重写了 test 方法&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">基于抽闲类的匿名内部类</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;</span><br><span class="line">    <span class="comment">//必须实现抽象方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span>  <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、匿名内部类的细节。"><a href="#二、匿名内部类的细节。" class="headerlink" title="二、匿名内部类的细节。"></a>二、匿名内部类的细节。</h3><ol><li>匿名内部类是一个对象。—&gt; 创建的过程中也有 new xx的操作。<ol><li>创建的内部类 为 &#x3D;&#x3D;extend 了该类的 一个子类&#x3D;&#x3D;。</li><li>使用的过程中遵循多态的特点。</li></ol></li></ol><p><img src="/2022/11/13/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/2-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/1-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221114214357388.png" alt="image-20221114214357388"></p><ol start="2"><li><p>可以访问外部类的所有成员。包括私有的</p></li><li><p>不能&#x3D;&#x3D;添加访问修饰符&#x3D;&#x3D;，它的堤围就是一个局部变量。</p></li><li><p>作用域：仅仅在定义它的方法或代码块中，且只能使用一次。—&gt; 即 new 的那个操作。</p></li><li><p>如果外部内的成员和匿名内部类的成员重名时，匿名内部类遵循&#x3D;&#x3D;就近原则&#x3D;&#x3D;，如果想访问外部类的成员，则可以使用&#x3D;&#x3D;(外部类名.this.成员)&#x3D;&#x3D;</p><blockquote><p>外部类名.this 就是调用 &#x3D;&#x3D;匿名内部类所在方法&#x3D;&#x3D;的 对象。</p></blockquote></li></ol><h3 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h3><p>1)接口参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">做实参直接传递，简洁高效。 InnerClassExercise01.java</span><br><span class="line"><span class="keyword">package</span> com.hspedu.innerclass;</span><br><span class="line"><span class="keyword">import</span> com.hspedu.abstract_.AA;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassExercise01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//当做实参直接传递，简洁高效</span></span><br><span class="line">f1(<span class="keyword">new</span> <span class="title class_">IL</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是一副名画~~...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//传统方法需要先创建一个实现该接口的类，然后再使用 new创建对象。</span></span><br><span class="line">f1(<span class="keyword">new</span> <span class="title class_">Picture</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态方法,形参是接口类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(IL il)</span> &#123;</span><br><span class="line">il.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IL</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">类-&gt;实现 IL =&gt; 编程领域 (硬编码)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Picture</span> <span class="keyword">implements</span> <span class="title class_">IL</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是一副名画 XX...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2)类<img src="/2022/11/13/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/2-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/1-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221114222036530.png" alt="image-20221114222036530"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.innerclass;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassExercise02</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.有一个铃声接口 Bell，里面有个 ring 方法。(右图)</span></span><br><span class="line"><span class="comment">2.有一个手机类 Cellphone，具有闹钟功能 alarmClock，参数是 Bell 类型(右图)</span></span><br><span class="line"><span class="comment">3.测试手机类的闹钟功能，通过匿名内部类(对象)作为参数，打印：懒猪起床了</span></span><br><span class="line"><span class="comment">4.再传入另一个匿名内部类(对象)，打印：小伙伴上课了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">CellPhone</span> <span class="variable">cellPhone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellPhone</span>();</span><br><span class="line"><span class="comment">//老韩解读</span></span><br><span class="line"><span class="comment">//1. 传递的是实现了 Bell 接口的匿名内部类 InnerClassExercise02$1</span></span><br><span class="line"><span class="comment">//2. 重写了 ring</span></span><br><span class="line"><span class="comment">//3. Bell bell = new Bell() &#123;</span></span><br><span class="line"><span class="comment">// @Override</span></span><br><span class="line"><span class="comment">// public void ring() &#123;</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;懒猪起床了&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">cellPhone.alarmClock(<span class="keyword">new</span> <span class="title class_">Bell</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;懒猪起床了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">cellPhone.alarmClock(<span class="keyword">new</span> <span class="title class_">Bell</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;小伙伴上课了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bell</span>&#123; <span class="comment">//接口</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">ring</span><span class="params">()</span>;<span class="comment">//方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CellPhone</span>&#123;<span class="comment">//类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alarmClock</span><span class="params">(Bell bell)</span>&#123;<span class="comment">//形参是 Bell 接口类型</span></span><br><span class="line">System.out.println(bell.getClass());</span><br><span class="line">bell.ring();<span class="comment">//动态绑定</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-内部类入门</title>
      <link href="/2022/11/13/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/0-%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/13/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/0-%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>类的五大成员</p><ul><li>属性</li><li>方法</li><li>构造器</li><li>方法块</li><li>内部类</li></ul><h4 id="2-根据定义的位置分类："><a href="#2-根据定义的位置分类：" class="headerlink" title="2.根据定义的位置分类："></a>2.根据定义的位置分类：</h4><p>如果定义类在局部位置(方法中&#x2F;代码块) :</p><p>(1) 局部内部类 &#x3D;&#x3D;(2) 匿名内部类&#x3D;&#x3D;</p><p> 定义在成员位置</p><p> (1) 成员内部类 (2) 静态内部类</p><h4 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3.基本使用"></a>3.基本使用</h4><p><img src="/2022/11/13/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/9-%E5%86%85%E9%83%A8%E7%B1%BB/0-%E5%86%85%E9%83%A8%E7%B1%BB%E5%85%A5%E9%97%A8/image-20221113140128260.png" alt="image-20221113140128260"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hspedu.innerclass;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClass01</span> &#123; <span class="comment">//外部其他类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123; <span class="comment">//外部类</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Outer</span><span class="params">(<span class="type">int</span> n1)</span> &#123;<span class="comment">//构造器</span></span><br><span class="line"><span class="built_in">this</span>.n1 = n1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;<span class="comment">//方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;m1()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;<span class="comment">//代码块</span></span><br><span class="line">System.out.println(<span class="string">&quot;代码块...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span> &#123; <span class="comment">//内部类, 在 Outer 类的内部</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/10/JavaWeb/3-%E8%87%AA%E5%B7%B1%E6%80%BB%E7%BB%93%E7%9A%84%E7%BB%8F%E9%AA%8C/1-JSON%E7%AF%87/"/>
      <url>/2022/11/10/JavaWeb/3-%E8%87%AA%E5%B7%B1%E6%80%BB%E7%BB%93%E7%9A%84%E7%BB%8F%E9%AA%8C/1-JSON%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="一、如何返回一个-带有-对象数组的-JSON-数据"><a href="#一、如何返回一个-带有-对象数组的-JSON-数据" class="headerlink" title="一、如何返回一个 带有 对象数组的 JSON 数据"></a>一、如何返回一个 带有 对象数组的 JSON 数据</h3><p><img src="/2022/11/10/JavaWeb/3-%E8%87%AA%E5%B7%B1%E6%80%BB%E7%BB%93%E7%9A%84%E7%BB%8F%E9%AA%8C/1-JSON%E7%AF%87/image-20221110213858123.png" alt="image-20221110213858123"></p><ol><li>先创建一个 Arraylist</li><li>挨个创建 JSONproject</li><li>把创建好的JSONproject 使用 ArrayList.add方法加入到 Arraylist中</li><li>将 ArrayList 加入 JSONProject中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1ArrayList&lt;JSONObject&gt; dataArrary=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//| bid | uid | publishtime         | title | content | like | unlike | see  | tagname </span></span><br><span class="line"><span class="comment">//+-----+-----+---------------------+-------+---------+------+--------+------+---------</span></span><br><span class="line"><span class="comment">//|   1 |   1 | 2022-11-10 20:00:00 | Nihao | nihao   |    1 |      4 |    5 | hotkey  </span></span><br><span class="line"><span class="comment">//+-----+-----+---------------------+-------+---------+------+--------+------+---------+</span></span><br><span class="line">               <span class="keyword">while</span> (resultSet_forBlog.next()) &#123;</span><br><span class="line">                   count++;</span><br><span class="line">                   <span class="number">2</span> <span class="type">JSONObject</span> <span class="variable">jsonObject1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">                   jsonObject1.put(<span class="string">&quot;bid&quot;</span>,resultSet_forBlog.getString(<span class="number">1</span>));</span><br><span class="line">                   jsonObject1.put(<span class="string">&quot;publishtime&quot;</span>,resultSet_forBlog.getString(<span class="number">2</span>));</span><br><span class="line">                   jsonObject1.put(<span class="string">&quot;title&quot;</span>,resultSet_forBlog.getString(<span class="number">3</span>));</span><br><span class="line">                   jsonObject1.put(<span class="string">&quot;content&quot;</span>,resultSet_forBlog.getString(<span class="number">4</span>));</span><br><span class="line">                   jsonObject1.put(<span class="string">&quot;like&quot;</span>,resultSet_forBlog.getString(<span class="number">5</span>));</span><br><span class="line">                   jsonObject1.put(<span class="string">&quot;unlike&quot;</span>,resultSet_forBlog.getString(<span class="number">6</span>));</span><br><span class="line">                   jsonObject1.put(<span class="string">&quot;see&quot;</span>,resultSet_forBlog.getString(<span class="number">7</span>));</span><br><span class="line">                   jsonObject1.put(<span class="string">&quot;tagname&quot;</span>,resultSet_forBlog.getString(<span class="number">8</span>));</span><br><span class="line">                  <span class="number">3</span>  dataArrary.add(jsonObject1);</span><br><span class="line">               &#125;</span><br><span class="line">               jsonObject.put(<span class="string">&quot;code&quot;</span>,<span class="number">100000</span>);</span><br><span class="line">               jsonObject.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;正常&quot;</span>);</span><br><span class="line">              <span class="number">4</span> jsonObject.put(<span class="string">&quot;data&quot;</span>,dataArrary);</span><br><span class="line">               jsonObject.put(<span class="string">&quot;total&quot;</span>,count);</span><br></pre></td></tr></table></figure><h3 id="二、前段如何传输-一个数组-x2F-对象数组，让-servlet-可以直接使用-getParameter读取到"><a href="#二、前段如何传输-一个数组-x2F-对象数组，让-servlet-可以直接使用-getParameter读取到" class="headerlink" title="二、前段如何传输 一个数组&#x2F;对象数组，让 servlet  可以直接使用 getParameter读取到"></a>二、前段如何传输 一个数组&#x2F;对象数组，让 servlet  可以直接使用 getParameter读取到</h3><p>使用 JSON 的序列化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">data:&#123;</span><br><span class="line">JSON.stringfy()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、使用-axios-post请求时，-servlet-也无法直接通过-getparamter-方法获得参数"><a href="#三、使用-axios-post请求时，-servlet-也无法直接通过-getparamter-方法获得参数" class="headerlink" title="三、使用 axios post请求时， servlet 也无法直接通过 getparamter 方法获得参数"></a>三、使用 axios post请求时， servlet 也无法直接通过 getparamter 方法获得参数</h3><p>使用 qs 模块将 请求数据转换为 form-data</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">data:qs.stringify</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysqsl事务</title>
      <link href="/2022/11/10/MySQL/8-mysql%E4%BA%8B%E5%8A%A1/mysql%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/11/10/MySQL/8-mysql%E4%BA%8B%E5%8A%A1/mysql%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><p>​事务用于保证数据的&#x3D;&#x3D;一致性&#x3D;&#x3D;,它由&#x3D;&#x3D;一组相关的dml语句组成&#x3D;&#x3D;，该组的 dml 语句要么&#x3D;&#x3D;全部&#x3D;&#x3D;成功，要么&#x3D;&#x3D;全部&#x3D;&#x3D;失败。</p><blockquote><p>如转账业务</p></blockquote><h4 id="事务的理解"><a href="#事务的理解" class="headerlink" title="事务的理解"></a>事务的理解</h4><p>当有一个需求，需要多个操作一起完成</p><p><img src="/2022/11/10/MySQL/8-mysql%E4%BA%8B%E5%8A%A1/mysql%E4%BA%8B%E5%8A%A1/image-20221113200620146.png" alt="image-20221113200620146"></p><p>一般来说，事务是必须满足4个条件（ACID）：：原子性（<strong>A</strong>tomicity，或称不可分割性）、一致性（<strong>C</strong>onsistency）、隔离性（<strong>I</strong>solation，又称独立性）、持久性（<strong>D</strong>urability）。</p><ul><li><strong>原子性：</strong>一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li><li><strong>一致性：</strong>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li><li><strong>隔离性：</strong>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li><li><strong>持久性：</strong>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失</li></ul><h3 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h3><p>启动事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction;<span class="comment">---开始一个事务(这里会设置一个默认保存点)</span></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"><span class="keyword">SET</span> AUTOCOMMIT<span class="operator">=</span><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">savepoint</span>  保存节点名<span class="comment">--设置保存点</span></span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> 保存结点名 <span class="comment">--回退到指定的保存结点()</span></span><br><span class="line">A<span class="comment">--&gt;B---&gt;C</span></span><br><span class="line">注意：</span><br><span class="line"><span class="number">1.</span>如果直接从 C 回退到 A 。那 A 之后的保存点会被全部删除。</span><br><span class="line">即不能再回滚到 B 了</span><br><span class="line"><span class="keyword">rollback</span> <span class="comment">--不加保存点名就直接回退全部事务操作</span></span><br><span class="line"><span class="keyword">commit</span> <span class="comment">--提交事务，所有操作生效，==不能回退==</span></span><br></pre></td></tr></table></figure><h3 id="三、注意的点"><a href="#三、注意的点" class="headerlink" title="三、注意的点"></a>三、注意的点</h3>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-索引的入门</title>
      <link href="/2022/11/09/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/2-%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/11/09/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/2-%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、类型"><a href="#一、类型" class="headerlink" title="一、类型"></a>一、类型</h3><p><img src="/2022/11/09/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/2-%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/image-20221109213517647.png" alt="image-20221109213517647"></p><p>主键索引：如果某一列（字段）是主键，那它自然就是一个索引。</p><h3 id="二、创建索引"><a href="#二、创建索引" class="headerlink" title="二、创建索引"></a>二、创建索引</h3><p><img src="/2022/11/09/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/2-%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/image-20221109222019090.png" alt="image-20221109222019090"></p><h4 id="1-主键"><a href="#1-主键" class="headerlink" title="1.主键"></a>1.主键</h4><ol><li>建表时创建<br>CREATE TABLE &#x3D;&#x3D;表名&#x3D;&#x3D;(&#x3D;&#x3D;字段名&#x3D;&#x3D;INT PRIMARY KEY);</li><li>建表后创建<br>ALTER TABLE &#x3D;&#x3D;表名&#x3D;&#x3D; ADD PRIMARY KEY (&#x3D;&#x3D;字段名&#x3D;&#x3D;);</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表时创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t26( id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, `name` <span class="type">VARCHAR</span>(<span class="number">32</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t26 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (id);</span><br></pre></td></tr></table></figure><h4 id="2-unique"><a href="#2-unique" class="headerlink" title="2. unique"></a>2. unique</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX id_index <span class="keyword">ON</span> t26(`name`);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t25 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(`name`);</span><br></pre></td></tr></table></figure><h4 id="3-普通索引"><a href="#3-普通索引" class="headerlink" title="3.普通索引"></a>3.普通索引</h4><p>CREATE  INDEX 索引名 ON 表名(字段);</p><p>or</p><p>ALTER TABLE 表名 ADD INDEX 索引名(字段名);</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建普通索引</span></span><br><span class="line"><span class="keyword">CREATE</span>  INDEX id_index <span class="keyword">ON</span> t25(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如何选择</span></span><br><span class="line"><span class="comment">-- 1.如果某列的值不会重复则优先选择 unique 。否则 使用 普通索引。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加普通方式二、</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t25 <span class="keyword">ADD</span> INDEX id_index(id);</span><br></pre></td></tr></table></figure><h3 id="三、删除索引"><a href="#三、删除索引" class="headerlink" title="三、删除索引"></a>三、删除索引</h3><p>DROP INDEX 索引名 on 表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX id_index <span class="keyword">on</span> t25;</span><br></pre></td></tr></table></figure><p>删除主键索引</p><p>ALTER TABLE 表名 DROP PRIMARY KEY</p><h3 id="四、修改索引"><a href="#四、修改索引" class="headerlink" title="四、修改索引"></a>四、修改索引</h3><p>删除，再添加即可。</p><h3 id="五、查询索引"><a href="#五、查询索引" class="headerlink" title="五、查询索引"></a>五、查询索引</h3><h4 id="方式一、"><a href="#方式一、" class="headerlink" title="方式一、"></a>方式一、</h4><p>SHOW INDEX FROM tableName;</p><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>SHOW INDEXES FROM t26;</p><h4 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h4><p>SHOW KEYS FROM t26;</p><h4 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h4><p>DESC t26;</p><h3 id="六、联系"><a href="#六、联系" class="headerlink" title="六、联系"></a>六、联系</h3><p><img src="/2022/11/09/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/2-%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/image-20221109222802428.png" alt="image-20221109222802428"></p><p><img src="/2022/11/09/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/2-%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/image-20221109223414172.png" alt="image-20221109223414172"></p><h3 id="七、小结"><a href="#七、小结" class="headerlink" title="七、小结"></a>七、小结</h3><ol><li>创建&#x3D;&#x3D;primary主键&#x3D;&#x3D;或&#x3D;&#x3D;unique&#x3D;&#x3D;，会自动创建其相应的索引。</li><li>创建了&#x3D;&#x3D;primary 主键索引&#x3D;&#x3D;或&#x3D;&#x3D;unique索引&#x3D;&#x3D;后，其对应的列（字段）会自动拥有其约束。（unique–&gt;唯一、主键-unique+not null 、）</li></ol><h3 id="八、老韩的小结"><a href="#八、老韩的小结" class="headerlink" title="八、老韩的小结"></a>八、老韩的小结</h3><p><img src="/2022/11/09/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/2-%E7%B4%A2%E5%BC%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/image-20221109223727985.png" alt="image-20221109223727985"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引.md</title>
      <link href="/2022/11/09/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/1-%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BC%95%E5%87%BA/"/>
      <url>/2022/11/09/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/1-%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BC%95%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="索引的引出"><a href="#索引的引出" class="headerlink" title="索引的引出"></a>索引的引出</h3><p>A1：没有索引为什么会慢？</p><p>Q1：因为全表扫描。</p><p>A2：使用索引为什么会快？</p><p>Q2：因为形成了一个索引的数据结构，比如二叉树。</p><p>索引的代价：</p><p>1.磁盘占用</p><p>2.对 dml（delete 、insert、update ） 语句 的效率影响（需要对索引进行维护）。</p><h4 id="当没有索引时，"><a href="#当没有索引时，" class="headerlink" title="当没有索引时，"></a>当没有索引时，</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>即时它在第一行就找到了 id&#x3D;1的数据，但它不知道后面还有没有 id&#x3D;1 的数据，所以还是会进行 &#x3D;&#x3D;全表扫描&#x3D;&#x3D;</p><p><img src="/2022/11/09/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/1-%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BC%95%E5%87%BA/image-20221109211259891.png" alt="image-20221109211259891"></p><h4 id="索引的原理——二叉树"><a href="#索引的原理——二叉树" class="headerlink" title="索引的原理——二叉树"></a>索引的原理——二叉树</h4><p>形成一个数据结构 —–二叉树（一种情况）</p><p><img src="/2022/11/09/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/1-%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BC%95%E5%87%BA/image-20221109211751824.png" alt="image-20221109211751824"></p><p><img src="/2022/11/09/MySQL/7-MySQL%E7%B4%A2%E5%BC%95/1-%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BC%95%E5%87%BA/%E7%B4%A2%E5%BC%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.png" alt="索引的实现原理"></p><h3 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li><p>占用内存。</p></li><li><p>对 dml( update delete insert )语句的效率影响。</p><blockquote><p>修改了数据的话，会对原有的索引结构造成破坏，需要重新生成索引。—-&gt; 需要对&#x3D;&#x3D;索引进行维护&#x3D;&#x3D;。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql索引的引出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自增长</title>
      <link href="/2022/11/09/MySQL/12-mysql%E7%BA%A6%E6%9D%9F/auto_increase/"/>
      <url>/2022/11/09/MySQL/12-mysql%E7%BA%A6%E6%9D%9F/auto_increase/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="/2022/11/09/MySQL/12-mysql%E7%BA%A6%E6%9D%9F/auto_increase/image-20221109201115351.png" alt="image-20221109201115351"></p><p>5.如果添加时制定了数据，那会以 指定的数据 开始。&#x3D;&#x3D;<strong>如果制定了自增长，一般来说就按照自增长的规则来添加数据。</strong>&#x3D;&#x3D;</p><blockquote><p>但是 下一次自增长会自动 找到数据中的最大值进行 自增长。</p></blockquote><p>6.修改默认的增长至：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">table</span> 表明 auto_increment<span class="operator">=</span><span class="number">100</span>;</span><br><span class="line">从<span class="number">100</span>开始</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysqlcheck</title>
      <link href="/2022/11/09/MySQL/12-mysql%E7%BA%A6%E6%9D%9F/mysqlcheck/"/>
      <url>/2022/11/09/MySQL/12-mysql%E7%BA%A6%E6%9D%9F/mysqlcheck/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="check-约束"><a href="#check-约束" class="headerlink" title="check 约束"></a>check 约束</h3><p>what?</p><p>用于强制行数据必须满足的条件，假定 在 sal 列上定义了 check 约束，并且要求 sal 列值在1000~2000之间就会提示出错。</p><p>how</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">类名 类型 <span class="keyword">check</span>(<span class="keyword">check</span>条件)</span><br><span class="line"><span class="comment">-- check约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> checkdb(id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY, sal <span class="keyword">DOUBLE</span> <span class="keyword">CHECK</span>(sal <span class="operator">&gt;</span> <span class="number">100</span> <span class="keyword">AND</span> sal <span class="operator">&lt;</span> <span class="number">2000</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> checkdb <span class="keyword">VALUE</span>(<span class="number">1</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">-- 报错Check constraint &#x27;checkdb_chk_1&#x27; is violated.</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> check </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql约束</title>
      <link href="/2022/11/09/MySQL/12-mysql%E7%BA%A6%E6%9D%9F/1-mysql%E7%BA%A6%E6%9D%9F/"/>
      <url>/2022/11/09/MySQL/12-mysql%E7%BA%A6%E6%9D%9F/1-mysql%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><strong>约束</strong></p><ul><li>not null</li><li>unique</li><li>primary key</li><li>foreign key</li><li>check</li></ul><h3 id="一、主键"><a href="#一、主键" class="headerlink" title="一、主键"></a>一、主键</h3><p>what?</p><p>​用于唯一的表示表行的数据。当定义主键后，行不能重复。</p><p>how?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">定义方式</span><br><span class="line">1. 字段名 PRIMARY KEY</span><br><span class="line">CREATE TABLE a17 (id INT PRIMARY KEY);</span><br><span class="line">2. 在表定义最后写 PRIMARY KEY(列名)</span><br><span class="line">CREATE TABLE a178(id INT , `name` VARCHAR(32), PRIMARY KEY(id,`name`) ---复合主键</span><br><span class="line"> );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>特点：</p><ol><li><p>主键的值不能重复 且 不能为&#x3D;&#x3D;null&#x3D;&#x3D;。</p></li><li><p>一张表只能有一个主键，但是可以是复合主键（把多个字段看成一个）</p></li><li><p>复合组件( id+name ) 的值不能相同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> a178(id <span class="type">INT</span> , `name` <span class="type">VARCHAR</span>(<span class="number">32</span>), <span class="keyword">PRIMARY</span> KEY(id,`name`) <span class="comment">---复合主键 );</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> a178 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> a178 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;SICK&#x27;</span>); <span class="comment">----合起来不同可以  </span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> a178 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>);  <span class="comment">-----合起来相同不行--Duplicate entry &#x27;1-tom&#x27; for key &#x27;a178.PRIMARY&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="/2022/11/09/MySQL/12-mysql%E7%BA%A6%E6%9D%9F/1-mysql%E7%BA%A6%E6%9D%9F/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221109163416.jpg" alt="微信图片_20221109163416"></p><p><img src="/2022/11/09/MySQL/12-mysql%E7%BA%A6%E6%9D%9F/1-mysql%E7%BA%A6%E6%9D%9F/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221109163426.jpg" alt="微信图片_20221109163426"></p><h3 id="二、unique"><a href="#二、unique" class="headerlink" title="二、unique"></a>二、unique</h3><p>what?</p><p>​不能重复的子弹</p><p>特点：</p><ol><li>如果没有指定 not null ，则 unique 字段可以有多个 null</li><li>如果一个列（字段），是 unique not null 使用效果类似 primary key</li><li>一张表中可以有&#x3D;&#x3D;多个unique&#x3D;&#x3D;</li></ol><h3 id="三、外键"><a href="#三、外键" class="headerlink" title="三、外键"></a>三、外键</h3><p>what?</p><p>​定义主表和从表之间的关系：外键约束</p><p>how?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FOREIGN <span class="title function_">KEY</span> <span class="params">(从表字段名)</span>) REFERENCES 主表名(主表字段名));</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"></span><br><span class="line">-- 创建主表 my_class</span><br><span class="line">CREATE TABLE <span class="title function_">my_class</span><span class="params">(id INT PRIMARY KEY,`name` VARCHAR(<span class="number">32</span>)</span> NOTNULL DEFAULT <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">-- 创建从表 my_student</span><br><span class="line">CREATE TABLE <span class="title function_">my_student</span><span class="params">(id INT PRIMARY KEY,`name` VARBINARY(<span class="number">32</span>)</span> NOT NULL DEFAULT <span class="string">&#x27;&#x27;</span>,class_id INT,</span><br><span class="line">-- 下面指定外键关系</span><br><span class="line">FOREIGN <span class="title function_">KEY</span> <span class="params">(class_id)</span> REFERENCES <span class="title function_">my_class</span><span class="params">(id)</span>);</span><br></pre></td></tr></table></figure><p><img src="/2022/11/09/MySQL/12-mysql%E7%BA%A6%E6%9D%9F/1-mysql%E7%BA%A6%E6%9D%9F/image-20221109190207611.png" alt="image-20221109190207611"></p><p>外键约束案例：<br><img src="/2022/11/09/MySQL/12-mysql%E7%BA%A6%E6%9D%9F/1-mysql%E7%BA%A6%E6%9D%9F/image-20221109190520461.png" alt="image-20221109190520461"></p><p>1.这里的 300 会插入失败。</p><p>且：</p><p> &#x3D;&#x3D;数据不能随意删除&#x3D;&#x3D;</p><p>​2.如果sn_002 中的class_id 和 id &#x3D;200 形成外键，那 班级表中 id&#x3D;200 这条记录不能直接删除。</p><p>需要先删除 sn_002 这个记录，再删除 班级表中 id&#x3D;200 的记录。</p><blockquote><p>不能删除主键中 ， 在从表中的外键绑定了 的数据。</p></blockquote><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_class <span class="keyword">VALUES</span>(<span class="number">100</span>,&quot;java&quot;),(<span class="number">200</span>,&quot;web&quot;);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_class;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+------+</span></span><br><span class="line"><span class="operator">|</span> id  <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span> java <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">200</span> <span class="operator">|</span> web  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_student <span class="keyword">VALUE</span>(<span class="number">1</span>,&quot;tom&quot;,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_student <span class="keyword">VALUE</span>(<span class="number">2</span>,&quot;jack&quot;,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_student <span class="keyword">VALUE</span>(<span class="number">3</span>,&quot;hsp&quot;,<span class="number">300</span>); <span class="comment">-- 这里会失败，因为 300班级不存在</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> my_student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name       <span class="operator">|</span> class_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">0x746F6D</span>   <span class="operator">|</span>      <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="number">0x6A61636B</span> <span class="operator">|</span>      <span class="number">200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h4><ol><li><p>主表中必须为主键或者 unique？</p><blockquote><p>外键指向的必须是唯一的。</p></blockquote></li><li><p>表的类型是 innodb ，这样的表才能支持外键。</p></li><li><p>外键字段的类型要和主键字段的&#x3D;&#x3D;类型一致&#x3D;&#x3D;（长度可以不同）。</p></li><li><p>外键字段的值，必须在主段字段中出现过，或者为null【前提是外键字段允许为null]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我一开始不知道这个学生将来是什么班级，那就为空</span><br><span class="line">INSERT INTO my_student VALUE4,<span class="string">&quot;hwc&quot;</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></li><li><p>一旦建立主外键关系，数据就不能随意删除了。</p><blockquote><p>上面的外键案例。</p><p>从表中有 外键 指向主表中的一条记录的字段，则该主表中的该条记录不能直接删除。</p><p>怎么解决？</p><p>删除 从表中外键和 该主表记录有联系的 从表所有记录。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql视图</title>
      <link href="/2022/11/09/MySQL/9-%E8%A7%86%E5%9B%BE/1-%E8%A7%86%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/11/09/MySQL/9-%E8%A7%86%E5%9B%BE/1-%E8%A7%86%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>what?<br>    从不同的角度查看同一个数据库</p><p>how?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create view dept2_view as select * from dept2;</span><br><span class="line">#删除</span><br><span class="line">drop view dept2_view;</span><br></pre></td></tr></table></figure><blockquote><p>只有 DML 语句才能以 view 的形式创建。</p><p>create view view_name as 这里的语句必须为 DQL 语句</p></blockquote><p>创建 view 的 SQL 语句，&#x3D;&#x3D;只能是 DQL&#x3D;&#x3D;。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#复制表</span><br><span class="line">create table dept2 as select * from dept;</span><br></pre></td></tr></table></figure><p>why?</p><p>​为什么要使用视图。 </p><p>​—-简化开发</p><p>假如有一条非常复杂的 SQL 语句，而这条 SQL 语句需要在不同的位置上&#x3D;&#x3D;反复使用&#x3D;&#x3D;。–这这条复杂的 sql 语句 写成一个视图。在需要编写这条 SQL 语句的位置直接使用视图对象，可以简化开发。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">create view</span><br><span class="line">emp_dept_view</span><br><span class="line">as</span><br><span class="line">select</span><br><span class="line">e.ename,e.sal,d.dname</span><br><span class="line">from</span><br><span class="line">emp e</span><br><span class="line">join</span><br><span class="line">dept d</span><br><span class="line">where</span><br><span class="line">e.deptno=d.deptno;</span><br><span class="line">一条对视图操作的 sql 语句，即可完成对两个表的操作</span><br><span class="line">mysql&gt; select * from dept;</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">| DEPTNO | DNAME      | LOC      |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">|     10 | ACCOUNTING | NEW YORK |</span><br><span class="line">|     20 | RESEARCH   | DALLAS   |</span><br><span class="line">|     30 | SALES      | CHICAGO  |</span><br><span class="line">|     40 | OPERATIONS | BOSTON   |</span><br><span class="line">+--------+------------+----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line">mysql&gt; select * from emp;</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |</span><br><span class="line">|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |</span><br><span class="line">|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |</span><br><span class="line">|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |</span><br><span class="line">|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |</span><br><span class="line">|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |</span><br><span class="line">|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |</span><br><span class="line">|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |</span><br><span class="line">|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |</span><br><span class="line">|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |</span><br><span class="line">|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |</span><br><span class="line">|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">## 展示</span><br><span class="line">mysql&gt; select * from emp_dept_view;</span><br><span class="line">+--------+---------+------------+</span><br><span class="line">| ename  | sal     | dname      |</span><br><span class="line">+--------+---------+------------+</span><br><span class="line">| SMITH  |  800.00 | RESEARCH   |</span><br><span class="line">| ALLEN  | 1600.00 | SALES      |</span><br><span class="line">| WARD   | 1250.00 | SALES      |</span><br><span class="line">| JONES  | 2975.00 | RESEARCH   |</span><br><span class="line">| MARTIN | 1250.00 | SALES      |</span><br><span class="line">| BLAKE  | 2850.00 | SALES      |</span><br><span class="line">| CLARK  | 2450.00 | ACCOUNTING |</span><br><span class="line">| SCOTT  | 3000.00 | RESEARCH   |</span><br><span class="line">| KING   | 5000.00 | ACCOUNTING |</span><br><span class="line">| TURNER | 1500.00 | SALES      |</span><br><span class="line">| ADAMS  | 1100.00 | RESEARCH   |</span><br><span class="line">| JAMES  |  950.00 | SALES      |</span><br><span class="line">| FORD   | 3000.00 | RESEARCH   |</span><br><span class="line">| MILLER | 1300.00 | ACCOUNTING |</span><br><span class="line">+--------+---------+------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br><span class="line">## 修改一个项</span><br><span class="line"># smith 的 sal 修改为900</span><br><span class="line">mysql&gt; update emp_dept_view set sal=900 where ename=&#x27;smith&#x27;;</span><br><span class="line">mysql&gt; select * from emp_dept_view;</span><br><span class="line">+--------+---------+------------+</span><br><span class="line">| ename  | sal     | dname      |</span><br><span class="line">+--------+---------+------------+</span><br><span class="line">| SMITH  |  900.00 | RESEARCH   |----&gt;已经修改</span><br><span class="line">| ALLEN  | 1600.00 | SALES      |</span><br><span class="line">| WARD   | 1250.00 | SALES      |</span><br><span class="line">| JONES  | 2975.00 | RESEARCH   |</span><br><span class="line">| MARTIN | 1250.00 | SALES      |</span><br><span class="line">| BLAKE  | 2850.00 | SALES      |</span><br><span class="line">| CLARK  | 2450.00 | ACCOUNTING |</span><br><span class="line">| SCOTT  | 3000.00 | RESEARCH   |</span><br><span class="line">| KING   | 5000.00 | ACCOUNTING |</span><br><span class="line">| TURNER | 1500.00 | SALES      |</span><br><span class="line">| ADAMS  | 1100.00 | RESEARCH   |</span><br><span class="line">| JAMES  |  950.00 | SALES      |</span><br><span class="line">| FORD   | 3000.00 | RESEARCH   |</span><br><span class="line">| MILLER | 1300.00 | ACCOUNTING |</span><br><span class="line">+--------+---------+------------+</span><br><span class="line">#查看emp</span><br><span class="line">mysql&gt; select * from emp;</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |</span><br><span class="line">+-------+--------+-----------+------+------------+---------+---------+--------+</span><br><span class="line">|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  900.00 |    NULL |     20 | ----&gt; sal 已经被修改为900</span><br><span class="line">|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |</span><br><span class="line">|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |</span><br><span class="line">|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |</span><br><span class="line">|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |</span><br><span class="line">|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |</span><br><span class="line">|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |</span><br><span class="line">|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |</span><br><span class="line">|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |</span><br><span class="line">|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |</span><br><span class="line">|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |</span><br><span class="line">|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |</span><br><span class="line">|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |</span><br><span class="line">+-------+--------+----------</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>对视图进行的增删改查，会导致原表被操作。</li><li>视图也是一个文件，可以看成一张表，即可以直接对其进行增删改查。</li></ol><blockquote><p>增删改查：CRUD</p><p>C：create（增）</p><p>R：retrive  (查)</p><p>U：update 改）</p><p>D：delete（删）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql视图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-抽象列的入门</title>
      <link href="/2022/11/08/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/6-%E6%8A%BD%E8%B1%A1%E7%B1%BB/1-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/08/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/6-%E6%8A%BD%E8%B1%A1%E7%B1%BB/1-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、抽象类的介绍"><a href="#一、抽象类的介绍" class="headerlink" title="一、抽象类的介绍"></a>一、抽象类的介绍</h3><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>what?</p><p>​当用 一个 abstract 关键字来修饰一个类时，这个类就被称为 &#x3D;&#x3D;抽象类&#x3D;&#x3D;</p><p>how?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">abstract</span> 类名&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><p>what?</p><p>​当用 一个 abstract 关键字来修饰一个方法时，这个类就被称为 &#x3D;&#x3D;抽象方法&#x3D;&#x3D;</p><p><img src="/2022/11/08/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/6-%E6%8A%BD%E8%B1%A1%E7%B1%BB/1-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%85%A5%E9%97%A8/image-20221108184236092.png" alt="image-20221108184236092"></p><h3 id="二、抽象类的注意事项"><a href="#二、抽象类的注意事项" class="headerlink" title="二、抽象类的注意事项"></a>二、抽象类的注意事项</h3><ol><li><p>抽象类的 &#x3D;&#x3D;抽象方法一定要被子类实现&#x3D;&#x3D;or&#x3D;&#x3D;子类也是抽象类&#x3D;&#x3D;。</p></li><li><p>抽象类不能被实例化<br><img src="/2022/11/08/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/6-%E6%8A%BD%E8%B1%A1%E7%B1%BB/1-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%85%A5%E9%97%A8/image-20221108184721482.png" alt="image-20221108184721482"></p></li><li><p>有抽象方法的类一定是抽象方法，但抽象类不一定有抽象方法。</p></li><li><p><code>abstract 只能修饰类和方法</code><br><img src="/2022/11/08/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/6-%E6%8A%BD%E8%B1%A1%E7%B1%BB/1-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%85%A5%E9%97%A8/image-20221108184853996.png" alt="image-20221108184853996"></p></li><li><p>抽象类可以有类的任何成员。&#x3D;&#x3D;【其本质还是类】&#x3D;&#x3D;</p></li><li><p>抽象方法不能有方法主体<br><img src="/2022/11/08/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/6-%E6%8A%BD%E8%B1%A1%E7%B1%BB/1-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%85%A5%E9%97%A8/image-20221108185110200.png" alt="image-20221108185110200"></p></li><li><p>抽象方法不能使用 private、final 和 static 来修饰。</p><blockquote><p>private ：子类无法访问改父类方法，也就无法完成对此方法进行重写。</p><p>final 修饰的方法不能被重写，但在子类中必须对抽象方法进行重写。</p><p>static ：静态方法本身就不能被覆盖<br><img src="/2022/11/08/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/6-%E6%8A%BD%E8%B1%A1%E7%B1%BB/1-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%85%A5%E9%97%A8/image-20221108192501511.png" alt="image-20221108192501511"></p></blockquote></li></ol><blockquote><p> 重写是子类对&#x3D;&#x3D;父类的允许访问的方法&#x3D;&#x3D;的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！</p></blockquote><h3 id="三、应用"><a href="#三、应用" class="headerlink" title="三、应用"></a>三、应用</h3><p>１．　模块设计模式</p><p>需求：<br><img src="/2022/11/08/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/6-%E6%8A%BD%E8%B1%A1%E7%B1%BB/1-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%85%A5%E9%97%A8/image-20221108185603751.png" alt="image-20221108185603751"></p><p>答案：</p><p>１. 写一个父类。然后让 dojob 方法成为抽象方法，子类实现它，并在里面写子类做的事情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span>  <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">calculateTime</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    dojob();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> total=end-start;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">dojob</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">bbb</span> <span class="keyword">extends</span> <span class="title class_">test</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dojob</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抽象类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注入</title>
      <link href="/2022/11/08/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/3-SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/11/08/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/3-SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><ol><li>statement 是一个接口</li></ol><p><img src="/2022/11/08/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/3-SQL%E6%B3%A8%E5%85%A5/image-20221108214523439.png" alt="image-20221108214523439"></p><ol start="2"><li><p>SQL 注入及 为什么使用 preparedStatemnet<br><img src="/2022/11/08/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/3-SQL%E6%B3%A8%E5%85%A5/image-20221108214844513.png" alt="image-20221108214844513"></p><p><img src="/2022/11/08/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/3-SQL%E6%B3%A8%E5%85%A5/image-20221108214807373.png" alt="image-20221108214807373"></p></li></ol><h3 id="二、解决办法。PreparedStatement"><a href="#二、解决办法。PreparedStatement" class="headerlink" title="二、解决办法。PreparedStatement"></a>二、解决办法。PreparedStatement</h3><p><img src="/2022/11/08/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/3-SQL%E6%B3%A8%E5%85%A5/image-20221108220508024.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>注入</title>
      <link href="/2022/11/08/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2022/11/08/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/08/JavaWeb/libs/JSONObject/"/>
      <url>/2022/11/08/JavaWeb/libs/JSONObject/</url>
      
        <content type="html"><![CDATA[<h3 id="一、下载地址"><a href="#一、下载地址" class="headerlink" title="一、下载地址"></a>一、下载地址</h3><h3 id="二、怎么使用"><a href="#二、怎么使用" class="headerlink" title="二、怎么使用"></a>二、怎么使用</h3><p>创建对象</p><p>JSONObjec jsonobect&#x3D; new JSONObject()</p><p>添加数据</p><p>jsonobject.put(key,value);</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/08/JavaWeb/libs/javamail/"/>
      <url>/2022/11/08/JavaWeb/libs/javamail/</url>
      
        <content type="html"><![CDATA[<h3 id><a href="#" class="headerlink" title></a></h3><p>下载地址</p><p><a href="https://github.com/javaee/javamail/releases">github地址</a></p><h3 id="参考案例"><a href="#参考案例" class="headerlink" title="参考案例"></a>参考案例</h3><p><a href="https://blog.csdn.net/qq_41694906/article/details/106379856">csdn博客</a></p><p>发送文本</p><p>&#96;&#96;&#96;java<br>import javax.mail.Session;<br>import javax.mail.Transport;<br>import javax.mail.internet.InternetAddress;<br>import javax.mail.internet.MimeMessage;<br>import java.util.Date;<br>import java.util.Properties;</p><p>&#x2F;**</p><ul><li><p>Description:</p></li><li><p>Date:       2020&#x2F;5&#x2F;27 - 下午 1:14</p></li><li><p>author:     wangkanglu</p></li><li><p>version:    V1.0<br> *&#x2F;<br>public class TestEmailUtil {</p><p> public static void main(String[] args) throws Exception {<br> &#x2F;&#x2F; 发件人的 邮箱 和 密码（替换为自己的邮箱和密码）<br> String myEmailAccount &#x3D; “”;<br> &#x2F;&#x2F; PS: 某些邮箱服务器为了增加邮箱本身密码的安全性，给 SMTP 客户端设置了独立密码（有的邮箱称为“授权码”）,<br> &#x2F;&#x2F;     对于开启了独立密码的邮箱, 这里的邮箱密码必需使用这个独立密码（授权码）。<br> String myEmailPassword &#x3D; “”;<br><br> &#x2F;&#x2F; 发件人邮箱的 SMTP 服务器地址, 必须准确, 不同邮件服务器地址不同, 一般(只是一般, 绝非绝对)格式为: smtp.xxx.com<br> &#x2F;&#x2F;如；163邮箱是smtp.163.com，qq邮箱是smtp.qq.com。<br> String myEmailSMTPHost &#x3D; “smtp.qq.com”;<br><br> &#x2F;&#x2F; 收件人邮箱（替换为自己知道的有效邮箱）<br> String receiveMailAccount &#x3D; “ “;<br><br><br> &#x2F;&#x2F; 1. 创建参数配置, 用于连接邮件服务器的参数配置<br> &#x2F;&#x2F; 参数配置类<br> Properties props &#x3D; new Properties();<br> &#x2F;&#x2F; 使用的协议（JavaMail规范要求）<br> props.setProperty(“mail.transport.protocol”, “smtp”);<br> &#x2F;&#x2F; 发件人的邮箱的 SMTP 服务器地址<br> props.setProperty(“mail.smtp.host”, myEmailSMTPHost);<br> &#x2F;&#x2F; 需要请求认证<br> props.setProperty(“mail.smtp.auth”, “true”);<br><br> &#x2F;&#x2F;某些邮箱服务器要求 SMTP 连接需要使用 SSL 安全认证 (为了提高安全性, 邮箱支持SSL连接, 也可以自己开启),<br> &#x2F;&#x2F;如果无法连接邮件服务器, 仔细查看控制台打印的 log, 如果有有类似 “连接失败, 要求 SSL 安全连接” 等错误,<br> &#x2F;&#x2F;打开下面 注释之间的注释代码, 开启 SSL 安全连接。<br> &#x2F;&#x2F;SMTP 服务器的端口 (非 SSL 连接的端口一般默认为 25, 可以不添加, 如果开启了 SSL 连接,<br> &#x2F;&#x2F;                  需要改为对应邮箱的 SMTP 服务器的端口, 具体可查看对应邮箱服务的帮助,<br> &#x2F;&#x2F;                  QQ邮箱的SMTP(SLL)端口为465或587, 其他邮箱自行去查看)</p></li></ul><p>&#x2F;&#x2F;        final String smtpPort &#x3D; “465”;<br>&#x2F;&#x2F;        props.setProperty(“mail.smtp.port”, smtpPort);<br>&#x2F;&#x2F;        props.setProperty(“mail.smtp.socketFactory.class”, “javax.net.ssl.SSLSocketFactory”);<br>&#x2F;&#x2F;        props.setProperty(“mail.smtp.socketFactory.fallback”, “false”);<br>&#x2F;&#x2F;        props.setProperty(“mail.smtp.socketFactory.port”, smtpPort);</p><pre><code>    // 2. 根据配置创建会话对象, 用于和邮件服务器交互    Session session = Session.getInstance(props);    // 设置为debug模式, 可以查看详细的发送 log    session.setDebug(true);    // 3. 创建一封邮件即邮件对象    MimeMessage message = createMimeMessage(session, myEmailAccount, receiveMailAccount);    // 4. 根据 Session 获取邮件传输对象    Transport transport = session.getTransport();    // 5. 使用 邮箱账号 和 密码 连接邮件服务器, 这里认证的邮箱必须与 message 中的发件人邮箱一致, 否则报错    //    //    PS_01: 成败的判断关键在此一句, 如果连接服务器失败, 都会在控制台输出相应失败原因的 log,    //           仔细查看失败原因, 有些邮箱服务器会返回错误码或查看错误类型的链接, 根据给出的错误    //           类型到对应邮件服务器的帮助网站上查看具体失败原因。    //    //    PS_02: 连接失败的原因通常为以下几点, 仔细检查代码:    //           (1) 邮箱没有开启 SMTP 服务;    //           (2) 邮箱密码错误, 例如某些邮箱开启了独立密码;    //           (3) 邮箱服务器要求必须要使用 SSL 安全连接;    //           (4) 请求过于频繁或其他原因, 被邮件服务器拒绝服务;    //           (5) 如果以上几点都确定无误, 到邮件服务器网站查找帮助。    //    //    PS_03: 仔细看log, 认真看log, 看懂log, 错误原因都在log已说明。    transport.connect(myEmailAccount, myEmailPassword);    // 6. 发送邮件, 发到所有的收件地址, message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人    transport.sendMessage(message, message.getAllRecipients());    // 7. 关闭连接    transport.close();&#125;/** * 创建一封只包含文本的简单邮件 * * @param session     和服务器交互的会话对象 * @param sendMail    发件人邮箱 * @param receiveMail 收件人邮箱 * @return * @throws Exception */public static MimeMessage createMimeMessage(Session session, String sendMail, String receiveMail) throws Exception &#123;    // 1. 创建一封邮件    MimeMessage message = new MimeMessage(session);    // 2. From: 发件人（昵称有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改昵称）    message.setFrom(new InternetAddress(sendMail, &quot;昵称&quot;, &quot;UTF-8&quot;));    // 3. To: 收件人（可以增加多个收件人、抄送、密送）    message.setRecipient(MimeMessage.RecipientType.TO, new InternetAddress(receiveMail, &quot;&quot;, &quot;UTF-8&quot;));    // 4. Subject: 邮件主题    message.setSubject(&quot;测试发邮件&quot;, &quot;UTF-8&quot;);    // 5. Content: 邮件正文（可以使用html标签）    message.setContent(&quot;邮件内容&quot;, &quot;text/html;charset=UTF-8&quot;);    // 6. 设置发件时间    message.setSentDate(new Date());    // 7. 保存设置    message.saveChanges();    return message;&#125;</code></pre><p>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-api%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-api%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager:"></a>DriverManager:</h3><p>1.注册驱动</p><p>2.获取连接</p><p>1.<img src="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-api%E8%AF%A6%E8%A7%A3/image-20221105203217267.png" alt="image-20221105203217267"></p><p>2.<img src="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-api%E8%AF%A6%E8%A7%A3/image-20221105203313764.png" alt="image-20221105203313764"></p><p>解决ssl报错</p><p>在路径后面添加 useSSL&#x3D;false </p><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>a)获取 SQL 对象</p><p>b)事物管理。</p><ol><li><p>获取SQL 对象<img src="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-api%E8%AF%A6%E8%A7%A3/image-20221106003915975.png" alt="image-20221106003915975"></p></li><li><p>事物管理<br><img src="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/1-api%E8%AF%A6%E8%A7%A3/image-20221106004036509.png" alt="image-20221106004036509"></p></li></ol><blockquote><p>setAutoCommit()  需要传入 FALSE 才能是手动开启事物</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/0%E4%B8%80%E8%A7%88%E5%A4%A7%E7%BA%B2/"/>
      <url>/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/0%E4%B8%80%E8%A7%88%E5%A4%A7%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/0%E4%B8%80%E8%A7%88%E5%A4%A7%E7%BA%B2/image-20221105183017600.png" alt="image-20221105183017600"></p><h3 id="一、JDBC的概述"><a href="#一、JDBC的概述" class="headerlink" title="一、JDBC的概述"></a>一、JDBC的概述</h3><ol><li><p><img src="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/0%E4%B8%80%E8%A7%88%E5%A4%A7%E7%BA%B2/image-20221105184525040.png" alt="image-20221105184525040"><br><img src="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/0%E4%B8%80%E8%A7%88%E5%A4%A7%E7%BA%B2/image-20221105184903507.png" alt="image-20221105184903507"><br><img src="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/0%E4%B8%80%E8%A7%88%E5%A4%A7%E7%BA%B2/image-20221105184943617.png" alt="image-20221105184943617"></p></li><li><p>原理图<br><img src="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/0%E4%B8%80%E8%A7%88%E5%A4%A7%E7%BA%B2/image-20221105184007050.png" alt="image-20221105184007050"><br><img src="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/0%E4%B8%80%E8%A7%88%E5%A4%A7%E7%BA%B2/image-20221105192200652.png" alt="image-20221105192200652"></p></li></ol><h3 id="二、第一个jdbc"><a href="#二、第一个jdbc" class="headerlink" title="二、第一个jdbc"></a>二、第一个jdbc</h3><ol><li><p>基本介绍<br><img src="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/0%E4%B8%80%E8%A7%88%E5%A4%A7%E7%BA%B2/image-20221105185107152.png" alt="image-20221105185107152"><br><img src="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/0%E4%B8%80%E8%A7%88%E5%A4%A7%E7%BA%B2/image-20221105201033046.png" alt="image-20221105201033046"></p></li><li><p>开始</p><ol><li>安装驱动 —将 jar 包放入 project 的 libs 文件目录下 ，然后右键 add as library<br><img src="/2022/11/05/JAVA/JDBC%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0/0%E4%B8%80%E8%A7%88%E5%A4%A7%E7%BA%B2/image-20221105190350011.png" alt="image-20221105190350011"></li></ol></li></ol><p>安装驱动的另一种方法，添加classpath系统变量(这个配置时针对文本编辑器，使用 idea 不用此配置)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classpath:&#x27;.;你的mysql-connect-java.jar包的路径&#x27;</span><br><span class="line">//为什么要配置 . ---&gt;当前路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不配置的话，当你想在当前路径执行编译完的.class文件</span></span><br><span class="line">执行的时候它将会直接到你设置的 mysqlxxxx 那个路径去找</span><br></pre></td></tr></table></figure><ol start="3"><li>编写案例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>连接驱动</span><br><span class="line">jdbc五以上用这个</span><br><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;<span class="comment">//jdbc驱动</span></span><br><span class="line">jdbc五以前</span><br><span class="line"><span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">Class.forName(drive)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/03/JavaWeb/%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
      <url>/2022/11/03/JavaWeb/%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>处理 post 方法的乱码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">request.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">//处理post的乱码</span><br><span class="line">//必须在所有的获取参数动作之前</span><br></pre></td></tr></table></figure><p>处理get方法  (Tomcat8之前 )</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">get方式下目前不需要设置编码(基于Tomcat8)</span><br><span class="line">       /*Tomcat 8之前的处理方式</span><br><span class="line">        * String fname = request.getParameter(&quot;fname&quot;);</span><br><span class="line">       *1.将字符串打散成字节数组</span><br><span class="line">       *byte[] bytes = fname.getBytes(&quot;ISO-8859-1&quot;);</span><br><span class="line">       * 2.将字符数组按照设定的编码重新组装成字符串</span><br><span class="line">       *fname=new String(bytes,&quot;UTF-8&quot;);</span><br><span class="line">       *</span><br><span class="line">       * */</span><br></pre></td></tr></table></figure><p>注意：</p><p>​<strong>设置编码必须在所有的获取参数动作之前</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-作用域基本介绍</title>
      <link href="/2022/11/03/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7-%E4%BD%9C%E7%94%A8%E5%9F%9F/1-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/11/03/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7-%E4%BD%9C%E7%94%A8%E5%9F%9F/1-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h4 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h4><p>一、在 java 编程中，主要的变量就是 属性（成员变量）和局部变量。</p><p>二、我们说的局部变量一般是指成员方法中定义的变量（同时方法块中的变量也是属于局部变量）</p><p>三、java 中作用域的分类：</p><p>全局变量:</p><p>​也就是属性，作用域为&#x3D;&#x3D;<strong>整个类体</strong>&#x3D;&#x3D;。在类成员(属性、方法、方法块、内部类)中都可以访问</p><p>局部变量：也就是除了属性之外的其他变量，作用域为&#x3D;&#x3D;定义它的代码块中&#x3D;&#x3D;</p><p>四、&#x3D;&#x3D;全局变量（属性）&#x3D;&#x3D;可以不赋值，直接使用，因为其有 &#x3D;&#x3D;默认值&#x3D;&#x3D;。</p><p>​而<br>​成员变量必须进行赋值，才能使用，因为其&#x3D;&#x3D;没有默认值&#x3D;&#x3D;<br>​<img src="/2022/11/03/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7-%E4%BD%9C%E7%94%A8%E5%9F%9F/1-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/image-20221103170244601.png" alt="image-20221103170244601"></p><blockquote><p>String 类型无论是全局变量还是局部变量，如果没有初始化，那值都为 “null” ，不可以使用 name.equal()方法，否则有&#x3D;&#x3D;nullPointException&#x3D;&#x3D;空指针异常。</p></blockquote><h4 id="二、注意的点"><a href="#二、注意的点" class="headerlink" title="二、注意的点"></a>二、注意的点</h4><ol><li>访问的就近原则<br>如果局部变量和成员变量（属性）有重名，则在方法块中会优先访问 局部变量。</li><li>重新定义的问题：<br>2.1如果局部变量重新对成员变量进行了定义，则方法体内访问的将是局部变量。如果没有重新定义，而是修改数值，则访问的还是成员变量。<br>2.2在同一个作用域中，&#x3D;&#x3D;不能定义 同名的两个变量&#x3D;&#x3D;</li><li>生命周期：<br>属性（成员变量）的生命周期较长，伴随对象的创建而创建，伴随着对象的销毁而销毁。而局部变量的生命周期较短，伴随代码块的执行而创建，伴随代码块的结束而销毁。</li><li>访问范围的问题：<br>4.1全局变量可以被其他类访问—-&gt; 对象名.parameterName<br>4.2全局变量可以添加修饰符，局部变量不可以。<br><img src="/2022/11/03/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7-%E4%BD%9C%E7%94%A8%E5%9F%9F/1-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/image-20221103183423145.png" alt="image-20221103183423145"></li><li>在方法的方法块内，&#x3D;&#x3D;不可以重新定义&#x3D;&#x3D;和方法内 &#x3D;&#x3D;同名的变量&#x3D;&#x3D;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">10</span>;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x=<span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;报错</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/03/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7-%E4%BD%9C%E7%94%A8%E5%9F%9F/1-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/11/03/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7-%E4%BD%9C%E7%94%A8%E5%9F%9F/1-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>饿汉模式</title>
      <link href="/2022/11/03/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/4-%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1-%E9%A5%BF%E6%B1%89%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/11/03/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/4-%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1-%E9%A5%BF%E6%B1%89%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/11/03/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/4-%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1-%E9%A5%BF%E6%B1%89%E6%A8%A1%E5%BC%8F/image-20221103155324261.png" alt="image-20221103155324261"></p><p>Runtime 饿汉模式</p><ol><li>饿汉<ol><li>在对象加载时就创建对象</li><li>可能存在资源量浪费问题</li></ol></li><li>懒汉<ol><li>在调用 getInstance 才会创建</li><li>有线程安全问题</li></ol></li></ol><h4 id="一、饿汉"><a href="#一、饿汉" class="headerlink" title="一、饿汉"></a>一、饿汉</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jhfuture.single_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleTon01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 饿汉模式 ---&gt;只能有一个对象</span></span><br><span class="line"><span class="comment">* 1.构造器私有化 》防止直接 new</span></span><br><span class="line"><span class="comment">* 2.类的内部创建对象</span></span><br><span class="line"><span class="comment">* 3.向外暴露一个 getInstance方法。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line">        System.out.println(GirlFriend.getInstance());</span><br><span class="line">        System.out.println(GirlFriend.getInstance());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">GirlFriend</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GirlFriend</span> <span class="variable">girlFriend</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GirlFriend</span>(<span class="string">&quot;小谭&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>   GirlFriend <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> girlFriend;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GirlFriend</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、懒汉"><a href="#二、懒汉" class="headerlink" title="二、懒汉"></a>二、懒汉</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jhfuture.single_;</span><br><span class="line"><span class="comment">//懒汉模式</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">singleTon2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Cat.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Cat cat;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> age=<span class="number">99</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cat <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cat==<span class="literal">null</span>)&#123;</span><br><span class="line">            cat=<span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码块</title>
      <link href="/2022/11/03/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/3-%E4%BB%A3%E7%A0%81%E5%9D%97/1-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/11/03/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/3-%E4%BB%A3%E7%A0%81%E5%9D%97/1-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><p>​a) 代码块又称为&#x3D;&#x3D;初始化快&#x3D;&#x3D;，属于类中的成员(即 是类的一部分)，类似于方法，讲逻辑语句封装在方法体重，通过 {} 包裹起来。<br>但和方法不一样，其没有方法名，没有返回值，没有参数，只有方法体，而且不用通过对象或类显示调用，而是&#x3D;&#x3D;<strong>加载类</strong>&#x3D;&#x3D;时，或在<strong>创建对象时隐式调用</strong>。</p><p>​b)能干嘛：</p><ol><li>相当于另一种形式的构造器(对构造器的补充)，可以加入初始化的代码。<br>场景：多个构造器中都有重复的语句，可以将其抽取出来，放到 &#x3D;&#x3D;<strong>代码块</strong>&#x3D;&#x3D;中，提高代码的复用性</li></ol><h3 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[修饰符]&#123;</span><br><span class="line">    </span><br><span class="line">    方法体</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong><br>    1)修饰符 可选，只能写static<br>    2)代码块分为两类，使用 static 修饰的称为静态代码块，没有static 修饰的，称为 普通代码块&#x2F;非静态代码块。<br>    3)逻辑语句可以为任何语句 (输入、输出、方法调用、循环、判断等)<br>    4);号可选</p><h3 id="三、代码块的使用注意事项"><a href="#三、代码块的使用注意事项" class="headerlink" title="三、代码块的使用注意事项"></a>三、代码块的使用注意事项</h3><ol><li><p><strong>static</strong> <strong>代码块也叫</strong> &#x3D;&#x3D;静态代码块&#x3D;&#x3D;，它随 &#x3D;&#x3D;<strong>类的加载</strong>&#x3D;&#x3D;而执行，并且&#x3D;&#x3D;<strong>只会执行一次</strong>&#x3D;&#x3D;,如果是普通代码块(即没有 static 修饰)，则每创建一个对象，就会执行一次。</p></li><li><p>类什么时候被加载</p><ol><li><p>创建对象实例时(即 使用 new )</p></li><li><p>创建子类对象实例时，父类也会被加载！—-&gt;</p><ol><li>首先加载类信息&#x3D;&#x3D;从父类开始逐级向下&#x3D;&#x3D;&gt;GrandPa信息–&gt;  Father—-&gt;son</li><li>在堆中开辟 内存空间 —-&gt; 储存GrandPa—&gt;储存 Father—&gt;储存son</li></ol><p><img src="/2022/11/03/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/3-%E4%BB%A3%E7%A0%81%E5%9D%97/1-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/image-20221103111308639.png" alt="image-20221103111308639"></p></li><li><p>使用类的 &#x3D;&#x3D;<strong>静态成员</strong>&#x3D;&#x3D;(静态属性、静态方法)</p></li></ol></li><li><p>普通代码块：<br>在创建对象实例时，会被&#x3D;&#x3D;<strong>隐式的调用</strong>&#x3D;&#x3D;，对象实例被创建一次，就会创建一次。(每一个new的出现，都会有一个普通代码块被拉出来毒打)。但如果是 &#x3D;&#x3D;使用类的静态成员&#x3D;&#x3D;，则它不会干活。</p></li></ol><p>小结：</p><pre><code>1. static 代码块是 ==**类加载**==时进行，只会执行一次。1. 普通代码块是在 创建对象 时调用，有一个对象被创建就调用一次。1. 类加载的三种情况需要记住</code></pre><h3 id="四、案例分析理解-静态代码块、代码块、构造器的执行过程。"><a href="#四、案例分析理解-静态代码块、代码块、构造器的执行过程。" class="headerlink" title="四、案例分析理解 静态代码块、代码块、构造器的执行过程。"></a>四、案例分析理解 静态代码块、代码块、构造器的执行过程。</h3><ol><li>单个类的执行过程分析<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">signle</span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>  n1=getN1();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getN1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态变量初始化&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> n2=getN2();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getN2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通变量初始化&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.先加载类信息，即初始化静态代码块和静态变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">signle</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        默认的super()调用父类</span></span><br><span class="line">        <span class="comment">//调用普通方法块和 初始化普通变量</span></span><br><span class="line">        <span class="comment">//构造器方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>综合案例</p><p>创建一个&#x3D;&#x3D;具有继承关系的类的对象&#x3D;&#x3D;</p><ol><li>从继承关系开始&#x3D;&#x3D;加载类的信息&#x3D;&#x3D;（从父类开始)。</li><li>父类的静态代码和属性初始化（优先级一样，按定义的顺序执行)</li><li>子类的静态代码和属性初始化（优先级一样，按定义的顺序执行)</li><li>父类的普通代码块和普通属性初始化（优先级一样，按定义的顺序执行)</li><li>父类的构造函数</li><li>子类的普通代码块和普通属性初始化（优先级一样，按定义的顺序执行)</li><li>子类的构造函数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeBlockDetail04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//老师说明</span></span><br><span class="line"><span class="comment">//(1) 进行类的加载</span></span><br><span class="line"><span class="comment">//1.1 先加载 父类 A02 1.2 再加载 B02</span></span><br><span class="line"><span class="comment">//(2) 创建对象</span></span><br><span class="line"><span class="comment">//2.1 从子类的构造器开始</span></span><br><span class="line"><span class="comment">//new B02();//对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">C02</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A02</span> &#123; <span class="comment">//父类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> getVal01();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;A02 的一个静态代码块..&quot;</span>);<span class="comment">//(2)</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;A02 的第一个普通代码块..&quot;</span>);<span class="comment">//(5)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> getVal02();<span class="comment">//普通属性的初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getVal01</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;getVal01&quot;</span>);<span class="comment">//(1)</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVal02</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;getVal02&quot;</span>);<span class="comment">//(6)</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">A02</span><span class="params">()</span> &#123;<span class="comment">//构造器</span></span><br><span class="line"><span class="comment">//隐藏</span></span><br><span class="line"><span class="comment">//super()</span></span><br><span class="line"><span class="comment">//普通代码和普通属性的初始化...... System.out.println(&quot;A02 的构造器&quot;);//(7)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C02</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//静态代码块，只能调用静态成员</span></span><br><span class="line"><span class="comment">//System.out.println(n1);错误</span></span><br><span class="line">System.out.println(n2);<span class="comment">//ok</span></span><br><span class="line"><span class="comment">//m1();//错误</span></span><br><span class="line">m2();</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//普通代码块，可以使用任意成员</span></span><br><span class="line">System.out.println(n1);</span><br><span class="line">System.out.println(n2);<span class="comment">//ok</span></span><br><span class="line">m1();</span><br><span class="line">m2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B02</span> <span class="keyword">extends</span> <span class="title class_">A02</span> &#123; <span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n3</span> <span class="operator">=</span> getVal03();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B02 的一个静态代码块..&quot;</span>);<span class="comment">//(4)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="variable">n5</span> <span class="operator">=</span> getVal04();</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;B02 的第一个普通代码块..&quot;</span>);<span class="comment">//(9)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getVal03</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;getVal03&quot;</span>);<span class="comment">//(3)</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVal04</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;getVal04&quot;</span>);<span class="comment">//(8)</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一定要慢慢的去品.. public B02() &#123;//构造器</span></span><br><span class="line"><span class="comment">//隐藏了</span></span><br><span class="line"><span class="comment">//super()</span></span><br><span class="line"><span class="comment">//普通代码块和普通属性的初始化... System.out.println(&quot;B02 的构造器&quot;);//(10)</span></span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-servlet整个类系.md</title>
      <link href="/2022/11/01/JavaWeb/servlet/5-ServletContext/"/>
      <url>/2022/11/01/JavaWeb/servlet/5-ServletContext/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><p><img src="/2022/11/01/JavaWeb/servlet/5-ServletContext/image-20221101222019260.png" alt="image-20221101222019260"></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-servlet整个类系.md</title>
      <link href="/2022/11/01/JavaWeb/servlet/4-ServletConfig/"/>
      <url>/2022/11/01/JavaWeb/servlet/4-ServletConfig/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、ServltConfig-三大作用"><a href="#一、ServltConfig-三大作用" class="headerlink" title="一、ServltConfig 三大作用"></a>一、ServltConfig 三大作用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;2 int初始化&quot;</span>);</span><br><span class="line"><span class="comment">//        1. 可以获取servlet程序的别名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet程序的别名是&quot;</span> + servletConfig.getServletName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//           2. 获取初始化参数 Init-param</span></span><br><span class="line">        System.out.println(<span class="string">&quot;初始化参数username的值是&quot;</span>+servletConfig.getInitParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        <span class="comment">//2.2可以配置多个</span></span><br><span class="line">        System.out.println(<span class="string">&quot;初始化参数url的值是&quot;</span>+servletConfig.getInitParameter(<span class="string">&quot;url&quot;</span>));</span><br><span class="line">        <span class="comment">//3.获取 ServletContext 对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext对象是&quot;</span>+servletConfig.getServletContext());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​servlet 程序和 servletConfig 对象都是由 Tomcat 负责创建，我们负责使用。</p><p>​Servlet 程序默认是第一次访问的时候创建，ServletConfig 是每个 servlet 程序创建时，就创建一个对应的 servletConfig 对象</p><p>​</p><h3 id="二、servlet-的注意"><a href="#二、servlet-的注意" class="headerlink" title="二、servlet 的注意"></a>二、servlet 的注意</h3><ol><li>在本 servlet 中只能获取到 本 servlet 的数据</li><li>getServletConfig 方法是父类 GenericServlet的方法，在本方法中可以直接使用 —&gt; </li><li>GenericServlet 中 init 方法实现了对 config 对象的存储，如果在自定义的类中 重写该方法，则需要调用 一下 GenericServlet 中的 init 方法，否则。 &#x3D;&#x3D;getServletConfig&#x3D;&#x3D; 方法就会报错<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line">    &#125; </span><br><span class="line"><span class="comment">// init 方法对 config 进行了存储, getservletconfig 只是获取后进行返回.</span></span><br><span class="line"><span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.config;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-servlet整个类的继承体系.md</title>
      <link href="/2022/11/01/JavaWeb/servlet/3-servlet%E6%95%B4%E4%B8%AA%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB/"/>
      <url>/2022/11/01/JavaWeb/servlet/3-servlet%E6%95%B4%E4%B8%AA%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="/2022/11/01/JavaWeb/servlet/3-servlet%E6%95%B4%E4%B8%AA%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB/image-20221101211210236.png" alt="image-20221101211210236"></p>]]></content>
      
      
      <categories>
          
          <category> Javaweb </category>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-servlet一般使用场景.md</title>
      <link href="/2022/11/01/JavaWeb/servlet/2-servlet%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/11/01/JavaWeb/servlet/2-servlet%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>方法一、</p><ol><li>编写一个类去继承 HttpServlet 类</li><li>根据业务需要重写 doGet 或 doGet方法</li><li>去 web.xml 中去配置 servlet 程序的访问地址</li></ol><p>方法二、使用idea生成</p><ol><li><p>使用idea生成，生成后会在 创建 class 文件，同时在 web.xml 文件中添加 servlet 项 (没有servlet -mapping，需要手动配置）。<img src="/2022/11/01/JavaWeb/servlet/2-servlet%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/image-20221101204325206.png" alt="image-20221101204325206">配置 servlet 信息<br><img src="/2022/11/01/JavaWeb/servlet/2-servlet%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/image-20221101204541644.png" alt="image-20221101204541644"></p></li><li><p>配置web.xml 中的 servlet-mapping<br>   <img src="/2022/11/01/JavaWeb/servlet/2-servlet%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8/image-20221101205328742.png" alt="image-20221101205328742"></p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Javaweb </category>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-servlet一般使用场景.md</title>
      <link href="/2022/11/01/JavaWeb/servlet/1-servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/11/01/JavaWeb/servlet/1-servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h3><p>​servlet 与其他函数相同，亦有自己的生命周期。</p><p>​servlet 是 webapp 和 webserver 通讯的协议</p><p>遵循 servlet 规范的 webapp ，这个 webapp 就可以放在不同的 web 服务器中运行(因为这个 webapp 是遵循 servlet 规范的)</p><p>servlet规范包括什么？</p><ul><li>规范了哪些接口</li><li>规范了哪些类</li><li>规范了 webapp 应用应该有哪些配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jhfuture.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 1.执行 servlet 构造方法</span></span><br><span class="line"><span class="comment">* 2.执行init 方法</span></span><br><span class="line"><span class="comment">* 第一、二步只有在servlet程序创建的时候调用</span></span><br><span class="line"><span class="comment">* 3.service方法</span></span><br><span class="line"><span class="comment">* 第三部，每次访问都会调用</span></span><br><span class="line"><span class="comment">* 4.destroy方法</span></span><br><span class="line"><span class="comment">*第四部，在web工程停止的时候调用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* service方法每次</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span>  <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1.构造器方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2 int初始化&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * service 方法是专门用来处理请求和响应</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3.service方法&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 区分 post 和 get</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">// 类型转换（因为它有getmethod方法）</span></span><br><span class="line">        HttpServletRequest httpServletRequest=(HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="comment">//获取请求的方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> httpServletRequest.getMethod();</span><br><span class="line">        System.out.println(method);</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;POST&quot;</span>))&#123;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;post&quot;);</span></span><br><span class="line">            doPost();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">&quot;GET&quot;</span>))&#123;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;get&quot;);</span></span><br><span class="line">            doGet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;4.destroy方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">doGet</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;GET请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Post请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="开发一个-带有-servlet-java-小程序-的webapp"><a href="#开发一个-带有-servlet-java-小程序-的webapp" class="headerlink" title="开发一个 带有 servlet(java 小程序) 的webapp"></a>开发一个 带有 servlet(java 小程序) 的webapp</h3><p>开发步骤</p><p><img src="/2022/11/01/JavaWeb/servlet/1-servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/image-20221103210531231.png" alt="image-20221103210531231"></p><p><img src="/2022/11/01/JavaWeb/servlet/1-servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/image-20221103211314117.png" alt="image-20221103211314117"></p><p><img src="/2022/11/01/JavaWeb/servlet/1-servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/image-20221103212527364.png" alt="image-20221103212527364"></p><p><img src="/2022/11/01/JavaWeb/servlet/1-servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/image-20221103212909731.png" alt="image-20221103212909731"></p><p><img src="/2022/11/01/JavaWeb/servlet/1-servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/image-20221103213828275.png" alt="image-20221103213828275"></p><p><img src="/2022/11/01/JavaWeb/servlet/1-servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/image-20221103214137539.png" alt="image-20221103214137539"></p><p><img src="/2022/11/01/JavaWeb/servlet/1-servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/image-20221103214527196.png" alt="image-20221103214527196"></p><p><img src="/2022/11/01/JavaWeb/servlet/1-servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/image-20221103214550137.png" alt="image-20221103214550137"></p><p>第六步：编写一个java程序，这个小程序必须实现 servlet 接口</p><ul><li>这个 servlet 解控不在 jdk 当中。</li><li>servlet 解控</li><li>servlet 接口是 javaee 的规范中的一员。</li></ul><h4 id="关于javaEE-的版本"><a href="#关于javaEE-的版本" class="headerlink" title="关于javaEE 的版本"></a>关于javaEE 的版本</h4><p><img src="/2022/11/01/JavaWeb/servlet/1-servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/image-20221103212032969.png" alt="image-20221103212032969"></p><h3 id="解决Tomcat服务器在DOS命令窗口中的乱码问题-控制台乱码"><a href="#解决Tomcat服务器在DOS命令窗口中的乱码问题-控制台乱码" class="headerlink" title="解决Tomcat服务器在DOS命令窗口中的乱码问题(控制台乱码)"></a>解决Tomcat服务器在DOS命令窗口中的乱码问题(控制台乱码)</h3><p><img src="/2022/11/01/JavaWeb/servlet/1-servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/image-20221103213739938.png" alt="image-20221103213739938"></p><h3 id="向浏览器响应一段html代码"><a href="#向浏览器响应一段html代码" class="headerlink" title="向浏览器响应一段html代码"></a>向浏览器响应一段html代码</h3><h2 id="二、servlet-中-web-xml文件的配置"><a href="#二、servlet-中-web-xml文件的配置" class="headerlink" title="二、servlet 中 web.xml文件的配置"></a>二、servlet 中 web.xml文件的配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getInitParameter</span><span class="params">(String name)</span>; <span class="comment">// 通过初始化参数的name获取value</span></span><br><span class="line"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title function_">getInitParameterNames</span><span class="params">()</span>; <span class="comment">// 获取所有的初始化参数的name</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--以上两个方法是ServletContext对象的方法，这个方法获取的是什么信息？是以下的配置信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pageSize<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>startIndex<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注意：以上的配置信息属于 应用级的配置信息，一般一个项目中共享的配置信息会放到以上的标签当中。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果你的配置信息只是想给某一个servlet作为参考，那么你配置到servlet标签当中即可，使用ServletConfig对象来获取。--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/01/JavaWeb/servlet/0-%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/Untitled%201/"/>
      <url>/2022/11/01/JavaWeb/servlet/0-%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/Untitled%201/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/01/JavaWeb/servlet/0-%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/Untitled/"/>
      <url>/2022/11/01/JavaWeb/servlet/0-%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/Untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/30/JavaWeb/servlet/0-%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/1-/"/>
      <url>/2022/10/30/JavaWeb/servlet/0-%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/1-/</url>
      
        <content type="html"><![CDATA[<ol><li><p>url-pattern 配置的路径没有以 斜杠 “&#x2F;“ 打头<br><img src="/2022/10/30/JavaWeb/servlet/0-%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/1-/image-20221030215359437.png" alt="image-20221030215359437"></p></li><li><p>servlet-name 配置的值不存在<br><img src="/2022/10/30/JavaWeb/servlet/0-%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/1-/image-20221030215233722.png" alt="image-20221030215233722"></p></li><li><p>servlet-class 标签的全类名配置错误<br><img src="/2022/10/30/JavaWeb/servlet/0-%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/1-/image-20221030215254357.png" alt="image-20221030215254357"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-JDBC概述.md</title>
      <link href="/2022/10/30/MySQL/JDBC/1-JDBC%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/10/30/MySQL/JDBC/1-JDBC%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="/2022/10/30/MySQL/JDBC/1-JDBC%E6%A6%82%E8%BF%B0/image-20221030211347144.png" alt="image-20221030211347144"></p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/30/IDEA/%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/10/30/IDEA/%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p><strong>整理的零碎的一些小知识</strong></p><ol><li><p>IDEA 在创建 project 时会自动创建一个 module ，该 module名 与项目名相同。、</p></li><li><p>IDEA 默认会对数据进行简化，如果想要查看完整数据需要进行设置。 file–&gt;setting —&gt;build,Execution,Deployment—&gt; Debugger —&gt;Data Views–&gt;JAVA–&gt; 取消Enable alternative view for Collections classes、取消 hide null elements in arrays and collections;</p><p><img src="/2022/10/30/IDEA/%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9F%A5%E8%AF%86/image-20221121202045494.png" alt="image-20221121202045494"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-基本概念.md</title>
      <link href="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、BS-x2F-CS-架构"><a href="#一、BS-x2F-CS-架构" class="headerlink" title="一、BS &#x2F;CS 架构"></a>一、BS &#x2F;CS 架构</h3><p><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030152619605.png" alt="image-20221030152619605"></p><h3 id="二、Tomcat简介-与-开始"><a href="#二、Tomcat简介-与-开始" class="headerlink" title="二、Tomcat简介 与 开始"></a>二、Tomcat简介 与 开始</h3><p>一个轻量化的 JavaWeb 容器</p><p><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030155125065.png" alt="image-20221030155125065"></p><h4 id="1-安装tomcat"><a href="#1-安装tomcat" class="headerlink" title="1. 安装tomcat"></a>1. 安装tomcat</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">使用 tree 命令生成</span><br><span class="line">tree /f</span><br><span class="line">省略 /f 则只显示文件</span><br><span class="line">├─bin ---可执行二进制</span><br><span class="line">├─conf ---配置文件</span><br><span class="line">├─lib  ---依赖的文件</span><br><span class="line">├─logs ---日志</span><br><span class="line">├─temp</span><br><span class="line">├─webapps  ---web应用程序--部署应用的空间</span><br><span class="line">│  ├─docs</span><br><span class="line">│  │  ├─api</span><br><span class="line">│  │  ├─appdev</span><br><span class="line">│  │  │  └─sample</span><br><span class="line">│  │  │      ├─docs</span><br><span class="line">│  │  │      ├─src</span><br><span class="line">│  │  │      │  └─mypackage</span><br><span class="line">│  │  │      └─web</span><br><span class="line">│  │  │          ├─images</span><br><span class="line">│  │  │          └─WEB-INF</span><br><span class="line">│  │  ├─architecture</span><br><span class="line">│  │  │  ├─requestProcess</span><br><span class="line">│  │  │  └─startup</span><br><span class="line">│  │  ├─config</span><br><span class="line">│  │  ├─elapi</span><br><span class="line">│  │  ├─funcspecs</span><br><span class="line">│  │  ├─images</span><br><span class="line">│  │  │  └─fonts</span><br><span class="line">│  │  ├─jspapi</span><br><span class="line">│  │  ├─servletapi</span><br><span class="line">│  │  ├─tribes</span><br><span class="line">│  │  ├─WEB-INF</span><br><span class="line">│  │  └─websocketapi</span><br><span class="line">│  ├─examples</span><br><span class="line">│  │  ├─jsp</span><br><span class="line">│  │  │  ├─async</span><br><span class="line">│  │  │  ├─cal</span><br><span class="line">│  │  │  ├─checkbox</span><br><span class="line">│  │  │  ├─colors</span><br><span class="line">│  │  │  ├─dates</span><br><span class="line">│  │  │  ├─error</span><br><span class="line">│  │  │  ├─forward</span><br><span class="line">│  │  │  ├─images</span><br><span class="line">│  │  │  ├─include</span><br><span class="line">│  │  │  ├─jsp2</span><br><span class="line">│  │  │  │  ├─el</span><br><span class="line">│  │  │  │  ├─jspattribute</span><br><span class="line">│  │  │  │  ├─jspx</span><br><span class="line">│  │  │  │  ├─misc</span><br><span class="line">│  │  │  │  ├─simpletag</span><br><span class="line">│  │  │  │  └─tagfiles</span><br><span class="line">│  │  │  ├─jsptoserv</span><br><span class="line">│  │  │  ├─num</span><br><span class="line">│  │  │  ├─plugin</span><br><span class="line">│  │  │  │  └─applet</span><br><span class="line">│  │  │  ├─security</span><br><span class="line">│  │  │  │  └─protected</span><br><span class="line">│  │  │  ├─sessions</span><br><span class="line">│  │  │  ├─simpletag</span><br><span class="line">│  │  │  ├─snp</span><br><span class="line">│  │  │  ├─tagplugin</span><br><span class="line">│  │  │  └─xml</span><br><span class="line">│  │  ├─servlets</span><br><span class="line">│  │  │  ├─chat</span><br><span class="line">│  │  │  ├─images</span><br><span class="line">│  │  │  └─nonblocking</span><br><span class="line">│  │  ├─WEB-INF</span><br><span class="line">│  │  │  ├─classes</span><br><span class="line">│  │  │  │  ├─async</span><br><span class="line">│  │  │  │  ├─cal</span><br><span class="line">│  │  │  │  ├─chat</span><br><span class="line">│  │  │  │  ├─checkbox</span><br><span class="line">│  │  │  │  ├─colors</span><br><span class="line">│  │  │  │  ├─compressionFilters</span><br><span class="line">│  │  │  │  ├─dates</span><br><span class="line">│  │  │  │  ├─error</span><br><span class="line">│  │  │  │  ├─examples</span><br><span class="line">│  │  │  │  ├─filters</span><br><span class="line">│  │  │  │  ├─jsp2</span><br><span class="line">│  │  │  │  │  └─examples</span><br><span class="line">│  │  │  │  │      ├─el</span><br><span class="line">│  │  │  │  │      └─simpletag</span><br><span class="line">│  │  │  │  ├─listeners</span><br><span class="line">│  │  │  │  ├─nonblocking</span><br><span class="line">│  │  │  │  ├─num</span><br><span class="line">│  │  │  │  ├─sessions</span><br><span class="line">│  │  │  │  ├─util</span><br><span class="line">│  │  │  │  ├─validators</span><br><span class="line">│  │  │  │  └─websocket</span><br><span class="line">│  │  │  │      ├─chat</span><br><span class="line">│  │  │  │      ├─drawboard</span><br><span class="line">│  │  │  │      │  └─wsmessages</span><br><span class="line">│  │  │  │      ├─echo</span><br><span class="line">│  │  │  │      └─snake</span><br><span class="line">│  │  │  ├─jsp</span><br><span class="line">│  │  │  │  └─applet</span><br><span class="line">│  │  │  ├─jsp2</span><br><span class="line">│  │  │  ├─lib</span><br><span class="line">│  │  │  └─tags</span><br><span class="line">│  │  └─websocket</span><br><span class="line">│  ├─host-manager</span><br><span class="line">│  │  ├─images</span><br><span class="line">│  │  ├─META-INF</span><br><span class="line">│  │  └─WEB-INF</span><br><span class="line">│  │      └─jsp</span><br><span class="line">│  ├─manager</span><br><span class="line">│  │  ├─images</span><br><span class="line">│  │  ├─META-INF</span><br><span class="line">│  │  └─WEB-INF</span><br><span class="line">│  │      └─jsp</span><br><span class="line">│  └─ROOT</span><br><span class="line">│      └─WEB-INF</span><br><span class="line">└─work ----工作文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-配置-Java-运行环境"><a href="#2-配置-Java-运行环境" class="headerlink" title="2.配置 Java 运行环境"></a>2.配置 Java 运行环境</h4><pre><code>1. JAVA_HOME 1. 在bin中配置 </code></pre><h4 id="3-新建-Web项目-并部署项目"><a href="#3-新建-Web项目-并部署项目" class="headerlink" title="3. 新建 Web项目 并部署项目"></a>3. 新建 Web项目 并部署项目</h4><ol><li><p>在 webapp 下创建 baidu 文件夹，再在 baidu 文件夹下新建 WEB-INF文件夹</p></li><li><p>将 html、css 一系列文件放到与 WEB-INF 同级目录下</p></li><li><p>localhost:8080&#x2F;baidu&#x2F;demo09.html 访问</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8080/文件名/资源名</span><br></pre></td></tr></table></figure></li></ol><h3 id="三、使用-IDEA-新建部署项目"><a href="#三、使用-IDEA-新建部署项目" class="headerlink" title="三、使用 IDEA 新建部署项目"></a>三、使用 IDEA 新建部署项目</h3><ol><li>先创建一个project，然后在 project 中创建 module 。选择创建 web application</li></ol><p><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030185845524.png" alt="image-20221030185845524"><br><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030185953311.png" alt="image-20221030185953311"></p><ol start="2"><li><p>配置Tomcat运行环境</p><ol><li>添加配置选项<br><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030190045002.png" alt="image-20221030190045002"></li><li>添加 Tomcat server -&gt;local<br><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030190151721.png" alt="image-20221030190151721">配置 Tomcat 路径<br><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030190239396.png" alt="image-20221030190239396"><br><strong>选择第一层目录即可，无需展开</strong><br><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030190333678.png" alt="image-20221030190333678"><br>成功后 IDEA 会自动识别版本号<br><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030190418780.png" alt="image-20221030190418780"></li></ol></li><li><p>运行你的第一个 Javaweb</p><ol><li><p>创建 index.html<br><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030190541382.png" alt="image-20221030190541382"></p></li><li><p>点击运行<br>养成使用”debug”的习惯</p><p><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030190507358.png" alt="image-20221030190507358"></p></li></ol></li></ol><p><strong>注意：</strong></p><ol><li><p>Tomcat项目部署的文件路径<br><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030184954920.png" alt="image-20221030184954920"></p></li><li><p>如果在 create model 时没有勾选 web application<br>1.选择<br><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030191104654.png" alt="image-20221030191104654"><br>2.选择facets 添加 web<br><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030191323745.png" alt="image-20221030191323745"></p><p>确定即可</p></li></ol><h3 id="四、将-Tomcat-中的-servlet-api-jar-包导入-jdk"><a href="#四、将-Tomcat-中的-servlet-api-jar-包导入-jdk" class="headerlink" title="四、将 Tomcat 中的 servlet-api.jar 包导入 jdk"></a>四、将 Tomcat 中的 servlet-api.jar 包导入 jdk</h3><ol><li><p>Tomcat 安装目录下的 lib 文件夹下 servlet-api.jar<br><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030192646690.png" alt="image-20221030192646690"></p></li><li><p>添加 Tomcat library<br><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030192934079.png" alt="image-20221030192934079"><br>选择后确定<br><img src="/2022/10/30/JavaWeb/1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/image-20221030192958216.png" alt="image-20221030192958216"></p></li></ol><h3 id="五、一些servlet报错"><a href="#五、一些servlet报错" class="headerlink" title="五、一些servlet报错"></a>五、一些servlet报错</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2-自己编写dt文件.md</title>
      <link href="/2022/10/30/Android/2-%E8%87%AA%E5%B7%B1%E5%86%99dt%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2022/10/30/Android/2-%E8%87%AA%E5%B7%B1%E5%86%99dt%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>结构图一览</p><p><img src="/2022/10/30/Android/2-%E8%87%AA%E5%B7%B1%E5%86%99dt%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/TWRP.png" alt="TWRP"></p><h3 id="device-tree-文件组成一览"><a href="#device-tree-文件组成一览" class="headerlink" title="device tree 文件组成一览"></a>device tree 文件组成一览</h3><ol><li>BoardConfig.mk<br>设备参数文件的组成部分，其中存放着不少与boot.img与Recovery编译的参数。正确设置这些参数，是保证TWRP正常编译的前提。Recovery和boot.img性质相同，均为Android的启动映像。</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> TWRP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> twrp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/29/MySQL/select%E7%9A%84%E4%BD%9C%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
      <url>/2022/10/29/MySQL/select%E7%9A%84%E4%BD%9C%E7%94%A8%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>select有许多操作</p><ol><li>要查询的多个字符</li><li>对字符使用单行处理函数</li><li>对要查询的字符 —&gt; 使用多行处理函数—&gt; &#x3D;&#x3D;对数据进行处理&#x3D;&#x3D;</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>6-连接查询.md</title>
      <link href="/2022/10/29/MySQL/6-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/"/>
      <url>/2022/10/29/MySQL/6-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>[TOC]</p><h3 id="一。关键字"><a href="#一。关键字" class="headerlink" title="一。关键字"></a>一。关键字</h3><ol><li><p>distinct<br>作用：查询结果去重<br>位置：查询字段的前方，出现两个字段之前，表示两个字段联合查询。<br>—-&gt;  统计岗位数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(job) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(job) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span>         <span class="number">14</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> job) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> job) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span>                   <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ol><h2 id="一、什么是连接查询"><a href="#一、什么是连接查询" class="headerlink" title="一、什么是连接查询"></a>一、什么是连接查询</h2><p><img src="/2022/10/29/MySQL/6-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/image-20221029205555257.png" alt="image-20221029205555257"></p><h3 id="二、-连接查询的分类"><a href="#二、-连接查询的分类" class="headerlink" title="二、 连接查询的分类"></a>二、 连接查询的分类</h3><ol><li><p>根据表连接的方式分类</p><ol><li><p>内连接 —–&gt; 值一一对应</p><ol><li>等值连接</li><li>非等值连接</li><li>自连接</li></ol></li><li><p>外连接<br>&#x3D;&#x3D;哪个&#x3D;&#x3D;外连接，表示 &#x3D;&#x3D;把哪张表当成主表&#x3D;&#x3D;</p><ol><li>左外连接（也叫左连接） —&gt;左表为主表</li><li>右外连接（也叫右连接） —&gt;右表为主表</li></ol></li><li><p>什么时候使用 内 外连接</p><ol><li>判断两张表是否有 &#x3D;&#x3D;主次之分&#x3D;&#x3D;</li></ol></li><li><p>全连接 (不常用)</p><ol><li>a 和 b 两张都是主表,</li></ol></li></ol></li></ol><h3 id="三、SQL92语法"><a href="#三、SQL92语法" class="headerlink" title="三、SQL92语法"></a>三、SQL92语法</h3><h3 id="四、案例分析"><a href="#四、案例分析" class="headerlink" title="四、案例分析"></a>四、案例分析</h3><p>内连接： 完全能够匹配上这个条件的数据查询出来。( A 和 B 进行连接，A B 没有主次之分 )</p><p>​</p><p>​A <strong>内连接之等值连接</strong></p><p>笛卡尔积现象</p><blockquote><p>笛卡尔积现象：当两张表进行连接查询，没有任何条件限制的时候，最终查询结果的条数，是两张表条数的乘积，这种现象被称为：笛卡尔积现象。（笛卡尔发现的，这是一个属性现象）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> dname,ename <span class="keyword">from</span> emp,dept;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------+</span></span><br><span class="line"><span class="operator">|</span> dname      <span class="operator">|</span> ename  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------+</span></span><br><span class="line"><span class="operator">|</span> OPERATIONS <span class="operator">|</span> SMITH  <span class="operator">|</span></span><br><span class="line">………………………………………………</span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> ACCOUNTING <span class="operator">|</span> MILLER <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+--------+</span></span><br><span class="line"><span class="number">56</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="operator">=</span><span class="number">14</span><span class="operator">*</span><span class="number">4</span></span><br></pre></td></tr></table></figure></blockquote><p>避免该现象：加筛选条件</p><ol><li><p>查询每个员工所在部门名称，显示员工名和部门名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># SQL92写法</span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">ename,dname</span><br><span class="line">#这样子写查询效率会偏低，mysql会 分别去 emp 和 dept 两张表中都去查询这两个字段</span><br><span class="line">#提高效率</span><br><span class="line">#emp.ename,dept.dname;</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp,dept</span><br><span class="line"># 起别名 </span><br><span class="line"># emp xx, dept xxx</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">emp.deptno<span class="operator">=</span>dept.deptno; <span class="keyword">and</span> xxx加其他条件</span><br><span class="line"></span><br><span class="line">SQL92的缺点：结构不清晰，表的链接条件，和后期进一步筛选的条件，都放到了 <span class="keyword">where</span> 后面。</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">#SQL99的语法</span><br><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">ename,dname</span><br><span class="line">#这样子写查询效率会偏低，mysql会 分别去 emp 和 dept 两张表中都去查询这两个字段</span><br><span class="line">#提高效率</span><br><span class="line">#emp.ename,dept.dname;</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">#<span class="keyword">inner</span> 可省略</span><br><span class="line">dept</span><br><span class="line"># 起别名 </span><br><span class="line"># emp xx, dept xxx</span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">emp.deptno<span class="operator">=</span>dept.deptno;</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">xx</span><br><span class="line">SQL92优点：表连接的条件是独立的，连接之后如果需要进一步筛选，再往后添加<span class="keyword">where</span>即可。</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>Q:dept中有4条记录，empt中有14条。最终查询的结果条数是14条，但是匹配的过程中，匹配的次数减少了吗？<br>A:并没有，还是56次（每次匹配时，都会拿empt中的一条数据去逐一匹配dept中的4条记录。只不过进行了四选一(选符合条件的那条)_）</p></li></ol><p>B <strong>内连接之非等值连接</strong> ——&gt; 条件不是一个等量关系</p><ol><li>找出每个员工的薪资登记，要求显示员工名、薪资、薪资登记？<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,e.sal,s.grade </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e </span><br><span class="line"><span class="keyword">join</span> </span><br><span class="line">salgrade s </span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">e.sal </span><br><span class="line"><span class="keyword">between</span> </span><br><span class="line">s.losal </span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line">s.hisal;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> sal     <span class="operator">|</span> grade <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span>     <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span>     <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span>     <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>     <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span>     <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+---------+-------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ol><p>C、内连接之自连接 ——&gt; </p><p>​技巧：一张表看做两张表</p><ol><li>查询员工的上级领导(mgr)，要求显示员工名和对应的领导名<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,ename,mgr <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+------+</span></span><br><span class="line"><span class="operator">|</span> empno <span class="operator">|</span> ename  <span class="operator">|</span> mgr  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH  <span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">用 mgr 的序号，去匹配 empno 得到ename ，然后填入</span><br><span class="line"></span><br><span class="line"><span class="comment">--&gt;技巧，看成两张表</span></span><br><span class="line"></span><br><span class="line">emp a 员工表</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+------+</span></span><br><span class="line"><span class="operator">|</span> empno <span class="operator">|</span> ename  <span class="operator">|</span> mgr  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH  <span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">emp b领导表</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+------+</span></span><br><span class="line"><span class="operator">|</span> empno <span class="operator">|</span> ename  <span class="operator">|</span> mgr  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH  <span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>, b.ename <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">join</span> </span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr<span class="operator">=</span>b.empno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="operator">|</span> 员工名 <span class="operator">|</span> 领导名 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> FORD   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> BLAKE  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> BLAKE  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> KING   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> BLAKE  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> KING   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> KING   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> JONES  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> BLAKE  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> SCOTT  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> BLAKE  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> JONES  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> CLARK  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+</span></span><br><span class="line"><span class="number">13</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">King没有领导。</span><br></pre></td></tr></table></figure></li></ol><p>外连接—-&gt; 存 在 主表(即 主表中不匹配 其他表的项也会被列举出来。) </p><p>​A.右外连接 </p><p>​使用 emp 表中的 deptno 对应 ，dept 表中的 deptno 字段，显示结果匹配的，ename 和 dname 字段，并把  dept 中不匹配的 dname 也全部显示出来  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span>  </span><br><span class="line">e.ename,d.dname </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e </span><br><span class="line"><span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> </span><br><span class="line"># <span class="keyword">outer</span> 可以省略</span><br><span class="line">dept d </span><br><span class="line"># <span class="keyword">right</span>：表示将 <span class="keyword">join</span> 关键字右边的这张表看成主表，主要是为了将这张表的数据全部查询出来，捎带着关联查询左边的表。没有匹配的使用 <span class="keyword">null</span> </span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">e.deptno<span class="operator">=</span>d.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span> OPERATIONS <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="number">15</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>​B. 左外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">select</span>  </span><br><span class="line">e.ename,d.dname </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> </span><br><span class="line"># <span class="keyword">outer</span> 可以省略</span><br><span class="line">dept d </span><br><span class="line"><span class="keyword">on</span> </span><br><span class="line">e.deptno<span class="operator">=</span>d.deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>任何一个右连接都有左连接的写法。</p><p>任何一个左连接都有右连接的写法。</p></blockquote><p><strong>Q：外连接的查询结果条数一定是 &gt;&#x3D; 内连接的查询结果条数？</strong></p><p><strong>A</strong>：正确**</p><p>外连接案例</p><ol><li>查询每个员工的上级领导，要求显示所有员工的名字和领导名？<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> empno,ename,mgr <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+------+</span></span><br><span class="line"><span class="operator">|</span> empno <span class="operator">|</span> ename  <span class="operator">|</span> mgr  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7369</span> <span class="operator">|</span> SMITH  <span class="operator">|</span> <span class="number">7902</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7499</span> <span class="operator">|</span> ALLEN  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7521</span> <span class="operator">|</span> WARD   <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7566</span> <span class="operator">|</span> JONES  <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7654</span> <span class="operator">|</span> MARTIN <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7698</span> <span class="operator">|</span> BLAKE  <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7782</span> <span class="operator">|</span> CLARK  <span class="operator">|</span> <span class="number">7839</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7788</span> <span class="operator">|</span> SCOTT  <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7839</span> <span class="operator">|</span> KING   <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7844</span> <span class="operator">|</span> TURNER <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7876</span> <span class="operator">|</span> ADAMS  <span class="operator">|</span> <span class="number">7788</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7900</span> <span class="operator">|</span> JAMES  <span class="operator">|</span> <span class="number">7698</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7902</span> <span class="operator">|</span> FORD   <span class="operator">|</span> <span class="number">7566</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7934</span> <span class="operator">|</span> MILLER <span class="operator">|</span> <span class="number">7782</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+--------+------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># <span class="number">1.</span>分析思路 <span class="comment">---&gt; 一张表</span></span><br><span class="line"># <span class="number">2.</span>判断主表 <span class="comment">---&gt; a员工表</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a.ename <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>,b.ename <span class="keyword">from</span> emp a <span class="keyword">left</span> <span class="keyword">join</span> emp b <span class="keyword">on</span> a.mgr<span class="operator">=</span>b.empno;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> ename <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> FORD  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> KING  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> JONES <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> SCOTT <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> BLAKE <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> JONES <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> CLARK <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ol><h3 id="五、多张表之间进行连接"><a href="#五、多张表之间进行连接" class="headerlink" title="五、多张表之间进行连接"></a>五、多张表之间进行连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">xxx</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a</span><br><span class="line"><span class="keyword">join</span> </span><br><span class="line">b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a 和 b 的连接条件</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">c</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a 和 c 的连接</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> </span><br><span class="line">d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a 和 d 的连接</span><br><span class="line"></span><br><span class="line">一条 <span class="keyword">sql</span> 中内连接和外连接可以混合，都可以出现。 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-分组查询.md</title>
      <link href="/2022/10/28/MySQL/5-%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/"/>
      <url>/2022/10/28/MySQL/5-%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="什么是分组查询"><a href="#什么是分组查询" class="headerlink" title="什么是分组查询"></a>什么是分组查询</h3><p>一定要先分组，才能使用分组查询。在默认情况下一张表为一张表</p><p><img src="/2022/10/28/MySQL/5-%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/image-20221028212651827.png" alt="image-20221028212651827"></p><p>select</p><p>…</p><p>from </p><p>…</p><p>where</p><p>….</p><p>group by</p><p>..</p><p>order by </p><p>…</p><h3 id="二、sql-的执行过程（顺序）"><a href="#二、sql-的执行过程（顺序）" class="headerlink" title="二、sql 的执行过程（顺序）"></a>二、sql 的执行过程（顺序）</h3><p>1.from</p><p>2.where</p><p>3.group by （没有的时候默认为一张表）</p><p>​….</p><p>4.having</p><p>​…..</p><p>5.select</p><p>​…..</p><p>6.order by</p><p>​….</p><p>从 from 指定的表中查，经过 where 条件进行过滤出有价值的价值，过滤后进行 group by分组，分完组继续 使用 having 进行 过滤 ，然后 select 查询出来，最后进行排序。</p><h3 id="三、sql-语句要注意的点"><a href="#三、sql-语句要注意的点" class="headerlink" title="三、sql 语句要注意的点"></a>三、sql 语句要注意的点</h3><p>​分组函数不能直接使用在 where 后面。</p><p><strong>一个思考题</strong></p><ol><li><p>为什么这个语句会报错 &#x2F; </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sal form emp <span class="keyword">where</span> sal<span class="operator">&gt;</span><span class="built_in">min</span>(sal);</span><br></pre></td></tr></table></figure><p>​Q; min 是分组命令，要在group by执行完后才能执行。 如果写在where 中，where 执行时，group by 还没有执行。</p></li><li><p>为什么这个没有分组 ，sum 函数可以使用呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(sal) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>Q: 因为 select 在 group by 之后执行。</p></li></ol><p><strong>执行流程分析</strong></p><p>1. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">统计不同岗位的工资和。<span class="comment">----&gt; 俺岗位分组</span></span><br><span class="line"><span class="keyword">select</span> job,<span class="built_in">sum</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> job,<span class="built_in">sum</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> <span class="built_in">sum</span>(sal) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="operator">|</span> CLERK     <span class="operator">|</span>  <span class="number">4150.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN  <span class="operator">|</span>  <span class="number">5600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span>  <span class="number">8275.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span>  <span class="number">6000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span>  <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+----------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">1.</span> 先从 emp 表中查询数据 (<span class="keyword">from</span> 和 <span class="keyword">where</span>)</span><br><span class="line"><span class="number">2.</span> 根据 job 进行分组</span><br><span class="line"><span class="number">3.</span> 对每一组的数据进行 <span class="built_in">sum</span>(sal)</span><br></pre></td></tr></table></figure><p><strong>select</strong> <strong>字段要求</strong><br>        在一条 select 语句当中，如果有 group by 语句的话，select 后面只能跟： 参加分组的字段（job），以及分组函数(sum(sal))，其他的一律不能跟。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename(x错误！),job,<span class="built_in">sum</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line"><span class="comment">---&gt;Oracle会报错</span></span><br></pre></td></tr></table></figure><p><strong>案例分析</strong></p><ol><li><p>求每个部门中的最高薪资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 先根据部门进行分组 <span class="comment">----&gt; 2.找出每一组中的最大值</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">max</span>(sal),deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">max</span>(sal) <span class="operator">|</span> deptno <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3000.00</span> <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2850.00</span> <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5000.00</span> <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+--------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>找出“每个部门，不同工作岗位”的最高薪资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> job,deptno,<span class="built_in">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job,deptno;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> deptno <span class="operator">|</span> <span class="built_in">max</span>(sal) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------+----------+</span></span><br><span class="line"><span class="operator">|</span> CLERK     <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span>  <span class="number">1100.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN  <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span>  <span class="number">1600.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span>  <span class="number">2975.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span>  <span class="number">2850.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER   <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>  <span class="number">2450.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span>  <span class="number">3000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>  <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLERK     <span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span>   <span class="number">950.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLERK     <span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>  <span class="number">1300.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------+----------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>技巧：两个字段联合成 1 个字段看（两个字段联合分组）</p></li><li><p>找出每个部门最高薪资，要求显示最高薪资大于3000的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">思路一、</span><br><span class="line"><span class="number">1.</span>找出每个部门最高薪资</span><br><span class="line">   按照部门编号，进行分组，然后找出最高薪资</span><br><span class="line"><span class="number">2.</span> 要求显示薪资大于<span class="number">3000</span> ，</span><br><span class="line">  mysql<span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">select</span> </span><br><span class="line">  deptno,<span class="built_in">max</span>(sal) </span><br><span class="line">  <span class="keyword">from</span> </span><br><span class="line">  emp</span><br><span class="line">  <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">  deptno </span><br><span class="line">  <span class="keyword">having</span> </span><br><span class="line">  <span class="built_in">max</span>(sal)<span class="operator">&gt;</span><span class="number">3000</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> <span class="built_in">max</span>(sal) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span>  <span class="number">5000.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">思路二、</span><br><span class="line">先将 sal<span class="operator">&gt;</span><span class="number">3000</span> 的都找出来，然后再进行分组</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">deptno,<span class="built_in">max</span>(sal)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">sal<span class="operator">&gt;</span><span class="number">3000</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">deptno;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>having 不能单独使用，having可以对数据进行进一步过滤.</p><p>优化策略：<br>where和having，优先选择 where ，where 实在完成不了的，再选择having</p></blockquote><ol start="4"><li><p>找出每个部门的平均薪资，只显示平均薪资大于2500的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno ;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> <span class="built_in">avg</span>(sal)    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">20</span> <span class="operator">|</span> <span class="number">2175.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">30</span> <span class="operator">|</span> <span class="number">1566.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># 分组函数中无法 在<span class="keyword">where</span>中使用，所以此处不能使用<span class="keyword">where</span>代替</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span> <span class="built_in">avg</span>(sal)<span class="operator">&gt;</span><span class="number">2500</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> deptno <span class="operator">|</span> <span class="built_in">avg</span>(sal)    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="number">10</span> <span class="operator">|</span> <span class="number">2916.666667</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>找出每个岗位的平均薪资，要求显示平均薪资大于 1500 的，除manager 岗位之外，要求按照平均薪资降序排</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">job,<span class="built_in">avg</span>(sal)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">job<span class="operator">&lt;&gt;</span> <span class="string">&#x27;manager&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">job</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line"><span class="built_in">avg</span>(sal)<span class="operator">&gt;</span><span class="number">1500</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="built_in">avg</span>(sal) <span class="keyword">desc</span>; </span><br><span class="line"></span><br><span class="line">先使用<span class="keyword">where</span> 中选出了job不为 manager， 然后 使用<span class="keyword">having</span>再进行过滤，最后 <span class="keyword">select</span> job,<span class="built_in">avg</span>(sal) 。</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> job,<span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp <span class="keyword">where</span> job<span class="operator">&lt;&gt;</span><span class="string">&#x27;manager&#x27;</span><span class="keyword">group</span> <span class="keyword">by</span> job <span class="keyword">having</span> <span class="built_in">avg</span>(sal)<span class="operator">&gt;</span><span class="number">1500</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">avg</span>(sal) <span class="keyword">desc</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> job       <span class="operator">|</span> <span class="built_in">avg</span>(sal)    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> PRESIDENT <span class="operator">|</span> <span class="number">5000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST   <span class="operator">|</span> <span class="number">3000.000000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-多行处理命令.md</title>
      <link href="/2022/10/28/MySQL/4-%E5%A4%9A%E8%A1%8C%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/10/28/MySQL/4-%E5%A4%9A%E8%A1%8C%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><p>​对多行数据进行处理，单行输出。</p><h3 id="二、常用命令"><a href="#二、常用命令" class="headerlink" title="二、常用命令"></a>二、常用命令</h3><ol><li>count(字段) 统计&#x3D;&#x3D;数值不为null&#x3D;&#x3D;的字段<ol><li>count(* ) 统计表中的&#x3D;&#x3D;总行数&#x3D;&#x3D;</li></ol></li><li>sum(字段) ，对字段进行求和<br>—-&gt;<br>  在多行处理命令中会自动忽略null<br>不用使用 ifnull(字段,转换值) 进行转换</li><li>avg平均值：select avg（字段名） from 表名；</li><li>max最大值：select max（字段名） from 表名；</li><li>min最小值：select min（字段名） from 表名；</li></ol><h3 id="三、注意点"><a href="#三、注意点" class="headerlink" title="三、注意点"></a>三、注意点</h3><ol><li><p>分组函数不能够直接使用在 where 字句中</p><ol><li>找出比最低工资高的员工信息。<br>错误案例<br>select ename,sal from emp where sal &gt; min(sal)<br>看起来没问题，但运行<br>Error 111(HY000 ): invalid use of group function</li></ol></li><li><p>所有的分组函数可以组合起来一起使用</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/28/Linux/3-%E4%BF%AE%E6%94%B9swap%E5%A4%A7%E5%B0%8F/"/>
      <url>/2022/10/28/Linux/3-%E4%BF%AE%E6%94%B9swap%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_34160841/article/details/104856865?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.pc_relevant_paycolumn_v3&spm=1001.2101.3001.4242.1&utm_relevant_index=3">Ubuntu 修改swap大小</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to compile twrp(编译属于你自己的twrp_recovery)</title>
      <link href="/2022/10/27/Android/compileTwrp/"/>
      <url>/2022/10/27/Android/compileTwrp/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>[TOC]</p><h1 id="How-to-compile-twrp"><a href="#How-to-compile-twrp" class="headerlink" title="How to compile twrp"></a>How to compile twrp</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在很久之前就有了自己编译 twrp 和 rom 的想法，但碍于设备条件，一直没有机会实现。刚好这段时间有空，就开始查阅资料实现。</p><h2 id="二、硬性要求"><a href="#二、硬性要求" class="headerlink" title="二、硬性要求"></a>二、硬性要求</h2><ol><li>具有一定的科学上网能力。（必须！！！！）</li><li>硬盘空间 &gt;&#x3D; 200G。</li><li>会基本的Linux命令操作</li><li>运行内存&gt;&#x3D;16G（推荐16G以上，当然差的不是很多可以通过增大swap分区来解决）</li></ol><h3 id="三、教程正文"><a href="#三、教程正文" class="headerlink" title="三、教程正文"></a>三、教程正文</h3><ol><li><p>配置好Ubuntu环境</p><ol><li>配置虚拟机或者Windows安装虚拟机都可以。网上关于此的教程较多，在此不进行过多的赘述。Ubuntu版本推荐 18.04或 22.04（自用版本)</li></ol></li><li><p>安装必要的软件依赖</p><ol><li><p>把apt 的源更换为国内的镜像</p><ol><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></li><li>阿里&#x2F;中科大也可</li></ol></li><li><p>&#96;&#96;&#96;shell</p><h1 id="安装一些必要的依赖"><a href="#安装一些必要的依赖" class="headerlink" title="安装一些必要的依赖"></a>安装一些必要的依赖</h1><p>sudo apt install bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev liblz4-tool libncurses5 libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev git</p><h1 id="可选-这两个工具是为了可以刷入手机"><a href="#可选-这两个工具是为了可以刷入手机" class="headerlink" title="可选 这两个工具是为了可以刷入手机"></a>可选 这两个工具是为了可以刷入手机</h1><p>sudo apt install adb fastboot</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   3. 配置git(如果你没有配置过请配置)</span><br><span class="line"></span><br><span class="line">      1. </span><br><span class="line"></span><br><span class="line">3. 下载 repo 工具。</span><br><span class="line"></span><br><span class="line">   1. 使用清华源安装 [教程](https://mirrors.tuna.tsinghua.edu.cn/help/git-repo/)</span><br><span class="line"></span><br><span class="line">      1. ```shell</span><br><span class="line">         # 下载</span><br><span class="line">         curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo -o repo</span><br><span class="line">         chmod +x repo</span><br><span class="line">         mv repo ~/usr/bin/</span><br><span class="line">         #or mv repo ~/bin/</span><br><span class="line">         # 将以下内容写入 ~/.bashrc 文件内</span><br><span class="line">         export REPO_URL=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo&#x27;</span><br><span class="line">         # 重启终端模拟器</span><br></pre></td></tr></table></figure><blockquote><ol><li>查看 PATH 可使用 echo $PATH 命令</li><li>.bashrc 文件（bash rc-running configuration）这个文件主要保存个人的一些个性化设置，如命令别名、路径等。也即在同一个服务器上，只对某个用户的个性化设置相关。普通用户为 &#x2F;home&#x2F;用户名&#x2F; 目录，root 为 &#x2F;root&#x2F; 。改文件在&#x3D;&#x3D;每次启动bash&#x3D;&#x3D;都会被加载</li></ol></blockquote></li></ol></li><li><p>使用repo初始化本地仓库，使用AOSP tree 构建 TWRP。</p><ol><li>&#96;&#96;&#96;shell<h1 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h1>mkdir twrp&amp;&amp;cd twrp<h1 id="这里使用-aosp-最小设备树"><a href="#这里使用-aosp-最小设备树" class="headerlink" title="这里使用 aosp 最小设备树"></a>这里使用 aosp 最小设备树</h1>repo init -u <a href="https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp.git">https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp.git</a> -b twrp-12.1<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. 同步源码</span><br><span class="line"></span><br><span class="line">   1. ```shell</span><br><span class="line">      repo sync -j8</span><br><span class="line">      # -j xxx  代表使用多少个线程</span><br></pre></td></tr></table></figure></li></ol></li><li><p>准备 devices tree(dt文件)</p><ol><li><p>直接从 github 获取</p></li><li><p>github 搜索 设备代号(可百度搜) + twrp —–&gt; 这里以k30pro 为例 </p><ol><li><p>lmi twrp <img src="/2022/10/27/Android/compileTwrp/image-20221027221632595.png" alt="image-20221027221632595"></p></li><li><p>下载到 .&#x2F;device&#x2F;xiaomi(手机厂商)&#x2F;lmi(设备代号)&#x2F;</p><ol><li><p><img src="/2022/10/27/Android/compileTwrp/image-20221027222023975.png" alt="image-20221027222023975"></p></li><li><p>&#96;&#96;&#96;shell<br>#确保你在刚刚创建的twrp 文件内<br>git clone 上面的链接  device&#x2F;xiaomi&#x2F;lmi&#x2F;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 我是大佬自己写dt文件(大佬不需要看教程)---&gt;后续我会写一个</span><br><span class="line"></span><br><span class="line">3. 使用 twrpdtgen 生成 </span><br><span class="line"></span><br><span class="line">   1. ```shell</span><br><span class="line">      #安装python</span><br><span class="line">      apt install python3</span><br><span class="line">      # 安装cpio 必须</span><br><span class="line">      apt install cpio</span><br><span class="line">      #使用 pip 安装 </span><br><span class="line">      # python2.7 及python3.4以上已内置，没有的额外安装</span><br><span class="line">      pip3 install twrpdtgen</span><br></pre></td></tr></table></figure></li></ol></li><li><p>提取 boot.img &#x2F;recovery.img(具有recovery独立分区的手机)</p><ol><li>可以通过下载线刷包解包后获取<ol><li><a href="https://xiaomirom.com/">小米卡刷&#x2F;线刷包下载</a></li></ol></li></ol></li><li><p>使用 twrpdtgen 生成dt tree</p><ol><li><p>&#96;&#96;&#96;shell<br>python3 -m twrpdtgen recovery.img&#x2F;boot.img绝对路径</p><h1 id="提示-Done！即成功"><a href="#提示-Done！即成功" class="headerlink" title="提示 Done！即成功"></a>提示 Done！即成功</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 将 twrpdtgen 生成的 dt tree 移动到 twrp/devices中</span><br><span class="line"></span><br><span class="line">   1. ```shell</span><br><span class="line">      mv output/xiaomi(厂商代号) device/</span><br><span class="line">      </span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol></li><li><p>开始编译</p><ol><li><p>确保你现在在源码根目录 也就是 twrp 文件夹里</p><ol><li>不确定的可以使用 pwd 命令，查看</li></ol></li><li><p>配置环境</p><ol><li>&#96;&#96;&#96;shell<br>. build&#x2F;envsetup.sh<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 开始编译</span><br><span class="line"></span><br><span class="line">   1. ```shell</span><br><span class="line">      # 1.直接在命令行输入</span><br><span class="line">      export ALLOW_MISSING_DEPENDENCIES=true</span><br><span class="line">      </span><br><span class="line">      # 2.</span><br><span class="line">      lunch</span><br><span class="line">      #会输出一系列，选择你要编译的序号即可，一般为 omni_lmi(代号)-eng</span><br><span class="line">      #or</span><br><span class="line">      lunch omni_lmi-eng</span><br><span class="line">      </span><br><span class="line">      #3.</span><br><span class="line">      mka recoveryimage</span><br></pre></td></tr></table></figure><ol start="2"><li>编译成功！<ol><li>当出现 <p style="color:green">build completed successfully  </p> 。即证明你已经编译成功了！</li></ol></li></ol></li></ol></li></ol></li><li><p>刷入 recovery.img</p><ol><li>重启设备进入 fastboot模式<br>adb reboot fastboot</li><li>刷入 recovery<br>fast flash recovery &#x2F;out&#x2F;target&#x2F;product&#x2F;lmi&#x2F;recovery.img(可能会有变化)</li></ol></li></ol><h2 id="三、常见问题"><a href="#三、常见问题" class="headerlink" title="三、常见问题"></a>三、常见问题</h2><ol><li>Q:为什么提示 github unable resolve 。<br>A: 因为国内的特殊环境，github 偶尔不能访问，如果可以的话请挂好梯子后进行编译。</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> compile </tag>
            
            <tag> twrp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/26/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/1-%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/1-%E7%B1%BB%E6%96%B9%E6%B3%95/"/>
      <url>/2022/10/26/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/1-%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/1-%E7%B1%BB%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/10/26/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/1-%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/1-%E7%B1%BB%E6%96%B9%E6%B3%95/image-20221026220245184.png" alt="image-20221026220245184"></p><h3 id="一、静态方法的使用"><a href="#一、静态方法的使用" class="headerlink" title="一、静态方法的使用"></a>一、静态方法的使用</h3><ol><li><p>调用方式</p><ol><li>通过<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象名.方法名</span><br><span class="line">或</span><br><span class="line">类名.方法名</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="二、静态方法的注意事项"><a href="#二、静态方法的注意事项" class="headerlink" title="二、静态方法的注意事项"></a>二、静态方法的注意事项</h3><ol><li>静态方法&#x3D;&#x3D;只能访问静态变量&#x3D;&#x3D;<br>why?<ol><li>静态方法和</li></ol></li></ol><h3 id="三、静态方法和普通方法的区别"><a href="#三、静态方法和普通方法的区别" class="headerlink" title="三、静态方法和普通方法的区别"></a>三、静态方法和普通方法的区别</h3><ol><li>访问变量的范围<ol><li>静态方法只能访问静态变量。<br>而<br>普通方法能同时访问静态变量和成员变量。</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/26/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/1-%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/0-%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%82%A8%E5%AD%98%E4%BD%8D%E7%BD%AE/"/>
      <url>/2022/10/26/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/1-%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/0-%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%82%A8%E5%AD%98%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="一、-使用"><a href="#一、-使用" class="headerlink" title="一、 使用"></a>一、 使用</h4><p>修饰符 static type ParameterNam</p><h4 id="二、细节"><a href="#二、细节" class="headerlink" title="二、细节"></a>二、细节</h4><ol><li><p>什么是类变量</p><ol><li>类变量也叫静态变量&#x2F;静态属性，是该类的&#x3D;&#x3D;所有对象实例共享&#x3D;&#x3D;的变量，任何一个该类的对象实例去访问它时，取到的都是相同的值；同样任何一个该类的对象去修改它时，修改的也是同一个变量。</li></ol></li><li><p>如何定义</p><ol><li>访问修饰符 static 数据类型 变量名</li><li>static 访问修饰符 数据类型 变量名。</li></ol></li><li><p>如何访问类变量</p><ol><li>类名.类变量名 &#x3D;&#x3D;&#x3D;&gt; 推荐</li><li>or</li><li>对象名.类变量名</li><li>&#x3D;&#x3D;访问时需要遵守访问修饰符&#x3D;&#x3D;</li></ol></li><li><p>类变量在什么时候生成</p><ol><li><p>类变量在类被加载时就初始化了，也就是说，即使你没有创建对象，只要类加载了，就可以使用类变量</p></li><li><p>类变量的生命周期是随类的加载开始，随类消亡</p></li><li><p>案例</p><ol><li><pre><code class="java">public class visitStatic &#123;    public static void main(String[] args) &#123;        System.out.println(A.name);    &#125;&#125;class A&#123;    public static String name=&quot;ni hao&quot;;&#125;</code></pre></li><li></li></ol></li></ol></li></ol><blockquote><p>什么时候加载类信息.</p></blockquote><ol start="5"><li>什么时候需要用类变量<ol><li>当我们需要让某个类的所有对象都共享一个变量时。</li></ol></li><li>类变量与实例变量（普通属性）区别<ol><li>类变量是该类的所有对象共享的，二实例变量（普通成员变量&#x2F;非静态成员变量)）是每个对象独享的’&#x3D;’</li><li>普通属性不能通过 <code>类名.变量名</code>读取</li></ol></li></ol><p><img src="/2022/10/26/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/1-%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/0-%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%82%A8%E5%AD%98%E4%BD%8D%E7%BD%AE/image-20221026213048223.png" alt="image-20221026213048223"></p><h3 id="二、静态变量-x2F-类变量储存"><a href="#二、静态变量-x2F-类变量储存" class="headerlink" title="二、静态变量&#x2F; 类变量储存"></a>二、静态变量&#x2F; 类变量储存</h3><ol><li><p>版本划分</p><ol><li>jdk7以前在方法区中</li><li>jdk7以后，静态域储存于定义类型的Class对象中，Class对象如同堆中其他对象一样存在于GO堆中。<ol><li>放在class 实例的尾部，class 变量存在于堆中。</li></ol></li><li><img src="/2022/10/26/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/1-%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/0-%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%82%A8%E5%AD%98%E4%BD%8D%E7%BD%AE/image-20221026210945215.png" alt="image-20221026210945215"></li><li><img src="/2022/10/26/JAVA/5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E9%AB%98%E7%BA%A7)/1-%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/0-%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%82%A8%E5%AD%98%E4%BD%8D%E7%BD%AE/image-20221026212523430.png" alt="image-20221026212523430"></li></ol></li><li><p>特定</p><ol><li>所有对象变量共享 ——&gt; 同一个类生成的所有对象。 </li><li>在类加载的时候就生成</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/25/Linux/2-%E9%85%8D%E7%BD%AEpython%E7%89%88%E6%9C%AC/"/>
      <url>/2022/10/25/Linux/2-%E9%85%8D%E7%BD%AEpython%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<ol><li><p>python问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//update-alternatives: 使用 /usr/bin/python2 来在自动模式中提供 /usr/bin/python (python)</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">:sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 1</span></span><br><span class="line">//列出python的配置项</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">su: <span class="keyword">do</span> update-alternatives --list python</span></span><br><span class="line">/usr/bin/python2</span><br><span class="line">//调整顺序</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">u82:~/Py_demo$ python -V</span></span><br><span class="line">Python 2.7.18</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//查看软连接</span><br><span class="line">ls -l | grep python*</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>apt换源问题</p><ol><li><pre><code class="shell">1. </code></pre></li><li></li></ol></li></ol><p>miui</p><p>recover.fstab 在 &#x2F;ramdisk&#x2F;system&#x2F;e</p><ol start="3"><li>repo 使用清华源 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/git-repo/">清华源</a><ol><li>一般path 为 ~&#x2F;usr&#x2F;bin</li><li></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/25/Linux/1-%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/"/>
      <url>/2022/10/25/Linux/1-%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol><li>模式选择<ol><li>默认使用NAT即可</li></ol></li><li>不能正常使用<ol><li>恢复默认设置</li><li>检查 VM 的 NAT 服务 和 DNS 服务</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/23/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/9-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/1-%E7%9B%B8%E5%85%B3%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/10/23/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/9-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/1-%E7%9B%B8%E5%85%B3%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<ol><li>F7(跳入方法内)</li><li>F8(逐行执行代码)<ol><li>shift + F8 (跳出方法)</li></ol></li><li>F9（resume 执行到下一个断点)</li></ol><p><img src="/2022/10/23/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/9-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/1-%E7%9B%B8%E5%85%B3%E5%BF%AB%E6%8D%B7%E9%94%AE/image-20221023213816192.png" alt="image-20221023213816192"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>finalize.md</title>
      <link href="/2022/10/23/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/8-Object%E7%B1%BB/3-finalize/finalize/"/>
      <url>/2022/10/23/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/8-Object%E7%B1%BB/3-finalize/finalize/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><ol><li>在对象没有任何引用时，jvm 就会调用对象的finalize方法。进行垃圾回收。</li><li>程序猿可以在 finalize 中，写自己的业务逻辑代码（比如释放资源：数据库链接，或打开文件…)</li><li>如果程序猿不重写 finalize 方法，则会默认调用 object 类的 finalize ，即默认处理。</li></ol><h3 id="二、小结"><a href="#二、小结" class="headerlink" title="二、小结"></a>二、小结</h3><p><img src="/2022/10/23/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/8-Object%E7%B1%BB/3-finalize/finalize/image-20221023213127217.png" alt="image-20221023213127217"></p><blockquote><p>开发中，几乎不会运用finalize ,所以更多的是为了应对面试</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> finalize </tag>
            
            <tag> 垃圾回收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>toString.md</title>
      <link href="/2022/10/23/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/8-Object%E7%B1%BB/2-toString%E6%96%B9%E6%B3%95/toString/"/>
      <url>/2022/10/23/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/8-Object%E7%B1%BB/2-toString%E6%96%B9%E6%B3%95/toString/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="/2022/10/23/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/8-Object%E7%B1%BB/2-toString%E6%96%B9%E6%B3%95/toString/image-20221023210406001.png" alt="image-20221023210406001"></p><h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><ol><li><p>toString 源码</p><ol><li>&#96;&#96;&#96;java<br>&#x2F;&#x2F;（1）getClass.getName  类的全类名 （包+类）<br>&#x2F;&#x2F; （2）Integer.toHexString(hashCode());将对象的hashcode转换为十六进制<br>public String toString() {<br>    return getClass().getName() + “@” + Integer.toHexString(hashCode());<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 子类默认重写</span><br><span class="line"></span><br><span class="line">   1. ```java</span><br><span class="line">      //案例</span><br><span class="line">      package com.jhfuture.toStringmethods;</span><br><span class="line">      </span><br><span class="line">      public class test &#123;</span><br><span class="line">          public static void main(String[] args) &#123;</span><br><span class="line">              Monster monster = new Monster(&quot;小米&quot;, 123);</span><br><span class="line">              System.out.println(monster.toString()+&quot;hashcode&quot;+monster.hashCode());</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      class Monster&#123;</span><br><span class="line">          private  String name;</span><br><span class="line">          private  int age;</span><br><span class="line">          //重写toString 方法，输出对象的属性</span><br><span class="line">          //使用快捷键即可</span><br><span class="line">          //alt+insert</span><br><span class="line">          @Override</span><br><span class="line">          public String toString() &#123;</span><br><span class="line">              //一般是把对象的属性值输出</span><br><span class="line">              return &quot;Monster&#123;&quot; +</span><br><span class="line">                      &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                      &quot;, age=&quot; + age +</span><br><span class="line">                      &#x27;&#125;&#x27;;</span><br><span class="line">          &#125;</span><br><span class="line">      </span><br><span class="line">          public Monster(String name, int age) &#123;</span><br><span class="line">              this.name = name;</span><br><span class="line">              this.age = age;</span><br><span class="line">      </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>当直接输出一个对象时，就会&#x3D;&#x3D;默认调用toString方法&#x3D;&#x3D;</p><ol><li><pre><code class="java">System.out.println(monster);// 等同于 monset.toString()</code></pre></li><li></li></ol></li></ol><h3 id="二、解释"><a href="#二、解释" class="headerlink" title="二、解释"></a>二、解释</h3><ol><li>全类名：包名+类名<br>1. </li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> toString </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hashCode.md</title>
      <link href="/2022/10/23/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/8-Object%E7%B1%BB/5-hashCode/hashCode/"/>
      <url>/2022/10/23/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/8-Object%E7%B1%BB/5-hashCode/hashCode/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="/2022/10/23/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/8-Object%E7%B1%BB/5-hashCode/hashCode/image-20221023204649214.png" alt="image-20221023204649214"></p><p>一些特别的解释：</p><ol start="4"><li>hashcode是根据对象的&#x3D;&#x3D;真实地址&#x3D;&#x3D;来获得的</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字符串与基本数据类型</title>
      <link href="/2022/10/22/JAVA/1-%E5%8F%98%E9%87%8F/2-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/10/22/JAVA/1-%E5%8F%98%E9%87%8F/2-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、基本类型转换字符串"><a href="#一、基本类型转换字符串" class="headerlink" title="一、基本类型转换字符串"></a>一、基本类型转换字符串</h3><ol><li><p>语法</p><ol><li><p>将基本类型的值 + “” 即可</p></li><li><pre><code class="java">int n1=20;String n2=n1+&quot;&quot;;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 二、字符串转换为基本数据类型</span><br><span class="line"></span><br><span class="line">1. 语法</span><br><span class="line"></span><br><span class="line">   1. 通过基本类型的 **包装类**调用parseXX方法即可。</span><br><span class="line"></span><br><span class="line">      1. ```java</span><br><span class="line">         String ---&gt; int</span><br><span class="line">            String s5=&quot;123&quot;;</span><br><span class="line">                 int n1= Integer.parseInt(s5);</span><br><span class="line">                 System.out.println(n1);</span><br><span class="line">                 double num2=Double.parseDouble(s5);</span><br><span class="line">                 System.out.println(num2);</span><br><span class="line">                 float num3=Float.parseFloat(s5);</span><br><span class="line">                 long num4=Long.parseLong(s5);</span><br><span class="line">                 byte num5=Byte.parseByte(s5);</span><br><span class="line">                 boolean b=Boolean.parseBoolean(&quot;true&quot;);</span><br><span class="line">                 short num6= Short.parseShort(s5);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>特别的，把字符串转位字符—-&gt;  一般是将 字符串 中的第一个一个字符取出得到</p><ol><li>&#96;&#96;&#96;java<br>char i &#x3D;s5.charAt(0);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 在转换时一定要确保string类型能转换为有效的数据。比如我们可以将“123&quot;转换为整数，但是不能将 ”hello &quot; 转换为一个整数。程序会直接报错并终止。</span><br><span class="line"></span><br><span class="line">   1. ```java</span><br><span class="line">      String h=&quot;hello&quot;;</span><br><span class="line">          int i=Integer.parseInt(h);</span><br><span class="line">      Error:</span><br><span class="line">      Exception in thread &quot;main&quot; java.lang.NumberFormatException: For input string: &quot;hello&quot;</span><br><span class="line">      at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)</span><br><span class="line">      at java.lang.Integer.parseInt(Integer.java:580)</span><br><span class="line">      at java.lang.Integer.parseInt(Integer.java:615)</span><br><span class="line">      at com.jhfuture.StringToBasetype.man.main(man.java:17)</span><br></pre></td></tr></table></figure></li></ol></li><li></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型转换 </tag>
            
            <tag> String字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/22/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/7-==%E5%92%8Cequal%E7%9A%84%E5%8C%BA%E5%88%AB/%E7%BB%83%E4%B9%A0/1-/"/>
      <url>/2022/10/22/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/7-==%E5%92%8Cequal%E7%9A%84%E5%8C%BA%E5%88%AB/%E7%BB%83%E4%B9%A0/1-/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/10/22/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/7-==%E5%92%8Cequal%E7%9A%84%E5%8C%BA%E5%88%AB/%E7%BB%83%E4%B9%A0/1-/image-20221022214059634.png" alt="image-20221022214059634"></p><p><img src="/2022/10/22/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/7-==%E5%92%8Cequal%E7%9A%84%E5%8C%BA%E5%88%AB/%E7%BB%83%E4%B9%A0/1-/image-20221022214134419.png" alt="image-20221022214134419"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/22/JAVA/%E4%B8%80%E4%BA%9B%E5%BE%85%E8%A7%A3%E5%86%B3%E7%9A%84%E5%8E%9F%E7%90%86%E9%97%AE%E9%A2%98/%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/10/22/JAVA/%E4%B8%80%E4%BA%9B%E5%BE%85%E8%A7%A3%E5%86%B3%E7%9A%84%E5%8E%9F%E7%90%86%E9%97%AE%E9%A2%98/%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol><li>动态绑定机制是怎么样的，为什么方法具有，而属性没有<ol><li><p>—-&gt; 对应方法和属性的调用机制</p></li><li><p>有没有一种可能是因为向上转型时</p><ol><li>查找属性时是在堆中直接从该父类类型（即编译类型）的堆空间中找</li><li>而调用方法是从方法区中开始找</li></ol></li></ol></li></ol><p><img src="/2022/10/22/JAVA/%E4%B8%80%E4%BA%9B%E5%BE%85%E8%A7%A3%E5%86%B3%E7%9A%84%E5%8E%9F%E7%90%86%E9%97%AE%E9%A2%98/%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8%E7%9A%84%E9%97%AE%E9%A2%98/image-20221016163319682.png" alt="image-20221016163319682"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-this</title>
      <link href="/2022/10/22/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-this%E5%92%8Csuper/1-this/"/>
      <url>/2022/10/22/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-this%E5%92%8Csuper/1-this/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h4 id="一些自己的小实验"><a href="#一些自己的小实验" class="headerlink" title="一些自己的小实验"></a>一些自己的小实验</h4><ol><li><p>即时在父类中使用this的关键字，在多态中依然会遵循动态绑定机制</p><ol><li><p>调用对象方法会有动态绑定机制（和对象的内存地址&#x2F;运行类型进行绑定）—&gt;根据运行类型，从本类中开始查找—&gt;父类</p></li><li><p>调用对象属性—&gt;在哪里声明，在那里调用</p></li><li><pre><code class="java">package com.jhfuture.thisDetail;//Person.java//person，xiaoming ,其中person有say方法，而两则都有bye 方法，// 当使用 向上转型调用xiaoming类时，如果，say方法中使用了this，那还遵守动态绑定吗 遵循public class Person &#123;    String name=&quot;person&quot;;    public  void say()&#123;        System.out.println(this.name);        bye();    &#125;    public void bye()&#123;        System.out.println(&quot;here is person&quot;);    &#125;&#125;//xiaoming.javapackage com.jhfuture.thisDetail;public class xiaoming extends Person&#123;    String name=&quot;xiaoming&quot;;    public void bye()&#123;        System.out.println(&quot;here is xiaoming&quot;);    &#125;&#125;//test.javapackage com.jhfuture.thisDetail;public class test &#123;    public static void main(String[] args) &#123;        Person xiaoming = new xiaoming();        xiaoming.say();    &#125;&#125;//结果personhere is xiaoming</code></pre></li><li></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-成员方法的细节</title>
      <link href="/2022/10/22/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5-%E6%96%B9%E6%B3%95/2-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E7%9A%84%E7%BB%86%E8%8A%82/"/>
      <url>/2022/10/22/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5-%E6%96%B9%E6%B3%95/2-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E7%9A%84%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h4 id="一些需要注意的细节"><a href="#一些需要注意的细节" class="headerlink" title="一些需要注意的细节"></a>一些需要注意的细节</h4><ol><li><p>同一个类中的方法调用：直接调用即可。例如 print(参数)</p><ol><li><pre><code class="java">class hello&#123;    public void say()&#123;        println(&quot;&quot;);    &#125;    print()&#123;        System.out.println(&quot;hello&quot;);    &#125;    &#125;</code></pre></li></ol></li><li><p>跨类中的方法 A 类调用 B类方法：需要通过对象名调用</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成员方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/22/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/2-%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E7%9A%84%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/10/22/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/2-%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E7%9A%84%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">person</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span>p1.getSum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">System.out.println(res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">    <span class="type">int</span> result=num1+num2;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 main 栈里面，先执行 person p1&#x3D; new person()  在堆中创建一个新对象，并把内存地址赋值给 p1</li><li>调用p1.getSum 创建一个新的栈（全新的独立空间)<ol><li>将基本数据类型 10, 20分别执行 <strong>值拷贝</strong> 给num1, num2</li></ol></li><li>第二步执行完成后会将 result 返回给 res ，并释放该方法的栈。</li><li>继续执行后面的代码<ol><li><img src="/2022/10/22/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/2-%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E7%9A%84%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/image-20221022200943102.png" alt="image-20221022200943102"></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多态参数</title>
      <link href="/2022/10/22/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/6-%E5%A4%9A%E6%80%81/2-%E5%A4%9A%E6%80%81%E7%9A%84%E5%BA%94%E7%94%A8/2-%E5%A4%9A%E6%80%81%E5%8F%82%E6%95%B0/"/>
      <url>/2022/10/22/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/6-%E5%A4%9A%E6%80%81/2-%E5%A4%9A%E6%80%81%E7%9A%84%E5%BA%94%E7%94%A8/2-%E5%A4%9A%E6%80%81%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><h4 id="多态形参："><a href="#多态形参：" class="headerlink" title="多态形参："></a>多态形参：</h4><p>方法定义的形参为父类型，实参类型允许为子类类型</p><p><img src="/2022/10/22/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/6-%E5%A4%9A%E6%80%81/2-%E5%A4%9A%E6%80%81%E7%9A%84%E5%BA%94%E7%94%A8/2-%E5%A4%9A%E6%80%81%E5%8F%82%E6%95%B0/image-20221022192252583.png" alt="image-20221022192252583"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多态应用/多态参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java</title>
      <link href="/2022/10/22/java/"/>
      <url>/2022/10/22/java/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>==和equal</title>
      <link href="/2022/10/22/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/7-==%E5%92%8Cequal%E7%9A%84%E5%8C%BA%E5%88%AB/equal/"/>
      <url>/2022/10/22/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/7-==%E5%92%8Cequal%E7%9A%84%E5%8C%BA%E5%88%AB/equal/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一、-x3D-x3D"><a href="#一、-x3D-x3D" class="headerlink" title="一、&#x3D;&#x3D;"></a>一、&#x3D;&#x3D;</h2><ol><li><p>可以判断基本类型和引用类型</p></li><li><p>判断基本类型</p><ol><li>比较的是值是否相等</li></ol></li><li><p>判断引用类型</p><ol><li><p>判断内存地址是否相同&#x2F;<strong>引用是否指向同一个对象</strong></p></li><li><p>object的equal方法的基本组成</p><ol><li>&#96;&#96;&#96;java<br>public boolean equals(Object obj) {<br>    return (this &#x3D;&#x3D; obj);<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      2. </span><br><span class="line"></span><br><span class="line">## 二、equal</span><br><span class="line"></span><br><span class="line">1. equal 方法只能比较引用类型</span><br><span class="line"></span><br><span class="line">2. object 类的 equal 方法</span><br><span class="line"></span><br><span class="line">   1. ```java</span><br><span class="line">               public boolean equals(Object obj) &#123;</span><br><span class="line">                       return (this == obj);</span><br><span class="line">                   &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>Object 的子类 String 和 integer 都重写了 object 中的 equal 方法</p><ol><li>&#96;&#96;&#96;java<br>&#x2F;&#x2F;String进行判断<br>public boolean equals(Object anObject) {<br>&#x2F;&#x2F;直接使用 &#x3D;&#x3D; 判断内存地址<br>    if (this &#x3D;&#x3D; anObject) {<br><br>        return true;<br>    }<br>&#x2F;&#x2F;判断是否为 string 类&#x2F; string 的子类<br>    if (anObject instanceof String) {<br>&#x2F;&#x2F;向下转型<br>&#x2F;&#x2F; 为什么为向下转型，因为 anObject 传入时就 发生了 object的向上转型，这里从 object 转回 String。<br>        String anotherString &#x3D; (String)anObject;<br>        int n &#x3D; value.length;<br><br>        if (n &#x3D;&#x3D; anotherString.value.length) {<br>            char v1[] &#x3D; value;<br>            char v2[] &#x3D; anotherString.value;<br>            int i &#x3D; 0;<br>            &#x2F;&#x2F;判断两个string类的值是否相同<br>            while (n– !&#x3D; 0) {<br>                if (v1[i] !&#x3D; v2[i])<br>                    return false;<br>                i++;<br>            }<br>            return true;<br>        }<br>    }<br>    return false;<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```java</span><br><span class="line">   //integer 的源码 </span><br><span class="line">   public boolean equals(Object obj) &#123;</span><br><span class="line">           if (obj instanceof Integer) &#123;</span><br><span class="line">               return value == ((Integer)obj).intValue();</span><br><span class="line">           &#125;</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="三、综合比较"><a href="#三、综合比较" class="headerlink" title="三、综合比较"></a>三、综合比较</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jhfuture.checkJDKsrc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">checkEqual</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        String string1= <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(string==string1);<span class="comment">//false---&gt;直接判断内存地址</span></span><br><span class="line">        System.out.println(string.equals(string1));<span class="comment">//true ---&gt;判断值</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>);</span><br><span class="line">        System.out.println(integer==integer1); <span class="comment">//false </span></span><br><span class="line">        System.out.println(integer.equals(integer1)); <span class="comment">//true 同理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经典面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/22/JAVA/0-Java%E7%BB%86%E8%8A%82/%E5%A6%82%E4%BD%95%E5%9C%A8idea%E4%B8%AD%E6%9F%A5%E7%9C%8B%E6%BA%90%E7%A0%81/"/>
      <url>/2022/10/22/JAVA/0-Java%E7%BB%86%E8%8A%82/%E5%A6%82%E4%BD%95%E5%9C%A8idea%E4%B8%AD%E6%9F%A5%E7%9C%8B%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<ol><li>如何在idea中查看java的源码<ol><li>默认idea配置好jdk后，就会默认配置好源码包<ol><li>Ctrl+B即可直接查看</li><li>在方法上右键选择0—&gt;go to —&gt;declaration or usages<ol><li><img src="/2022/10/22/JAVA/0-Java%E7%BB%86%E8%8A%82/%E5%A6%82%E4%BD%95%E5%9C%A8idea%E4%B8%AD%E6%9F%A5%E7%9C%8B%E6%BA%90%E7%A0%81/image-20221022184741041.png" alt="image-20221022184741041"></li></ol></li></ol></li><li>如果没有的话请手动点击菜单 File—&gt;project struct—&gt;SDKs—&gt;source Path<ol><li><img src="/2022/10/22/JAVA/0-Java%E7%BB%86%E8%8A%82/%E5%A6%82%E4%BD%95%E5%9C%A8idea%E4%B8%AD%E6%9F%A5%E7%9C%8B%E6%BA%90%E7%A0%81/image-20221022184620047.png" alt="image-20221022184620047"></li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>super</title>
      <link href="/2022/10/21/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-this%E5%92%8Csuper/2-super/"/>
      <url>/2022/10/21/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-this%E5%92%8Csuper/2-super/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><ol><li><p>super代表父类的引用，用于访问父类的属性、方法（均需要注意修饰符）、构造器（只能放在本类构造器的第一句）。</p></li><li><p>super会隐藏的出现在具有继承关系的子类的构造器中，即默认会调用父类的无参构造器</p><ol><li>&#96;&#96;&#96;java<br>public class father{<br>father(){<br><br>}<br>}<br>public class son extends father{<br>son(){<br>    super(); &#x3D;&#x3D;&#x3D;&#x3D;&gt;默认会有,<br>}<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   2. </span><br><span class="line"></span><br><span class="line">### 二、基本语法</span><br><span class="line"></span><br><span class="line">1. 访问父类的属性，但不能访问父类的private属性</span><br><span class="line"></span><br><span class="line">   1. super.属性名</span><br><span class="line"></span><br><span class="line">   2. ```java</span><br><span class="line">      </span><br></pre></td></tr></table></figure></li></ol></li><li><p>访问父类的方法，但不能访问父类的private方法</p><ol><li>super.方法名(参数列表)</li></ol></li><li><p>访问父类的构造器</p><ol><li>super(参数列表)</li><li>只能放在本类构造器的第一句，且在一个函数体内只能出现一句。</li><li>&#x3D;&#x3D;默认子类的构造器在本构造器的第一行就有一行super语句，调用父类的构造器&#x3D;&#x3D;</li></ol></li></ol><h3 id="三、综合案例"><a href="#三、综合案例" class="headerlink" title="三、综合案例"></a>三、综合案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span>  com.jhfuture.superAndthis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">superDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">son</span>();</span><br><span class="line">        <span class="comment">//调用子类的有参</span></span><br><span class="line">        com.jhfuture.superAndthis.<span class="type">son</span> <span class="variable">son1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">son</span>(<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">father</span>&#123;</span><br><span class="line">    <span class="type">int</span> age=<span class="number">10</span>;</span><br><span class="line">    father(<span class="type">int</span> age)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;father的有参构造器被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    father()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类的无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">son</span> <span class="keyword">extends</span>  <span class="title class_">father</span>&#123;</span><br><span class="line">    son()&#123;</span><br><span class="line">        <span class="comment">//默认会调用父类的无参构造器</span></span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//属性</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.age);</span><br><span class="line">        <span class="comment">//方法</span></span><br><span class="line">        <span class="built_in">super</span>.hello();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    son(<span class="type">int</span> input)&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/10/21/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-this%E5%92%8Csuper/2-super/image-20221021003214056.png" alt="image-20221021003214056"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> super </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/18/MySQL/0-sql%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E5%9C%B0%E6%96%B9/"/>
      <url>/2022/10/18/MySQL/0-sql%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E5%9C%B0%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<ol><li><h3 id="查询等于"><a href="#查询等于" class="headerlink" title="查询等于"></a>查询等于</h3><ol><li>select 字段 from 表明 where 字段&#x3D;”xxx”</li></ol></li><li><h3 id="x3D-x3D-查询空值-x3D-x3D"><a href="#x3D-x3D-查询空值-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;查询空值&#x3D;&#x3D;"></a>&#x3D;&#x3D;查询空值&#x3D;&#x3D;</h3><ol><li><p>注意:在数据库中 null 不能使用等号进行衡量,需要使用 is null 来进行判断.因为数据库中的 null 代表什么也没有，它并不是一个值，所以不能使用等号衡量。</p><ol><li><p>即这种写法是错误的</p><ol><li>select ename,empno,comm from emp where comm &#x3D; null;</li></ol></li><li><p>&#96;&#96;&#96;sql<br>mysql&gt; select ename,empno,comm from emp where comm is null;<br>+——–+——-+——+<br>| ename  | empno | comm |<br>+——–+——-+——+<br>| SMITH  |  7369 | NULL |<br>| JONES  |  7566 | NULL |<br>| BLAKE  |  7698 | NULL |<br>| CLARK  |  7782 | NULL |<br>| SCOTT  |  7788 | NULL |<br>| KING   |  7839 | NULL |<br>| ADAMS  |  7876 | NULL |<br>| JAMES  |  7900 | NULL |<br>| FORD   |  7902 | NULL |<br>| MILLER |  7934 | NULL |<br>+——–+——-+——+<br>10 rows in set (0.00 sec)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">              </span><br><span class="line"></span><br><span class="line">3. ==查询非空值==</span><br><span class="line"></span><br><span class="line">   1. **xxx is not null**</span><br><span class="line"></span><br><span class="line">   2. ```sql</span><br><span class="line">       mysql&gt; select ename,empno,comm from emp where comm is not null;</span><br><span class="line">       +--------+-------+---------+</span><br><span class="line">       | ename  | empno | comm    |</span><br><span class="line">       +--------+-------+---------+</span><br><span class="line">       | ALLEN  |  7499 |  300.00 |</span><br><span class="line">       | WARD   |  7521 |  500.00 |</span><br><span class="line">       | MARTIN |  7654 | 1400.00 |</span><br><span class="line">       | TURNER |  7844 |    0.00 |</span><br><span class="line">       +--------+-------+---------+</span><br><span class="line">       4 rows in set (0.00 sec)</span><br><span class="line">       </span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>一些运算的问题</p><ol><li><p>在&#x3D;&#x3D;单行处理函数&#x3D;&#x3D; 中 ，如果 处理 时 &#x3D;&#x3D;<code>有null 参与的运输结果都是null</code>&#x3D;&#x3D;</p></li><li><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">```<span class="keyword">sql</span></span><br><span class="line">        # 结构</span><br><span class="line">        mysql<span class="operator">&gt;</span> <span class="keyword">select</span> sal,comm <span class="keyword">from</span> emp;</span><br><span class="line">        <span class="operator">+</span><span class="comment">---------+---------+</span></span><br><span class="line">        <span class="operator">|</span> sal     <span class="operator">|</span> comm    <span class="operator">|</span></span><br><span class="line">        <span class="operator">+</span><span class="comment">---------+---------+</span></span><br><span class="line">        <span class="operator">|</span>  <span class="number">800.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span> <span class="number">1600.00</span> <span class="operator">|</span>  <span class="number">300.00</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span>  <span class="number">500.00</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span> <span class="number">2975.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span> <span class="number">1250.00</span> <span class="operator">|</span> <span class="number">1400.00</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span> <span class="number">2850.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span> <span class="number">2450.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span> <span class="number">5000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span> <span class="number">1500.00</span> <span class="operator">|</span>    <span class="number">0.00</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span> <span class="number">1100.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>  <span class="number">950.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span> <span class="number">3000.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span> <span class="number">1300.00</span> <span class="operator">|</span>    <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">+</span><span class="comment">---------+---------+</span></span><br><span class="line">        <span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">        # 测试</span><br><span class="line">        mysql<span class="operator">&gt;</span> <span class="keyword">select</span> sal<span class="operator">+</span>comm <span class="keyword">from</span> emp;</span><br><span class="line">        <span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line">        <span class="operator">|</span> sal<span class="operator">+</span>comm <span class="operator">|</span></span><br><span class="line">        <span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line">        <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>  <span class="number">1900.00</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>  <span class="number">1750.00</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>  <span class="number">2650.00</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>  <span class="number">1500.00</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line">        <span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line">        <span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">3. 解决办法-----&gt; 使用 ifnull 进行处理,将null转换为一个具体的数值 ifnull(字段,转换的值)</span><br><span class="line">   ```sql</span><br><span class="line">   mysql&gt; select sal+ ifnull(comm,0) from emp;</span><br><span class="line">   +---------------------+</span><br><span class="line">   | sal+ ifnull(comm,0) |</span><br><span class="line">   +---------------------+</span><br><span class="line">   |              800.00 |</span><br><span class="line">   |             1900.00 |</span><br><span class="line">   |             1750.00 |</span><br><span class="line">   |             2975.00 |</span><br><span class="line">   |             2650.00 |</span><br><span class="line">   |             2850.00 |</span><br><span class="line">   |             2450.00 |</span><br><span class="line">   |             3000.00 |</span><br><span class="line">   |             5000.00 |</span><br><span class="line">   |             1500.00 |</span><br><span class="line">   |             1100.00 |</span><br><span class="line">   |              950.00 |</span><br><span class="line">   |             3000.00 |</span><br><span class="line">   |             1300.00 |</span><br><span class="line">   +---------------------+</span><br><span class="line">   14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="二、MYSQL8-中修改密码"><a href="#二、MYSQL8-中修改密码" class="headerlink" title="二、MYSQL8 中修改密码"></a>二、MYSQL8 中修改密码</h2><blockquote><p>这里需要注意，mysql8 后取消了PASSWORD()函数。即不能用传统的含有password函数的方法进行修改。</p></blockquote><h3 id="MySQL8-可行的方案"><a href="#MySQL8-可行的方案" class="headerlink" title="MySQL8 可行的方案"></a>MySQL8 可行的方案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ##设置认证密钥为空 ,该字段是加密的，无法直接修改</span><br><span class="line">1.UPDATE user SET authentication_string=&quot;&quot; WHERE user=&quot;root&quot;;</span><br><span class="line">##2.修改密码</span><br><span class="line">2.ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;newPassword&#x27;;</span><br><span class="line">##刷新权限</span><br><span class="line">3.flush privilege</span><br></pre></td></tr></table></figure><h3 id="传统方法（在mysql8及以上已经不适用）"><a href="#传统方法（在mysql8及以上已经不适用）" class="headerlink" title="传统方法（在mysql8及以上已经不适用）"></a>传统方法（在mysql8及以上已经不适用）</h3><ol><li>通过mysqladmin修改密码</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p password &quot;newpassword&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>修改mysql数据库的user表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE mysql.user set authentication_string = PASSWORD (&quot;newpassword) WHERE User = &quot;root&quot; and Host=&quot;localhost&quot;;</span><br></pre></td></tr></table></figure></li><li><p>通过SET语句修改密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD (&quot;rootpwd&quot;);：</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL基本语句</title>
      <link href="/2022/10/18/MySQL/2-sql%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5/"/>
      <url>/2022/10/18/MySQL/2-sql%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="一、数据库"><a href="#一、数据库" class="headerlink" title="一、数据库"></a>一、数据库</h3><blockquote><p>什么是数据库？什么是数据库管理系统？什么是SQL？他们之间的关系是什么？</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">数据库：</span><br><span class="line">英文单词DataBase，简称DB。按照一定格式存储数据的一些文件的组合。</span><br><span class="line">顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了具有特定格式的数据。</span><br><span class="line">数据库管理系统：</span><br><span class="line">DataBaseManagement，简称DBMS。</span><br><span class="line">数据库管理系统是专门用来管理数据库中数据的，数据库管理系统可以对数据库当中的数据进行增删改查。</span><br><span class="line">常见的数据库管理系统：</span><br><span class="line">MySQL、Oracle、MS SqlServer、DB2、sybase等....</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>简要来说就是程序猿通过sql语句–&gt;操控DBMS—-&gt;操作数据库</p></blockquote><h3 id="二、SQL"><a href="#二、SQL" class="headerlink" title="二、SQL"></a>二、SQL</h3><ol><li>三者之间的简要关系</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">程序员需要学习SQL语句，程序员通过编写SQL语句，然后DBMS负责执行SQL语句，最终来完成数据库中数据的增删改查操作。</span><br><span class="line">SQL是一套标准，程序员主要学习的就是SQL语句，这个SQL在mysql中可以使用，</span><br><span class="line">同时在Oracle中也可以使用，在DB2中也可以使用。</span><br><span class="line"></span><br><span class="line">三者之间的关系？</span><br><span class="line">DBMS--执行--&gt; SQL --操作--&gt; DB</span><br><span class="line"></span><br><span class="line">先安装数据库管理系统MySQL，然后学习SQL语句怎么写，编写SQL语句之后，DBMS</span><br><span class="line">对SQL语句进行执行，最终来完成数据库的数据管理。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>SQL语句的分类</p><ol><li>DQL：<br>    数据查询语言（凡是带有select关键字的都是查询语句）<br>       select…</li><li>DML：<br>数据操作语言（凡是对表当中的数据进行增删改的都是DML）<br>insert delete update<br>insert 增<br>delete 删<br>update 改<br>这个主要是操作表中的数据data。</li><li>DDL：<br>数据定义语言<br>凡是带有create、drop、alter的都是DDL。<br>DDL主要操作的是表的结构。不是表中的数据。<br>create：新建，等同于增<br>drop：删除<br>alter：修改<br>这个增删改和DML不同，这个主要是对表结构进行操作。</li><li>TCL：<br>是事务控制语言<br>包括：<br>事务提交：commit;<br>事务回滚：rollback;</li><li>DCL：<br>是数据控制语言。<br>例如：授权grant、撤销权限revoke….</li></ol></li><li><p>MySQL常用命令</p><ol><li><p>查看当前的mysql数据库版本</p><ol><li>select version();</li></ol></li><li><p>登入账号</p><ol><li>mysql -u root -p</li></ol></li><li><p>查看mysql中有哪些数据库 : show databases;  </p><ol><li><blockquote><p>#注意：以分号结尾，分号是英文的分号。</p></blockquote></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> databases</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>选择使用某个数据库:。</p><ol><li>mysql&gt; use mysql; <ol><li>Database changed 表示正在使用一个名字叫做test的数据库。</li><li></li></ol></li></ol></li><li><p>创建数据库 </p><ol><li>create databases  xxxxx</li><li>show databases</li></ol></li><li><p>查看某个数据库下有哪些表</p><ol><li>show tables</li><li>*必须选择了某个数据库后才能使用</li></ol></li><li><p>查看当前选择的数据库</p><ol><li>select database();</li></ol></li><li><p>查看表的结构</p><ol><li>&#96;&#96;&#96;mysql<br>mysql&gt; desc servers;<br>+————-+———–+——+—–+———+——-+<br>| Field       | Type      | Null | Key | Default | Extra |<br>+————-+———–+——+—–+———+——-+<br>| Server_name | char(64)  | NO   | PRI |         |       |<br>| Host        | char(255) | NO   |     |         |       |<br>| Db          | char(64)  | NO   |     |         |       |<br>| Username    | char(64)  | NO   |     |         |       |<br>| Password    | char(64)  | NO   |     |         |       |<br>| Port        | int       | NO   |     | 0       |       |<br>| Socket      | char(64)  | NO   |     |         |       |<br>| Wrapper     | char(64)  | NO   |     |         |       |<br>| Owner       | char(64)  | NO   |     |         |       |<br>+————-+———–+——+—–+———+——-+<br>9 rows in set (0.02 sec)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">9. 导入.sql文件</span><br><span class="line"></span><br><span class="line">   1. 需要创建一个数据库 create database xxxx;</span><br><span class="line"></span><br><span class="line">   2. 选中该数据库 use xxxx;</span><br><span class="line"></span><br><span class="line">   3. source + 路径   ==不需要;==</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">10. 终止上一条语句</span><br><span class="line"></span><br><span class="line">   1. \c</span><br><span class="line">   2. Ctrl +cz</span><br><span class="line"></span><br><span class="line">11. 退出mysql</span><br><span class="line"></span><br><span class="line">    1. exit</span><br><span class="line"></span><br><span class="line">12. 备份与恢复</span><br><span class="line"></span><br><span class="line">    ```sql</span><br><span class="line">    备份--&gt; dos下执行</span><br><span class="line">    mysqldump -u 用户名 -p -B 数据库1 数据库2 &gt; 路径/文件名</span><br><span class="line">    </span><br><span class="line">    恢复数据库</span><br><span class="line">    Source 文件名.sql</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>13.删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="三、数据库表"><a href="#三、数据库表" class="headerlink" title="三、数据库表"></a>三、数据库表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">数据库当中最基本的单元是表：<span class="keyword">table</span></span><br><span class="line"></span><br><span class="line">什么是表<span class="keyword">table</span>？为什么用表来存储数据呢？</span><br><span class="line"></span><br><span class="line">姓名性别年龄(列：字段) </span><br><span class="line"><span class="comment">---------------------------</span></span><br><span class="line">张三男<span class="number">20</span>            <span class="comment">-------&gt;行（记录）</span></span><br><span class="line">李四女<span class="number">21</span>            <span class="comment">-------&gt;行（记录）</span></span><br><span class="line">王五男<span class="number">22</span>            <span class="comment">-------&gt;行（记录）</span></span><br><span class="line"></span><br><span class="line">数据库当中是以表格的形式表示数据的。因为表比较直观。</span><br><span class="line"></span><br><span class="line">任何一张表都有行和列：</span><br><span class="line">行（<span class="type">row</span>）：被称为数据<span class="operator">/</span>记录。</span><br><span class="line">列（<span class="keyword">column</span>）：被称为字段。</span><br><span class="line">        </span><br><span class="line">姓名字段、性别字段、年龄字段。</span><br><span class="line"></span><br><span class="line">了解一下：</span><br><span class="line">每一个字段都有：字段名、数据类型、约束等属性。字段名可以理解，是一个普通的名字，见名知意就行。</span><br><span class="line">数据类型：字符串，数字，日期等，后期讲。</span><br><span class="line">约束：约束也有很多，其中一个叫做唯一性约束，这种约束添加之后，该字段中的数据不能重复。</span><br></pre></td></tr></table></figure><ol><li><p>简单查询</p><ol><li><p>select 字段名 from 表名;</p><ol><li><p># 其中要注意：select和from都是关键字。</p></li><li><p>#字段名和表名都是标识符。</p></li><li><p>强调：对于SQL语句来说，是通用的，所有的SQL语句以“;”结尾。  SQL语句不区分大小写.</p></li><li><blockquote><p>select * from 表名 表示查询所有数据</p></blockquote></li><li><p>&#96;&#96;&#96;mysql<br> mysql&gt; select DNAME from dept;<br> +————+<br> | DNAME      |<br> +————+<br> | ACCOUNTING |<br> | RESEARCH   |<br> | SALES      |<br> | OPERATIONS |<br> +————+<br> 4 rows in set (0.00 sec)</p></li></ol></li><li><p>查询多个字段,使用逗号隔开所要查询的字段,</p><ol><li>&#96;&#96;&#96;&#96;mysql<br>mysql&gt; select DNAME,LOC from dept;<br>+————+———-+<br>| DNAME      | LOC      |<br>+————+———-+<br>| ACCOUNTING | NEW YORK |<br>| RESEARCH   | DALLAS   |<br>| SALES      | CHICAGO  |<br>| OPERATIONS | BOSTON   |<br>+————+———-+<br>4 rows in set (0.00 sec)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">    3. 查询所有</span><br><span class="line">          1. 把所有字段都写上</span><br><span class="line">          2. 使用*</span><br><span class="line">              1. select * from 表名 表示查询所有数据</span><br><span class="line">              2. 缺点:</span><br><span class="line">                    1. 效率低</span><br><span class="line">                    2. 可读性差</span><br><span class="line">                    3. 在实际开发中不建议.</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 给查询列起别名</span><br><span class="line"></span><br><span class="line">   &gt; 记住：select语句是永远都不会进行修改操作的。（因为只负责查询）</span><br><span class="line"></span><br><span class="line">   1. 给查询的列起别名：使用as关键字起别名。</span><br><span class="line"></span><br><span class="line">      1. ```mysql</span><br><span class="line">          mysql&gt; select deptno,dname as deptname from dept;</span><br><span class="line">               +--------+------------+</span><br><span class="line">               | deptno | deptname   |</span><br><span class="line">               +--------+------------+</span><br><span class="line">               |     10 | ACCOUNTING |</span><br><span class="line">               |     20 | RESEARCH   |</span><br><span class="line">               |     30 | SALES      |</span><br><span class="line">               |     40 | OPERATIONS |</span><br><span class="line">               +--------+------------+</span><br><span class="line"></span><br><span class="line">   2. 只是将显示结果列明显示为deptname,原表列名还是叫dname.</span><br><span class="line"></span><br><span class="line">   3. as可以省略,使用空格代替</span><br><span class="line"></span><br><span class="line">      4. 假设起名的时候,别名有空格怎么办</span><br><span class="line"></span><br><span class="line">          1. 使用单\双 引号括起来 </span><br><span class="line"></span><br><span class="line">          2. 注意</span><br><span class="line">              1. 在所有的数据库中,字符串统一使用单引号括起来，==单引号==是标准,双引号在Oracle数据库中使用不了。但是在mysql中可以是使用</span><br><span class="line"></span><br><span class="line">          3. ```sql</span><br><span class="line">              mysql&gt; select DNAME as &#x27;test name&#x27; from dept;</span><br><span class="line">              +------------+</span><br><span class="line">              | test name  |</span><br><span class="line">              +------------+</span><br><span class="line">              | ACCOUNTING |</span><br><span class="line">              | RESEARCH   |</span><br><span class="line">              | SALES      |</span><br><span class="line">              | OPERATIONS |</span><br><span class="line">              +------------+</span><br><span class="line">              4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>列表计算</p><pre><code>1. +-*/  ---&gt; 字段\*12122. ```mysql</code></pre><p>  mysql&gt; select ename,sal*12 as yearsal from emp;<br>  +——–+———-+<br>  | ename  | yearsal  |<br>  +——–+———-+<br>  | SMITH  |  9600.00 |<br>  | ALLEN  | 19200.00 |<br>  | WARD   | 15000.00 |<br>  | JONES  | 35700.00 |<br>  | MARTIN | 15000.00 |<br>  | BLAKE  | 34200.00 |<br>  | CLARK  | 29400.00 |<br>  | SCOTT  | 36000.00 |<br>  | KING   | 60000.00 |<br>  | TURNER | 18000.00 |<br>  | ADAMS  | 13200.00 |<br>  | JAMES  | 11400.00 |<br>  | FORD   | 36000.00 |<br>  | MILLER | 15600.00 |<br>  +——–+———-+<br>  14 rows in set (0.00 sec)</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">   5. 条件查询</span><br><span class="line"></span><br><span class="line">          1. 不是将表中所有数据都查出来。是查询出来符合条件的。</span><br><span class="line"></span><br><span class="line">          2. 查询语法格式</span><br><span class="line"></span><br><span class="line">         1. ```mysql</span><br><span class="line">            查询语法格式：</span><br><span class="line">                select</span><br><span class="line">                  字段1,字段2,字段3....</span><br><span class="line">                from </span><br><span class="line">                  表名</span><br><span class="line">                where</span><br><span class="line">                  条件;</span><br></pre></td></tr></table></figure><pre><code>3. 条件符号</code></pre><ol><li><p>插叙相等 &#x3D;</p><ol><li>&#96;&#96;&#96;sql<br>字符<br>mysql&gt; select empno,ename,sal from emp where ename &#x3D; ‘smith’;<br>+——-+——-+——–+<br>| empno | ename | sal    |<br>+——-+——-+——–+<br>|  7369 | SMITH | 800.00 |<br>+——-+——-+——–+<br>1 row in set (0.00 sec)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    2. </span><br><span class="line"></span><br><span class="line">2. 不等于&lt;&gt;(sql中特殊的) / !=</span><br><span class="line"></span><br><span class="line">3. &lt; 小于 &lt;=小于等于 &gt;大于, &gt;=大于等于</span><br><span class="line"></span><br><span class="line">4. 取区间</span><br><span class="line"></span><br><span class="line">    1. between ...... and............两个值中间 </span><br><span class="line"></span><br><span class="line">        1. 必须遵循``左小右大``,否则什么都查不到</span><br><span class="line">        2. between两端都是==闭区间==</span><br><span class="line"></span><br><span class="line">    2.  以上等同------==&gt;   ==&gt;= .....&lt;=....==</span><br><span class="line"></span><br><span class="line">    3. ```sql</span><br><span class="line">       mysql&gt; select empno,ename,sal from emp where sal between 800 and 2000;</span><br><span class="line">       +-------+--------+---------+</span><br><span class="line">       | empno | ename  | sal     |</span><br><span class="line">       +-------+--------+---------+</span><br><span class="line">       |  7369 | SMITH  |  800.00 |</span><br><span class="line">       |  7499 | ALLEN  | 1600.00 |</span><br><span class="line">       |  7521 | WARD   | 1250.00 |</span><br><span class="line">       |  7654 | MARTIN | 1250.00 |</span><br><span class="line">       |  7844 | TURNER | 1500.00 |</span><br><span class="line">       |  7876 | ADAMS  | 1100.00 |</span><br><span class="line">       |  7900 | JAMES  |  950.00 |</span><br><span class="line">       |  7934 | MILLER | 1300.00 |</span><br><span class="line">       +-------+--------+---------+</span><br><span class="line">       8 rows in set (0.00 sec)</span><br><span class="line">       </span><br><span class="line">       mysql&gt; select empno,ename,sal from emp where sal &gt;=800 and sal &lt;=2000;</span><br><span class="line">       +-------+--------+---------+</span><br><span class="line">       | empno | ename  | sal     |</span><br><span class="line">       +-------+--------+---------+</span><br><span class="line">       |  7369 | SMITH  |  800.00 |</span><br><span class="line">       |  7499 | ALLEN  | 1600.00 |</span><br><span class="line">       |  7521 | WARD   | 1250.00 |</span><br><span class="line">       |  7654 | MARTIN | 1250.00 |</span><br><span class="line">       |  7844 | TURNER | 1500.00 |</span><br><span class="line">       |  7876 | ADAMS  | 1100.00 |</span><br><span class="line">       |  7900 | JAMES  |  950.00 |</span><br><span class="line">       |  7934 | MILLER | 1300.00 |</span><br><span class="line">       +-------+--------+---------+</span><br><span class="line">       8 rows in set (0.00 sec)</span><br><span class="line">       </span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><hr><ol start="6"><li><p>&#x3D;&#x3D;查询空值&#x3D;&#x3D;</p><ol><li><p>注意:在数据库中 null 不能使用等号进行衡量,需要使用 is null 来进行判断.因为数据库中的 null 代表什么也没有，它并不是一个值，所以不能使用等号衡量。</p></li><li><p>即这种写法是错误的</p><ol><li>select ename,empno,comm from emp where comm &#x3D; null;</li></ol></li><li><p>&#96;&#96;&#96;sql<br>mysql&gt; select ename,empno,comm from emp where comm is null;<br>+——–+——-+——+<br>| ename  | empno | comm |<br>+——–+——-+——+<br>| SMITH  |  7369 | NULL |<br>| JONES  |  7566 | NULL |<br>| BLAKE  |  7698 | NULL |<br>| CLARK  |  7782 | NULL |<br>| SCOTT  |  7788 | NULL |<br>| KING   |  7839 | NULL |<br>| ADAMS  |  7876 | NULL |<br>| JAMES  |  7900 | NULL |<br>| FORD   |  7902 | NULL |<br>| MILLER |  7934 | NULL |<br>+——–+——-+——+<br>10 rows in set (0.00 sec)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">7. ==查询非空值==</span><br><span class="line"></span><br><span class="line">     1. ```sql</span><br><span class="line">     mysql&gt; select ename,empno,comm from emp where comm is not null;</span><br><span class="line">     +--------+-------+---------+</span><br><span class="line">     | ename  | empno | comm    |</span><br><span class="line">     +--------+-------+---------+</span><br><span class="line">     | ALLEN  |  7499 |  300.00 |</span><br><span class="line">     | WARD   |  7521 |  500.00 |</span><br><span class="line">     | MARTIN |  7654 | 1400.00 |</span><br><span class="line">     | TURNER |  7844 |    0.00 |</span><br><span class="line">     +--------+-------+---------+</span><br><span class="line">     4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ol></li></ol><pre><code>1. 并且 and2. 或 or</code></pre><ol start="8"><li><p>一些问题</p><ol><li><p>如果and 和or 同时出现,有优先级问题吗</p><ol><li><p>查询工资大于2500,并且部门编号为10&#x2F;20的员工</p><ol><li>&#96;&#96;&#96;sql<br> 数据：<br> 试验：<br> mysql&gt; select ename,sal,deptno from emp where sal&gt;2500 and deptno&#x3D;20 or deptno&#x3D;10;<br> +——–+———+——–+<br> | ename  | sal     | deptno |<br> +——–+———+——–+<br> | JONES  | 2975.00 |     20 |<br> | CLARK  | 2450.00 |     10 |<br> | SCOTT  | 3000.00 |     20 |<br> | KING   | 5000.00 |     10 |<br> | FORD   | 3000.00 |     20 |<br> | MILLER | 1300.00 |     10 |<br> +——–+———+——–+<br> 6 rows in set (0.00 sec)</li></ol><pre><code>× sql 会先执行and，即sal&gt;2500，deptno=20，然后最后或deptn=10的，所以这里出现了sal小于2500的，但deptn=10的数据；正确写法：添加小括号mysql&gt; select ename,sal,deptno from emp where sal&gt;2500 and (deptno=20 or deptno=10);+-------+---------+--------+| ename | sal     | deptno |+-------+---------+--------+| JONES | 2975.00 |     20 || SCOTT | 3000.00 |     20 || KING  | 5000.00 |     10 || FORD  | 3000.00 |     20 |+-------+---------+--------+4 rows in set (0.00 sec)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 有！！！需要添加小括号</span><br><span class="line"></span><br><span class="line">     1. ```sql</span><br><span class="line">       mysql&gt; select ename,sal,deptno from emp where sal&gt;2500 and (deptno=20 or deptno=10);</span><br></pre></td></tr></table></figure></code></pre><ol start="3"><li>and和or同时出现，and优先级较高。如果想让or先执行，需要加小括号。</li></ol></li></ol></li></ol></li><li><p>in 包含</p></li><li><p>in不是一个区间，in后面跟的是一个具体的值的合集。</p></li><li><p>mysql&gt; select * from emp where deptno in(10,20);</p></li><li><p>不包含 not in</p></li><li><p>&#x3D;&#x3D;模糊查询like&#x3D;&#x3D;</p><ol><li><p>模糊查询，支持%或_进行查询</p><ol><li>%代表任意多个字符(n个__)</li><li>_代表任意一个字符</li></ol></li></ol></li><li><p>案例</p><ol><li><p>找出名字中含有T的</p><ol><li><pre><code class="sql">mysql&gt; select * from emp where ename like &#39;%T%&#39;;+-------+--------+----------+------+------------+---------+---------+--------+| EMPNO | ENAME  | JOB      | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |+-------+--------+----------+------+------------+---------+---------+--------+|  7369 | SMITH  | CLERK    | 7902 | 1980-12-17 |  800.00 |    NULL |     20 ||  7654 | MARTIN | SALESMAN | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 ||  7788 | SCOTT  | ANALYST  | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 ||  7844 | TURNER | SALESMAN | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |+-------+--------+----------+------+------------+---------+---------+--------+4 rows in set (0.00 sec)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 以T结尾的</span><br><span class="line"></span><br><span class="line">   1. ```sql</span><br><span class="line">      mysql&gt; select ename,job from emp where ename like &#x27;%T&#x27;;</span><br><span class="line">      +-------+---------+</span><br><span class="line">      | ename | job     |</span><br><span class="line">      +-------+---------+</span><br><span class="line">      | SCOTT | ANALYST |</span><br><span class="line">      +-------+---------+</span><br><span class="line">      1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>找出名字第三个为O的</p><ol><li>&#96;&#96;&#96;sql<br>mysql&gt; select ename,job from emp where ename like ‘__O%’;<br>+——-+———+<br>| ename | job     |<br>+——-+———+<br>| SCOTT | ANALYST |<br>+——-+———+<br>1 row in set (0.00 sec)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">       4. 找到名字中含有_的</span><br><span class="line"></span><br><span class="line">          1. 使用转义字符将_的本义去除</span><br><span class="line">             1. select name from student where like &#x27;%\_%&#x27;</span><br><span class="line"></span><br><span class="line">15. 排序 order by</span><br><span class="line"></span><br><span class="line">    1. 语法格式</span><br><span class="line"></span><br><span class="line">       1. ```sql</span><br><span class="line">          select </span><br><span class="line">          ename,sal</span><br><span class="line">          from</span><br><span class="line">          emp</span><br><span class="line">          order by</span><br><span class="line">          sal desc;</span><br><span class="line">          desc:降序</span><br><span class="line">          asc:升序（默认）</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>多字段排序</p><ol><li>&#96;&#96;&#96;sql<br>以两个字段排序吗？或者说按照多个字段排序？<br>查询员工名字和薪资，要求按照薪资升序，如果薪资一样的话，再按照名字升序排列。<br>select<br>ename,sal<br>from<br>emp<br>order by<br>sal asc, ename asc; &#x2F;&#x2F; sal在前，起主导，只有sal相等的时候，才会考虑启用ename排序。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. ~~按字段位置排序（不推荐）~~</span><br><span class="line"></span><br><span class="line">   1. ```sql</span><br><span class="line">      select ename,sal from emp order by 2;</span><br><span class="line">      按照表中第二个位置的字段进行排序，默认为升序</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>综合案例</p><ol><li><p>从emp中查询ename和sal字段，并筛选出sal大于1000的字段，并降序处理</p><ol><li><pre><code class="sql">select--from--where--order by--mysql&gt; select ename,sal from emp where sal&gt;1000 order by sal desc;+--------+---------+| ename  | sal     |+--------+---------+| KING   | 5000.00 || SCOTT  | 3000.00 || FORD   | 3000.00 || JONES  | 2975.00 || BLAKE  | 2850.00 || CLARK  | 2450.00 || ALLEN  | 1600.00 || TURNER | 1500.00 || MILLER | 1300.00 || WARD   | 1250.00 || MARTIN | 1250.00 || ADAMS  | 1100.00 |+--------+---------+12 rows in set (0.00 sec)</code></pre></li></ol></li></ol></li><li><p>$$</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装mysql</title>
      <link href="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>[TOC]</p><h2 id="一、下载-MySQL"><a href="#一、下载-MySQL" class="headerlink" title="一、下载 MySQL"></a>一、下载 MySQL</h2><ol><li>打开mysql官网<a href="https://www.mysql.com/downloads/">MySQL :: MySQL Downloads</a>，选择 GPL版本下载<ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017232115705.png" alt="image-20221017232115705"></li></ol></li></ol><h2 id="二、安装MySQL"><a href="#二、安装MySQL" class="headerlink" title="二、安装MySQL"></a>二、安装MySQL</h2><ol><li><p>选择安装类型</p><ol><li><h3 id="1-选择设置类型"><a href="#1-选择设置类型" class="headerlink" title="***1. 选择设置类型*****"></a><em>*<em>*</em>*1. 选择设置类型****</em>*</h3><p>“Developer Default”是开发者默认；</p><p>“Server only”仅作为服务器安装；</p><p>“Clientonly”仅作为客户端安装；</p><p>“Full”是完整安装；</p><p>“Custom”是自定义安装；</p></li><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017233008602.png" alt="image-20221017233008602"></p></li></ol></li><li><p>一路下一步即可</p></li><li><p>这里选择设置密码</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017233934424.png" alt="image-20221017233934424"></li></ol></li><li><p>设置密码</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234054198.png" alt="image-20221017234054198"></li></ol></li><li><p>选择账户</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234302264.png" alt="image-20221017234302264"></li></ol></li><li><p>配置权限</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234527109.png" alt="image-20221017234527109"></li></ol></li><li><p>执行一些配置</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234735958.png" alt="image-20221017234735958"></li></ol></li><li><p>配置mysql router（直接默认即可）</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234710589.png" alt="image-20221017234710589"></li></ol></li><li><p>链接测试server，输入第三步中设置的密码</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234835921.png" alt="image-20221017234835921"></li></ol></li><li><p>最后完成，出现cmd窗口和mysql workbench则成功</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017235021486.png" alt="image-20221017235021486"></li></ol></li><li><p>配置系统Path变量</p><ol><li><p>找到mysql的安装路径，默认为</p><ol><li><pre><code>C:\Program Files\MySQL\MySQL Server 8.0\bin</code></pre></li></ol></li><li><p>打开系统变量 此电脑右键属性—–&gt;关于–&gt;高级系统设置—–&gt;高级—–&gt;环境变量—&gt;选择Path,编辑—&gt;新建，把mysql的安装路径粘贴</p><ol><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000240473.png" alt="image-20221018000240473"></p></li><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000321376.png" alt="image-20221018000321376"></p></li><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000415838.png" alt="image-20221018000415838"></p></li><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000451402.png" alt="image-20221018000451402"></p></li></ol></li><li><p>按键  win+R ,输入cmd ，然后输入myssql，有反应即正常</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000826285.png" alt="image-20221018000826285"></li></ol></li></ol></li></ol><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/17/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/5-%E7%BB%A7%E6%89%BF/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99/"/>
      <url>/2022/10/17/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/5-%E7%BB%A7%E6%89%BF/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h3 id="一、方法重写"><a href="#一、方法重写" class="headerlink" title="一、方法重写"></a>一、方法重写</h3><p>方法重写也叫方法覆盖，需要满足下面的条件</p><blockquote><p>重写是子类对&#x3D;&#x3D;父类的允许访问的方法&#x3D;&#x3D;的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！</p><blockquote><p>这里可以解释为什么 private 方法不能被重写，因为private 方法不能被子类访问。</p></blockquote></blockquote><ol><li><p>子类的方法&#x3D;&#x3D;参数，方法名&#x3D;&#x3D;，要和父类的参数，方法名称完全一样。</p><ol><li>参数（个数&#x2F;类别，顺序都要一样），&#x3D;&#x3D;否则就是方法的多态&#x3D;&#x3D;，而不构成重写！</li></ol></li><li><p>子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类。</p><ol><li><p>eg: 父类返回的类型是Object,子类方法返回类型是 String</p><ol><li><p>正确—-&gt;public Object getinfo()  public String getinfo()</p></li><li><p>错误举例</p><ol><li>&#96;&#96;&#96;java<br>class  hello{<br>    public String say (String name){}<br>}<br>class  t extends hello{<br>    public Object say(String age){<br><br>    }<br>}<br>error:<br>say(String)’ in ‘com.jhfuture.object.Person.t’ clashes with ‘say(String)’ in ‘com.jhfuture.object.Person.hello’; attempting to use incompatible return type<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">      </span><br><span class="line">      3. </span><br><span class="line"></span><br><span class="line">3. 子类方法不能缩小父类方法的==访问权限==</span><br><span class="line">   1. 父类： void sayOk()   子类：public void sayOk() </span><br><span class="line"></span><br><span class="line">      1. ```java</span><br><span class="line">          class  hello&#123;</span><br><span class="line">                 public void say (String name)&#123;&#125;</span><br><span class="line">             &#125;</span><br><span class="line">             class  t extends hello&#123;</span><br><span class="line">                 private void say(String age)&#123;</span><br><span class="line">            </span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         ---&gt;报错</span><br><span class="line">            erro: &#x27;say(String)&#x27; in &#x27;com.jhfuture.object.Person.t&#x27; clashes with &#x27;say(String)&#x27; in &#x27;com.jhfuture.object.Person.hello&#x27;; attempting to assign weaker access privileges (&#x27;private&#x27;); was &#x27;public&#x27;</span><br></pre></td></tr></table></figure></li></ol></li><li></li></ol></li><li><p>默认—-&gt; public   public&gt;protected&gt; 默认&gt; private</p></li></ol></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>方法重写时，需要注意两个重要点，1是访问权限，2.返回类型，不同则报错。最后一个为参数，如果不同则只是方法的重载。</li><li>private 修饰的方法不能被重写，因为 在重写的概念中，需要 是 子类具有的父类的允许访问方法。private 修饰了那前提条件就不满足了。</li><li>static 修饰的方法也&#x3D;&#x3D;不会被覆盖&#x3D;&#x3D;。</li></ol><blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/16/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/5-%E7%BB%A7%E6%89%BF/2-%E7%BB%A7%E6%89%BF%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
      <url>/2022/10/16/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/5-%E7%BB%A7%E6%89%BF/2-%E7%BB%A7%E6%89%BF%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class ExtendTheory&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">     Son son=new Son();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class  GrandPa&#123;</span><br><span class="line">    String name=&quot;大头爷爷&quot;;</span><br><span class="line">&#125;</span><br><span class="line">class Father extends  GrandPa &#123;</span><br><span class="line">    String name=&quot;大头爸爸&quot;;</span><br><span class="line">&#125;</span><br><span class="line">class Son extends Father&#123;</span><br><span class="line">    String name=&quot;大头儿子&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先加载类信息&#x3D;&#x3D;从父类开始逐级向下&#x3D;&#x3D;&gt;GrandPa信息–&gt;  Father—-&gt;son</li><li>在堆中开辟 内存空间 —-&gt; 储存GrandPa—&gt;储存 Father—&gt;储存son</li></ol><p><img src="/2022/10/16/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/5-%E7%BB%A7%E6%89%BF/2-%E7%BB%A7%E6%89%BF%E7%9A%84%E6%9C%AC%E8%B4%A8/image-20221016163319682.png" alt="image-20221016163319682"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/"/>
      <url>/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows内存优化"><a href="#Windows内存优化" class="headerlink" title="Windows内存优化"></a>Windows内存优化</h2><h3 id="一、fetch"><a href="#一、fetch" class="headerlink" title="一、fetch"></a>一、fetch</h3><p>a)</p><p>​简介：</p><p>超级预读是系统会根据用户的使用习惯，将经常使用的程序和文件预加载到空闲的物理内存中，从而总体提高系统的速度。</p><p>b)操作</p><ol><li>打开注册表编辑器 Win+R—&gt; regedit</li><li>打开路径</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters</span><br></pre></td></tr></table></figure><ol start="3"><li><p>修改</p><ol><li><p>- 0 – 禁用</p><p>- 1 – 启用应用程序预读</p><p>- 2 – 启用系统引导预读</p><p>- 3 – 启用应用程序和系统引导预读</p></li></ol><p><img src="/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/image-20221014180556322.png" alt="image-20221014180556322"></p></li><li><p>打开任务管理器，关闭sysmain服务</p><ol><li>ctrl+shift+Esc启动任务管理器</li><li>服务<img src="/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/image-20221014180749957.png" alt="image-20221014180749957"></li><li><img src="/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/image-20221014180809492.png" alt="image-20221014180809492">设置为禁止</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/5-%E7%BB%A7%E6%89%BF/1-%E7%BB%A7%E6%89%BF%E5%85%A5%E9%97%A8/"/>
      <url>/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/5-%E7%BB%A7%E6%89%BF/1-%E7%BB%A7%E6%89%BF%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><p><img src="/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/5-%E7%BB%A7%E6%89%BF/1-%E7%BB%A7%E6%89%BF%E5%85%A5%E9%97%A8/image-20221016144937017.png" alt="image-20221016144937017"></p><h3 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">className</span> extend furtherClassName)&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、继承的使用细节"><a href="#三、继承的使用细节" class="headerlink" title="三、继承的使用细节"></a>三、继承的使用细节</h3><ol><li><p>子类继承了所有的属性和方法，非私有的属性和方法可以直接在子类中进行访问，但是私有属性和方法不能在子类直接访问，要通过&#x3D;&#x3D;父类提供&#x3D;&#x3D;的公共方法去访问。</p></li><li><p>子类必须调用父类的构造器，完成父类的初始化</p><ol><li><blockquote><p>在子类的构造器中会有 super</p></blockquote></li></ol></li><li><p>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的<code>无参构造器</code>。如果父类没有提供无参构造器，则必须在子类的构造器中使用super去指定使用父类的哪个构造器完成对父类</p><blockquote><p>如果父类中没有构造器，那编译器会自动添加一个空的同名构造器，如果父类中有其他构造器，则编译器不会创建空形参的同名构造器。</p><p>则下面这段代码就会报错</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String n1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  String n2;</span><br><span class="line">String n3=<span class="string">&quot;n3&quot;</span>;</span><br><span class="line"><span class="keyword">private</span>  String n4=<span class="string">&quot;n4&quot;</span>;</span><br><span class="line">base(String name)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//缺少无参构造器的显式创建</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sub</span>  <span class="keyword">extends</span> <span class="title class_">base</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">sub</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(n1+n2+n3+getn4());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//另一个类进行调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">sub</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p style="color:red">java: 无法将类 com.jhfuture.extend.base中的构造器 base应用到给定类型;  需要: java.lang.String  找到: 没有参数  原因: 实际参数列表和形式参数列表长度不同      </p><ol start="4"><li><p>如果需要指定使用父类的构造器，在子类构造器中使用super()</p><ol><li>调用无参构造器 —–&gt; super() &#x2F;什么都不写</li><li>调用有参构造器 ——&gt; super( parameter)</li></ol></li><li><p>super在使用时，需要放在&#x3D;&#x3D;构造器的第一行&#x3D;&#x3D;（且super只能在构造器中使用)</p></li><li><p>super()和this()都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</p></li><li><p>Java所有类都是object类的子类，object是所有类的基类。</p><ol><li><img src="/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/5-%E7%BB%A7%E6%89%BF/1-%E7%BB%A7%E6%89%BF%E5%85%A5%E9%97%A8/image-20221016160315556.png" alt="image-20221016160315556"></li></ol></li><li><p>父类构造器的调用不限于直接父类！将一直往上追溯到object类（顶级父类）</p></li><li><p>子类最多只能继承一个父类（指直接继承），即java中是&#x3D;&#x3D;单继承机制&#x3D;&#x3D;</p><ol><li>思考，如何让A类继承B类和C类。</li><li>A继承B–》继承C</li></ol></li><li><p>不能滥用继承，子类和父类之间必须满足is-a的逻辑关系</p><ol><li>animal<ol><li>Cat extents Animal 合理</li></ol></li><li>Person is Music<ol><li>person extend &#x2F;&#x2F;不合理</li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/1-%E5%8C%85/"/>
      <url>/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/1-%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="一、包的本质"><a href="#一、包的本质" class="headerlink" title="一、包的本质"></a>一、包的本质</h3><p>文件夹</p><h3 id="二、导入包"><a href="#二、导入包" class="headerlink" title="二、导入包"></a>二、导入包</h3><ol><li><p>按需导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xxx.xxx.className;</span><br></pre></td></tr></table></figure></li><li><p>完整导入</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xxx.xxx</span><br></pre></td></tr></table></figure><p>三、包的注意事项</p><ol><li><p>命名规范：</p><ol><li>不能含关键字</li><li>不能以数字开头</li><li>以数字、字母、下划线组成</li></ol></li><li><p>java lang中的包是默认导入的。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/14/Windows/%E5%AE%89%E8%A3%85office2016/"/>
      <url>/2022/10/14/Windows/%E5%AE%89%E8%A3%85office2016/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/13/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FFAT/"/>
      <url>/2022/10/13/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FFAT/</url>
      
        <content type="html"><![CDATA[<p><strong>● FAT16</strong></p><p>优点：兼容性最好，某些数码设备可能对FAT32和NTFS格式的存储卡支持不太好，因此只能使用FAT16。</p><p>缺点：最大仅支持2GB分区，空间浪费大。</p><p>备注：赶紧看看U盘是不是FAT格式，如果是就改用FAT32吧！</p><p><strong>● FAT32</strong></p><p>优点：兼容性好。</p><p>缺点：单个文件不能超过4GB，不支持512MB以下容量的U盘。</p><p>备注：如果U盘容量达8GB以上，发现4GB文件拷不进去的话，可以考虑换用NTFS或ExFAT格式了。</p><p><strong>● ExFAT</strong></p><p>优点：专为闪存和U盘设计，空间浪费小。</p><p><strong>● NTFS</strong></p><p>优点：兼容性好，支持任意大小的U盘。</p><p>缺点：会缩短闪存寿命。</p><p>备注：反正U盘超便宜，不怕坏的朋友们使用NTFS其实挺好。</p><p><strong>FatFs和FAT32是什么关系？</strong></p><p>搞嵌入式的应该对FatFs并不陌生，那么肯定有人会问：<strong>FatFs和FAT32是什么关系？</strong></p><p>我们说的FatFs是指FAT Filesystem，是一个通用的文件系统(FAT&#x2F;exFAT)模块，用于在小型嵌入式系统中实现FAT文件系统。一种供MS-DOS及其它Windows操作系统对文件进行组织与管理的文件系统。</p><p>FAT 文件系统起源于 1980 年左右，是 MS-DOS 首先支持的文件系统。</p><p>而FAT32可以说是经过FatFs发展而来：</p><p>###一些操作</p><ol><li><a href="https://www.disktool.cn/jiaocheng/convert-ntfs.html">NTS格式无损数据转fat—分区助手</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装Windows系统(使用微PE)</title>
      <link href="/2022/10/13/Windows/installWindows/"/>
      <url>/2022/10/13/Windows/installWindows/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="安装-x2F-重装Windows系统"><a href="#安装-x2F-重装Windows系统" class="headerlink" title="安装&#x2F;重装Windows系统"></a>安装&#x2F;重装Windows系统</h2><p>[TOC]</p><h3 id="一、制作PE系统盘"><a href="#一、制作PE系统盘" class="headerlink" title="一、制作ＰＥ系统盘"></a>一、制作ＰＥ系统盘</h3><ol><li><p>准备好一个U盘，并备份好其中的文件(制作启动盘时会清空u盘所有文件！！！！)</p></li><li><p>下载<a href="https://www.wepe.com.cn/download.html">微PE工具箱</a></p></li><li><p>使用PE工具箱制作u盘</p><ol><li><img src="/2022/10/13/Windows/installWindows/image-20221013201439305.png" alt="image-20221013201439305"></li></ol></li><li><p>选择后点击确定</p></li></ol><h3 id="二、下载Windows镜像"><a href="#二、下载Windows镜像" class="headerlink" title="二、下载Windows镜像"></a>二、下载Windows镜像</h3><ol><li><p>打开<a href="https://msdn.itellyou.cn/">msdn下载站</a></p></li><li><p>选择操作系统镜像</p><ol><li>这里以Windows10镜像为演示<img src="/2022/10/13/Windows/installWindows/image-20221013201956842.png" alt="image-20221013201956842"></li><li>复制下载链接，并用迅雷打开<img src="/2022/10/13/Windows/installWindows/image-20221013202212437.png" alt="image-20221013202212437"></li><li>下载完成后复制到u盘中即可。</li></ol></li></ol><blockquote><p>business为企业版，consumer为零售版，x64代表64位系统，x86为32位系统</p></blockquote><p>​</p><h3 id="三、重启电脑／开启需要安装的电脑，选择从U盘启动"><a href="#三、重启电脑／开启需要安装的电脑，选择从U盘启动" class="headerlink" title="三、重启电脑／开启需要安装的电脑，选择从Ｕ盘启动"></a>三、重启电脑／开启需要安装的电脑，选择从Ｕ盘启动</h3><ol><li><p>上百度查询 &#x3D;&#x3D;xxxx电脑如何从U盘启动&#x3D;&#x3D;&#x3D;。这里以联想笔记本为例&#x3D;&#x3D;&gt; 开机时连续摁F12</p></li><li><p>进入PE后选择Windows安装器</p></li><li><p>选择第二步下载的iso镜像。<img src="/2022/10/13/Windows/installWindows/image-20221013210934557.png" alt="image-20221013210934557">&#x3D;&#x3D;》点击选择进行选择</p></li><li><p>第二栏和第三栏选择你要安装的磁盘分区即可。</p></li><li><p>显示安装完成&#x3D;&#x3D;&#x3D;&#x3D;》手动或自动重启即可。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Windows使用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/1-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/"/>
      <url>/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/1-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="方法重载："><a href="#方法重载：" class="headerlink" title="方法重载："></a>方法重载：</h2><p>即方法同名的方法：</p><p>特点：</p><ol><li>方法名相同</li><li>形参列表：必须不同（形参类型或个数或顺序，至少其中的一类不同，参数名无要求（不影响）)</li><li>返回类型：无要求&#x3D;&#x3D;&#x3D;&gt;无法形成方法重载。</li></ol><p><img src="/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/1-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/image-20221013005835441-16655939244151.png" alt="image-20221013005835441"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/07/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/10/07/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基本数据类型</p></blockquote><p>基本数据类型：</p><p>​只有值拷贝。</p><p><img src="/2022/10/07/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220720213940526.png" alt="image-20220720213940526"></p><p>内存空间：</p><blockquote><p>本质是jvm中不同方法体的栈</p></blockquote><p><img src="/2022/10/07/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220720214141265.png" alt="image-20220720214141265"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/07/IDEA/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/10/07/IDEA/%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="IDEA的相关快捷键"><a href="#IDEA的相关快捷键" class="headerlink" title="IDEA的相关快捷键"></a>IDEA的相关快捷键</h2><p>一、自带通用<br>     1. ctrl +&#x2F; 注释</p><pre><code>2. alt+/ 补全3. import  package自动导入包      1. ![image-20221007201550828](快捷键/image-20221007201550828.png)2022直接设置完即可，其他版本设置完后 ，在需要导入package的地方点击 ``alt +enter``即可4. ctrl+alt+L   格式化代码5.  alt +insert 生成构造器 6. Ctrl +H 查看一个类的层级关系    1. 将鼠标放在想要查看的类上    2. 摁下 Ctrl + H     3. 生成可视图 鼠标右键--&gt;diagrams---&gt; show diagram7. Ctrl+ B 查看方法所在的class 8. ==```.var  自动分配变量名```==    1. ``` java    new Person().var ---&gt;回车     |     |自动生成     ↓    Person Person= new Person();    ```9. Ctrl+j，显示 所有快捷键 的快捷键10.创建 try catch ---&gt; c11.全局搜索 快速点两下  shift12.所搜当前文件夹 ---&gt; Ctrl +F12</code></pre><p>​        </p><p>​        </p><p>​    </p><p>二、自定义</p><pre><code>1. ctrl+d删除当前行 ---&gt; delete1. ctrl+alt + ↓ 复制当前行 -----&gt;duplicate1. alt +R 快速运行 ---------&gt; run</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/06/vue/25-%E6%93%8D%E4%BD%9CDOM/ref/"/>
      <url>/2022/10/06/vue/25-%E6%93%8D%E4%BD%9CDOM/ref/</url>
      
        <content type="html"><![CDATA[<h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li>被用来给元素(纯粹的html元素)或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是<code>组件实例对象（vc）</code><ol><li>html标签<ol><li>使用docum.getElementByID()，与使用ref并无区别</li></ol></li><li><code>组件</code> ☸<ol><li>如果使用docum.getElementByID()，则获取的只是该DOM元素<code>&lt;div id=&quot;school&quot;&gt;&lt;h1&gt;学校名称:尚硅谷&lt;/h1&gt;&lt;/div&gt;</code></li><li>使用ref,则获取的是vc实例对象  vueCompont{xxxxxxxxxx}</li></ol></li></ol></li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/06/vue/18-%E9%9D%9E%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB/"/>
      <url>/2022/10/06/vue/18-%E9%9D%9E%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype</p><p>2.为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</p></blockquote><p>图示：</p><p>​vue在vueComponet的原型对象与vue的原型对象中加了一条线</p><p>​让vc能用到vue原型对象上的诸多优秀方法</p><p><img src="/2022/10/06/vue/18-%E9%9D%9E%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB/image-20221006214133088.png" alt="image-20221006214133088"></p><p>一、验证该关系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> school=<span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;school&quot;</span>,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;school&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span>,</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                <span class="attr">hello</span>:<span class="string">&quot;hello&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">        <span class="attr">components</span>:&#123;school,student&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内置关系成立吗&quot;</span>,school.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>===<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>二、原型链中的解释。</p><p>构造函数上的原型属性和 <code>构造器所创建的对象</code>上的隐式属性所指向的为<code>同一个原型对象</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个构造函数</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">b</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个Demo的实例对象</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Demo</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">//显示原型属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">__proto__</span>) <span class="comment">//隐式原型属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span> === d.<span class="property">__proto__</span>) <span class="comment">//t</span></span><br><span class="line">----&gt;<span class="literal">true</span>;</span><br><span class="line"><span class="comment">//程序员通过显示原型属性操作原型对象，追加一个x属性，值为99</span></span><br><span class="line"><span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">x</span> = <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>,d) </span><br></pre></td></tr></table></figure><p>二、内置关系的使用</p><ol><li>全局事件总线</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/05/JavaScript/Promise/promiseAll%E5%92%8CpromiseRace/"/>
      <url>/2022/10/05/JavaScript/Promise/promiseAll%E5%92%8CpromiseRace/</url>
      
        <content type="html"><![CDATA[<p>PromiseApi的使用</p><blockquote><p>API为处理异步操作而生</p></blockquote><blockquote><p>一、promiseAll(promiseArr)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">promiseArr</span>: 包含 n 个 promise 的数组</span><br><span class="line">  说明: 返回一个新的 promise, 只有所有的 promise<span class="string">`都成功才成功`</span>且成功的value是所有promise成功的value的数组, 只要有一    个失败了就直接失败。</span><br><span class="line">         --》并且只要检测到失败的，就##立即返回##失败的promise</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>二、Promise.Race(promiseArr)</p><p>   promiseArr: 包含 n 个 promise 的数组<br>       说明: 返回一个新的 promise, <code>第一个完成</code>的 promise 的结果状态就是最终的结果状态,<br>         和all方法一样，获取到当<code>第一个完成</code>的 promise 的结果状态，就立即返回 *&#x2F;</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="title class_">Promise</span> 构造函数：<span class="keyword">new</span> <span class="title class_">Promise</span>(executor)</span><br><span class="line">        executor 函数：是同步执行的，(resolve, reject) =&gt; &#123; &#125;</span><br><span class="line">        resolve 函数：调用 resolve 将 <span class="title class_">Promise</span> 实例内部状态改为成功(fulfiled)。</span><br><span class="line">        reject 函数：调用 reject 将 <span class="title class_">Promise</span> 实例内部状态改为失败(rejected)。</span><br><span class="line">        说明：executor 函数会在 <span class="title class_">Promise</span> 内部立即同步调用，异步代码放在 executor 函数中。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> 方法：<span class="title class_">Promise</span> 实例.<span class="title function_">then</span>(onFulfilled, onRejected)</span><br><span class="line">        onFulfilled：成功的回调函数 —— (value) =&gt; &#123; &#125;</span><br><span class="line">        onRejected：失败的回调函数 —— (reason) =&gt; &#123; &#125;</span><br><span class="line">        注意：then 方法会返回一个新的 <span class="title class_">Promise</span> 实例对象。 </span><br><span class="line">        </span><br><span class="line"><span class="number">3.</span><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">catch</span>(onRejected) 方法</span><br><span class="line">        (<span class="number">1</span>) onRejected 函数: 失败的回调函数(reason) =&gt; &#123; &#125;</span><br><span class="line">          说明: <span class="title function_">then</span>()的语法糖, 相当于: <span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">        (<span class="number">2</span>) 异常穿透使用: 当运行到最后, 没被处理的所有异常错误都会进入这个方法的回调函数中 </span><br><span class="line"> <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;失败原因&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// promise.then(</span></span><br><span class="line">    <span class="comment">//   undefined,  //成功的回调可以是undefined</span></span><br><span class="line">    <span class="comment">//   (reason) =&gt; &#123; console.log(`失败原因：$&#123;reason&#125;`); &#125;  //失败的回调必须有，否则会报错</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line">    <span class="comment">// then()的语法糖</span></span><br><span class="line">    promise.<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`失败原因：<span class="subst">$&#123;reason&#125;</span>`</span>); &#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 关于then()的成功回调为undefined问题</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;成功的value&#x27;</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(</span><br><span class="line">      <span class="literal">undefined</span>,    <span class="comment">//成功的回调undefined，但是Promise底层做了处理，加上了成功回调 value =&gt; value</span></span><br><span class="line">      <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败原因：&#x27;</span>, reason); &#125;</span><br><span class="line">    ).<span class="title function_">then</span>(</span><br><span class="line">      <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功的value：&#x27;</span>, value); &#125;,</span><br><span class="line">      <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败原因：&#x27;</span>, reason); &#125;</span><br><span class="line">    ) </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/21/JAVA/2-%E5%8E%9F%E3%80%81%E5%8F%8D%E3%80%81%E8%A1%A5%E7%A0%81/%E4%B8%89%E7%A0%81/"/>
      <url>/2022/09/21/JAVA/2-%E5%8E%9F%E3%80%81%E5%8F%8D%E3%80%81%E8%A1%A5%E7%A0%81/%E4%B8%89%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<ol><li>二进制的<code>最高位</code>是<code>符号位</code></li><li>正数的三码合一</li><li>负数的反码&#x3D;符号位不变，其他位<code>取反</code>    or  补码-1</li><li>负数的补码&#x3D;反码+1， </li><li>0的反码、补码都是0</li><li>java没有无符号数，换言之，java中的数都是有符号的。</li><li>计算机在运算时，都是以<code>补码的形式来运算</code>的</li><li>在看运算结果时，要看他的原码(!!，最终呈现的是原码)</li></ol><p><img src="/2022/09/21/JAVA/2-%E5%8E%9F%E3%80%81%E5%8F%8D%E3%80%81%E8%A1%A5%E7%A0%81/%E4%B8%89%E7%A0%81/image-20220921215536101.png" alt="image-20220921215536101"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/21/JAVA/0-Java%E7%BB%86%E8%8A%82/%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/2022/09/21/JAVA/0-Java%E7%BB%86%E8%8A%82/%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/09/21/JAVA/0-Java%E7%BB%86%E8%8A%82/%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/image-20220921214648842.png" alt="image-20220921214648842"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/21/JAVA/java%E7%9A%84%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/09/21/JAVA/java%E7%9A%84%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>java与JavaScript中的三元运算符相似，这里只说注意的地方</p></blockquote><p>TernaryoperatorDetail.Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx条件 ? 表达式<span class="number">1</span>：表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><ol><li><p>表达式1和表达式2要为可以赋给变量的类型（或可以自动转换&#x2F;或者强制换)</p><blockquote><p>自动转换 int —&gt; double</p></blockquote></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/21/JAVA/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
      <url>/2022/09/21/JAVA/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="java转义字符"><a href="#java转义字符" class="headerlink" title="java转义字符"></a>java转义字符</h1><blockquote><p>常用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\t 制表位</span><br><span class="line">    </span><br><span class="line">\n 换行</span><br><span class="line">\\ ： 一个\</span><br><span class="line">\<span class="string">&quot; ： 一个“</span></span><br><span class="line"><span class="string">\&#x27; : 一个&#x27;</span></span><br><span class="line"><span class="string">\r :一个回车</span></span><br><span class="line"><span class="string">//回车没有换行，以前的打字机在打完第一行字后，会把光标放回头部</span></span><br><span class="line"><span class="string">    </span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;韩顺平教育\r北京&quot;</span>)</span><br><span class="line">  运行顺序</span><br><span class="line">    --&gt;韩顺平教育↓(光标)</span><br><span class="line">    ---&gt;↓韩顺平教育</span><br><span class="line"> ----------&gt; 北京平教育</span><br></pre></td></tr></table></figure><blockquote><p>计算机看到一个&#x2F;时，就会判断<code>下一个字符</code>为转义的。</p><p>注意：</p><p>​ 只有<code>一个</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Eg:</span><br><span class="line"></span><br><span class="line">​<span class="comment">//如果想输出两个//</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;////hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>编译器看到第一个\时，看成是做转义的，第二个字符(有且只有一个)才是真正输出的字符。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/15/vue/23-%E6%8F%92%E4%BB%B6/2-%E8%B7%AF%E7%94%B1/%E8%B7%AF%E7%94%B1/"/>
      <url>/2022/09/15/vue/23-%E6%8F%92%E4%BB%B6/2-%E8%B7%AF%E7%94%B1/%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<p>##入门</p><ol><li>安装 npm i vue-router  (从2022&#x2F;2&#x2F;27起，vue-router 版本默认为4，只适合vue3使用，如果vue2直接安装将报依赖错误)<ol><li>npm i vue-router@3<code>(vue2)</code></li></ol></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue组件</title>
      <link href="/2022/09/15/vue%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/09/15/vue%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/15/vue/23-%E6%8F%92%E4%BB%B6/vue%E4%B8%AD%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
      <url>/2022/09/15/vue/23-%E6%8F%92%E4%BB%B6/vue%E4%B8%AD%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>vue中的插件，本质是一个包含了一个install方法的<code>==对象==</code>,install方法接受的第一个参数为<code>==vue的构造函数==</code>,其他参数为vue,use()传入的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line"></span><br><span class="line">install(vue,options)&#123;</span><br><span class="line"> // 1. 添加全局过滤器</span><br><span class="line">    Vue.filter(....)</span><br><span class="line"></span><br><span class="line">    // 2. 添加全局指令</span><br><span class="line">    Vue.directive(....)</span><br><span class="line"></span><br><span class="line">    // 3. 配置全局混入(合)</span><br><span class="line">    Vue.mixin(....)</span><br><span class="line"></span><br><span class="line">    // 4. 给vue原型上添加实例方法、添加</span><br><span class="line">    Vue.prototype.$myMethod = function () &#123;...&#125;</span><br><span class="line">    Vue.prototype.$myProperty = xxxx</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//当使用 Vue.use时，将自动调用插件中的install方法</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>导入插件(安装外挂)  import abc from xxx</li><li>使用插件(开启外挂) Vue.use(abc)</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/15/vue/21-vuecli%E8%84%9A%E6%89%8B%E6%9E%B6/vuecli/"/>
      <url>/2022/09/15/vue/21-vuecli%E8%84%9A%E6%89%8B%E6%9E%B6/vuecli/</url>
      
        <content type="html"><![CDATA[<pre><code>脚手架架构├── node_modules ├── public│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><p>初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.vue create projectName(不能使用大写字母)</span><br><span class="line">2.选择vue2/vue3</span><br><span class="line">3.创建完成</span><br><span class="line">4.编写xxxx</span><br><span class="line">5.运行 cd projectName </span><br><span class="line">6. npm run</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/13/vue/22-%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/1%E9%80%9A%E8%BF%87anxious%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/"/>
      <url>/2022/09/13/vue/22-%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/1%E9%80%9A%E8%BF%87anxious%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件中的通讯方式</title>
      <link href="/2022/09/06/vue/19-%E7%BB%84%E4%BB%B6/2-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
      <url>/2022/09/06/vue/19-%E7%BB%84%E4%BB%B6/2-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h2><p>相互的组件之间一定会进行数据交互，那一定就会用到<code>组件之间的通讯</code>。</p><ol><li>父子之间的通讯———————-&gt;a、a.1父给子，property直接传递 。a.2子给父，父先给子偷偷传递一个函数，然后子再调用该函数进行参数传递。&#x3D;&#x3D;或&#x3D;&#x3D;  a.3父给子绑定自定义函数<br>                                                                                                      b、使用全局总线<br>                                                                                           c、订阅消息</li><li>同级兄弟之间的通讯—————–&gt;a、全局总线 b、订阅消息</li><li>亲戚关系比较复制——————–&gt;  a、全局总线 b、订阅消息</li></ol><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><h3 id="１．最简单的方法的方法————–property"><a href="#１．最简单的方法的方法————–property" class="headerlink" title="１．最简单的方法的方法————–property"></a>１．最简单的方法的方法————–property</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//使用</span><br><span class="line">//父--to--&gt;子</span><br><span class="line">&lt;student  :propertyName=&quot;parameterName/functionName&quot;&gt;&lt;/student&gt;</span><br><span class="line">//子--accept--父</span><br><span class="line">props:[&quot;parameterName/functionName&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//案例</span><br><span class="line">//父组件，使用property传递参数、函数，实现父子之间通讯</span><br><span class="line"></span><br><span class="line">&lt;MyFooter :todos=&quot;todos&quot; :checkAllTodo=&quot;checkAllTodo&quot; :clearAllTodo=&quot;clearAllTodo&quot;/&gt;</span><br><span class="line"></span><br><span class="line">//子组件,通过接收property，然后收到来自父的参数，并调用函数来传递方法。</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyFooter&#x27;,</span><br><span class="line">props:[&#x27;todos&#x27;,&#x27;checkAllTodo&#x27;,&#x27;clearAllTodo&#x27;],</span><br><span class="line">computed: &#123;</span><br><span class="line">//总数</span><br><span class="line">total()&#123;</span><br><span class="line">return this.todos.length</span><br><span class="line">&#125;,</span><br><span class="line">//已完成数</span><br><span class="line">doneTotal()&#123;</span><br><span class="line">//此处使用reduce方法做条件统计</span><br><span class="line">/* const x = this.todos.reduce((pre,current)=&gt;&#123;</span><br><span class="line">console.log(&#x27;@&#x27;,pre,current)</span><br><span class="line">return pre + (current.done ? 1 : 0)</span><br><span class="line">&#125;,0) */</span><br><span class="line">//简写</span><br><span class="line">return this.todos.reduce((pre,todo)=&gt; pre + (todo.done ? 1 : 0) ,0)</span><br><span class="line">&#125;,</span><br><span class="line">//控制全选框</span><br><span class="line">isAll:&#123;</span><br><span class="line">//全选框是否勾选</span><br><span class="line">get()&#123;</span><br><span class="line">return this.doneTotal === this.total &amp;&amp; this.total &gt; 0</span><br><span class="line">&#125;,</span><br><span class="line">//isAll被修改时set被调用</span><br><span class="line">set(value)&#123;</span><br><span class="line">this.checkAllTodo(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">/* checkAll(e)&#123;</span><br><span class="line">this.checkAllTodo(e.target.checked)</span><br><span class="line">&#125; */</span><br><span class="line">//清空所有已完成</span><br><span class="line">clearAll()&#123;</span><br><span class="line">this.clearAllTodo()</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="２-使用自定义事件给子组件的实例对象的绑定事件。"><a href="#２-使用自定义事件给子组件的实例对象的绑定事件。" class="headerlink" title="２. 使用自定义事件给子组件的实例对象的绑定事件。"></a>２. 使用自定义事件给子组件的实例对象的绑定事件。</h3><blockquote><p>然后在子组件中用 <code>this.$emit(&quot;functionName&quot;,parameter)</code>进行调用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//使用</span><br><span class="line">//父--to--&gt;子</span><br><span class="line">//方法一  直接写 </span><br><span class="line">//父</span><br><span class="line">&lt;student  @functionName=&#x27;funName&#x27;&gt;&lt;/student&gt;</span><br><span class="line">//子</span><br><span class="line">this.$emit(&quot;fucNa&quot;)</span><br><span class="line">//方法二  通过ref</span><br><span class="line">//父</span><br><span class="line">&lt;student ref=&#x27;student&#x27;&gt;&lt;/student&gt;</span><br><span class="line">this.$ref.student.$on(&quot;functionName&quot;,parameterName)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//子--accept--&gt;父</span><br><span class="line">this.$emit(&quot;functionName&quot;)</span><br><span class="line">//使用emit调用即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-使用全局总线"><a href="#3-使用全局总线" class="headerlink" title="3.使用全局总线"></a>3.使用全局总线</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 在main.js中进行全局总线的挂载安装</span></span><br><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line"><span class="comment">//安装全局事件总线,尽量早的进行安装</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 在A组件中调用this.$bus.$on()绑定事件</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;School&#x27;,this)</span></span><br><span class="line">            <span class="comment">//在vc加载完成后就进行绑定</span></span><br><span class="line">   <span class="comment">// tip:</span></span><br><span class="line">      <span class="comment">//      这里也需要注意this指向的问题，如果想this指向为当前vc，就使用箭头函数/写在methods中的函数（详细看前一篇）</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;hello&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是School组件，收到了数据&#x27;</span>,data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">//</span></span><br><span class="line">            <span class="comment">//在beforedestroy是最好进行解绑 ,适当的给它减少压力</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">//3. 在B组件中调用this.$bus.$emit()调用事件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;Student&#x27;,this.x)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">sendStudentName</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;hello&#x27;</span>,<span class="variable language_">this</span>.<span class="property">name</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里简要说明一下全局总线的工作原理(及其要求)：</p><pre><code>1. 全局总线的要求: - 全部组件都能访问到 - 可以调用 this.\$on(FunctionName,function) 方法进行事件的绑定、this.\$emit(fuctionName,parameter)方法进行方法的触发</code></pre><p>​2. 一个重要的内置关系： VueComponent.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype</p><p>​        2.1 为什么要有这个关系：—-&gt;让&#x3D;&#x3D;组件实例对象（vc）&#x3D;&#x3D;可以<strong>访问</strong>到 &#x3D;&#x3D;Vue原型&#x3D;&#x3D;上的属性、方法。</p><blockquote><p>这里涉及到了一部分原型链的知识：<br>    简要说明一下： 由构造函数创建的对像（这里为vueComponet创建的vc对象），可以通过 &#x3D;&#x3D;_proto_（隐形原型）&#x3D;&#x3D;访问到构造函数上的&#x3D;&#x3D;原型&#x3D;&#x3D;</p><p>​而构造函数自身可以通过 &#x3D;&#x3D;prototype（显示原型）&#x3D;&#x3D;直接访问自身的&#x3D;&#x3D;原型对象&#x3D;&#x3D;</p><p><img src="/2022/09/06/vue/19-%E7%BB%84%E4%BB%B6/2-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/%E5%8E%9F%E5%9E%8B%E9%93%BE-16630694336681.png" alt="原型链"></p></blockquote><blockquote><p>tip:   Q:为什么不把$bus加在vc的原型上?</p><p>​A:每一个vc是由vue构造函数中的extend函数每一次调用生成的,且</p><p>​——&gt;每次调用vue.extend时,返回的都是一个<code>全新</code>的vuecomponent(即vc的构造函数)</p><p>​—-&gt; 每次的构造函数都不同（详细看18章中的介绍)</p><p>​↓以下为原型链的知识</p><p>​—原型（prototype）本质上是存在于构造函数上的一个属性，如果每一个vc的构造函数（vueComponent）都不同，那每一个vc都有一个自己的原型(prototype)。</p><p>​final：</p><p>​如果加在某一个vc的原型上，则无法让每一个vc都能访问到。</p><p>​—-&gt;加在vm的原型上，由于vm的构造器只有一个，所以原型也只有一个。</p><p>​再通过 VueComponent.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype  这个关系，则可以让每一个vc都能成功访问到。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">、</span><br><span class="line"><span class="comment">//以下为说明原型链中原型属性</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">a</span>=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个demo的实例对象</span></span><br><span class="line"><span class="keyword">const</span> d=<span class="keyword">new</span> <span class="title class_">Demo</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">//显示原型属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>)<span class="comment">//隐私原型属性</span></span><br><span class="line"><span class="comment">//两个属性指向的是同一个原型对象，显示和隐式是对属性的修饰，</span></span><br><span class="line"><span class="comment">//------&gt; 不能说“显示原型对象”/“隐式原型对象”，这样子会误以为有两个原型对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo.<span class="property"><span class="keyword">prototype</span></span>==p.<span class="property">__proto__</span>) <span class="comment">//----&gt; tr</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="4-使用订阅信息推送。"><a href="#4-使用订阅信息推送。" class="headerlink" title="4. 使用订阅信息推送。"></a>4. 使用订阅信息推送。</h3><blockquote><p>订阅消息与全局总线的原理相近，这里不展开叙说，只说明简要的使用方法</p></blockquote><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue绑定样式</title>
      <link href="/2022/09/04/vue/08-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/"/>
      <url>/2022/09/04/vue/08-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h2><ol><li><p>网页的组件元素的样式通常由 1. 绑定class，然后通过css文件书写，或者 2. 直接在标签中书写style。</p></li><li><p>如果我们想要修改样式，无非也是改动他们。在jquery&#x2F;JavaScript中我们可以通过直接操作DOM元素实现，而在vue中，vue帮我们实现了虚拟DOM的操作，使得我们可以不用去直接操作DOM来实现这个功能。</p></li><li><p>在vue中我们使用：a)class绑定与、b)style绑定进行实现</p><blockquote><p>tips :  如果原本就有class属性，那使用:class&#x3D;xxx时，只会在原来的基础上进行添加，而不会<code>覆盖</code></p></blockquote></li></ol><h2 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h2><h3 id="1-通过-class-39-xxx-39-实现、xxx可以是字符串、数组、对象。"><a href="#1-通过-class-39-xxx-39-实现、xxx可以是字符串、数组、对象。" class="headerlink" title="1. 通过:class=&#39;xxx&#39;实现、xxx可以是字符串、数组、对象。"></a>1. 通过<code>:class=&#39;xxx&#39;</code>实现、xxx可以是字符串、数组、对象。</h3><ol><li><p>通过<code>字符串</code>实现适用于：只有一个，但是类名不确定，需要<code>动态获取</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">changeMood()&#123;</span><br><span class="line">const arr = [&#x27;happy&#x27;,&#x27;sad&#x27;,&#x27;normal&#x27;]</span><br><span class="line">const index = Math.floor(Math.random()*3)</span><br><span class="line">this.mood = arr[index]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>通过<code>数组</code>实现，适用于：需要绑定多个属性，且数量未知，类名未知。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">return&#123;</span><br><span class="line">classArr:[&#x27;normal&#x27;,&#x27;bad&#x27;,&quot;good&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>通过<code>对象实现</code>，使用于：要绑定的个数确定(通常情况，但也可以添加)，类名确定，但要<code>动态决定用不用</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">return&#123;</span><br><span class="line">classObj:&#123;</span><br><span class="line">atguigu1:false,</span><br><span class="line">atguigu2:false,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-通过style实现-style-xxx-xxx可以是对象、对象数组"><a href="#2-通过style实现-style-xxx-xxx可以是对象、对象数组" class="headerlink" title="2. 通过style实现  :style={xxx},xxx可以是对象、对象数组"></a>2. 通过style实现  <code>:style=&#123;xxx&#125;</code>,xxx可以是对象、对象数组</h3><ol><li>通过配置对象</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;basic&quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">styleObj2:&#123;</span><br><span class="line">backgroundColor:&#x27;orange&#x27;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>通过数组对线</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;basic&quot; :style=&quot;styleArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">styleArr:[</span><br><span class="line">&#123;</span><br><span class="line">fontSize: &#x27;40px&#x27;,</span><br><span class="line">color:&#x27;blue&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">backgroundColor:&#x27;gray&#x27;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="scope属性"><a href="#scope属性" class="headerlink" title="scope属性"></a>scope属性</h2><blockquote><p>组件之间难免会存在相同的类名，或者id名，那怎么解决呢？，vue中为我们提供了一个scope属性，在每个组件的 <script> 中添加 scope属性，即可使</p><p><code>当前界面</code>的样式只会在<code>当前页面生效</code> </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script scope&gt;</span><br></pre></td></tr></table></figure></script></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> vue绑定样式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中使用本地存储</title>
      <link href="/2022/09/03/vue/20-%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/localstorage/"/>
      <url>/2022/09/03/vue/20-%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/localstorage/</url>
      
        <content type="html"><![CDATA[<h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>localxlocalStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>             该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>localStorage.getItem(&#39;person&#39;);</code></p><pre><code>     该方法接受一个键名作为参数，返回键名对应的值。</code></pre></li><li><p><code>localStorage.removeItem(&#39;key&#39;);</code></p><pre><code>     该方法接受一个键名作为参数，并把该键名从存储中删除。</code></pre></li><li><p><code> localStorage.clear()</code></p><pre><code>     该方法会清空存储中的所有数据。</code></pre></li></ol></li><li><p>备注：</p><ol><li><code>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</code></li><li>LocalStorage存储的内容，需要<code>手动清除</code>才会消失。</li><li><code>localStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>session————&gt; 对话，网页结束后就消失了，而localstorage————&gt; 不删除就不会消失</p></li><li><p>如果是一个对象，那需要使用<code>JSON.stringfy()</code>转换为字符串，然后再<code>储存</code>，</p><p>同时，在<code>读取</code>时，需要使用<code>JSON.parse()</code>进行解析，然后再使用，否则会发生<code>类型问题</code></p><p><img src="/2022/09/03/vue/20-%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/localstorage/image-20220903213957106.png" alt="image-20220903213957106"></p></li></ol><blockquote><p>这里 ‘test’本来应该是object类型，但储存的时候进行了转换，而读取时没有进行转换，则最终读取的数据，类型为 ‘String’</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 本地储存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/"/>
      <url>/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一、部门职能"><a href="#一、部门职能" class="headerlink" title="一、部门职能"></a>一、部门职能</h1><ol><li>科教招新项目的开发</li></ol><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821151559325.png" alt="image-20220821151559325"></p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821151809684.png" alt="image-20220821151809684"></p><ol start="2"><li><p>广师大网页管理</p></li><li><p>贴上我们的作品</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821152050558.png" alt="image-20220821152050558"></p></li></ol><h1 id="二、部门的招新要求"><a href="#二、部门的招新要求" class="headerlink" title="二、部门的招新要求"></a>二、部门的招新要求</h1><ul><li><p><strong>&#x3D;&#x3D;自身具有明确的职业规划&#x3D;&#x3D;</strong>,将来从事软件开发相关的职业。</p></li><li><p>&#x3D;&#x3D;对编程具有较高的兴趣&#x3D;&#x3D;，小白也没关系，部门内有学长学姐专业指导。</p></li><li><p>&#x3D;&#x3D;不好高骛远，脚踏实地&#x3D;&#x3D;，做到认真并按时的完成部门任务。</p></li><li><p>&#x3D;&#x3D;<strong>具有一定的自主学习能力</strong>&#x3D;&#x3D;遇到问题及时沟通。</p></li><li><p>&#x3D;&#x3D;<strong>乐观积极，百折不挠</strong>&#x3D;&#x3D;，希望你能在变强的路上越走越远</p><h1 id="三、成员介绍"><a href="#三、成员介绍" class="headerlink" title="三、成员介绍"></a>三、成员介绍</h1><p>1.正部</p><p>副部，以下排名不分先后</p><p>2.xxxx</p><p>3.xxxx</p><p>4.xxxx</p></li></ul><h1 id="四、部门活动介绍"><a href="#四、部门活动介绍" class="headerlink" title="四、部门活动介绍"></a>四、部门活动介绍</h1><p>谁说程序猿都是冷冰冰的一群人，我们也有许多有趣的时刻。</p><ol><li><p>部门合照</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821154555782.png" alt="image-20220821154555782"></p></li><li><p>部门团建</p><ol><li>团建的大pizza！</li></ol><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821154507943.png" alt="image-20220821154507943"></p><p>2.团建的奶茶+烧烤！</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821154659655.png" alt="image-20220821154659655"></p></li></ol><p>团建一起玩游戏！！！</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821155413221.png" alt="image-20220821155413221"></p><p>3.他们都说程序猿各个都是直男直女，莫得感情，但我们！会在元宵节给每一位小骨干送上一碗**&#x3D;&#x3D;温馨的小汤圆&#x3D;&#x3D;**！！！！</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220821161244.jpg" alt="微信图片_20220821161244"></p><h1 id="五、结尾"><a href="#五、结尾" class="headerlink" title="五、结尾"></a>五、结尾</h1><p>1.鼓舞</p><p>加入<strong>网络研发部</strong>，一起在<strong>验前端编程学习</strong>的海洋里遨游，</p><p>如果你已经确定在<strong>IT行业</strong>方向发展</p><p>我们能让你</p><p>在前端学习上<strong>领先</strong>于同专业同学</p><p>我们还能帮你</p><p>解答<strong>C&#x2F;C++、Java编程语言</strong>学习上的疑惑</p><p>还在犹豫什么！</p><ol start="2"><li><p>报名方式</p><p>点击下方的小程序链接，选择投递**&#x3D;&#x3D;网络研发部&#x3D;&#x3D;**吧！</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/gh_c897a4e417c2_258.jpg" alt="gh_c897a4e417c2_258"></p><ul><li></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rem适配方案</title>
      <link href="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
      <url>/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<hr><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820211218623.png" alt="image-20220820211218623"></p><p>自适应</p><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820211524694.png" alt="image-20220820211524694"></p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><h3 id="技术方案一："><a href="#技术方案一：" class="headerlink" title="技术方案一："></a>技术方案一：</h3><pre><code>- less- 媒体查询- 人</code></pre><p>技术方案2（推荐）</p><pre><code>- flexible.js- rem</code></pre><p>总结：</p><pre><code>1. 两种方案都存在1. 方案二更加简单</code></pre><p>动态设置html标签font-size大小</p><p>​<img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820215730239.png" alt="image-20220820215730239"></p><p>rem实际开发的适配方案</p><p>rem&#x3D; 页面元素值(px)&#x2F;(屏幕宽度&#x2F;划分的分数)</p><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820221718183.png" alt="image-20220820221718183"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820232329513.png" alt="image-20220820232329513"></p>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rem适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Less的使用</title>
      <link href="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/less/"/>
      <url>/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/less/</url>
      
        <content type="html"><![CDATA[<p>一、 Less是什么</p><p>​css的扩展语言</p><p>二、less的使用</p><pre><code>1. 变量    1. 变量时没有固定的值，可以改变的。    &gt; 1.书写less文件：    &gt;    &gt; ​@变量名 ：值    &gt;    &gt; 2.    2. 命名规范    1. ==**必须有@前嘴==**    2. 不能包含特殊字符    3. 不能以数字开头    4. 大小写敏感    3. 案例    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@color:pink</span><br><span class="line"></span><br><span class="line">.p&#123;</span><br><span class="line">color:@color</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>2. Less嵌套</code></pre><p>​    </p><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.子元素的样式直接写在父元素里面就好--&gt;</span></span><br><span class="line">.header&#123;</span><br><span class="line">color:red;</span><br><span class="line">a&#123;</span><br><span class="line">background-color:pink;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">添加伪类选择器</span><br><span class="line"><span class="comment">&lt;!--  如果有伪类选择器、交集选择器、伪类选择器 使用**==&amp;==**---&gt;</span> 内层选择器的前面需要加 ==&amp;==</span><br><span class="line">.header&#123;</span><br><span class="line">a&#123;</span><br><span class="line">&amp;:hover&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>![image-20220820210222137](less/image-20220820210222137.png)3. ==**Less运算**==☆   1. \+ \- \*  /    2. 运算顺序与四则运算相同，都是先乘数，后加减   ![image-20220820210628143](less/image-20220820210628143.png)   **注意：**   1. ==**运算符中间有空格隔开 1 px + 5**==   2. 对于不同的单位直接的运算，运算结果取==第一个值==的单位   ​![image-20220820210724170](less/image-20220820210724170.png)</code></pre><ol start="4"><li><p>@import 导入另一个样式文件（less）文件</p><p><strong>最后一定要加&#x3D;&#x3D;;&#x3D;&#x3D;</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;css文件&quot;</span> ;   //把一个样式文件导入到本样式文件中</span><br><span class="line">//link  将一个样式文件引入到<span class="selector-tag">html</span>页面</span><br></pre></td></tr></table></figure></li><li><p>编译less</p></li><li><p>Vscode 的easy less插件</p><ol><li>安装</li></ol></li></ol><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/less/image-20220820204947984.png" alt="image-20220820204947984"></p><p>​2. 插件会自动将less编译成一个css文件</p>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Less </tag>
            
            <tag> css扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑像素比的知识</title>
      <link href="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&amp;%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/"/>
      <url>/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&amp;%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<ol><li>物理像素比</li></ol><blockquote><p>电脑上当缩放比例为100%时，1px（css像素）则为电脑屏幕上的1个像素大小</p><blockquote><p>Windows10会自动将缩放比例调整为100%以上，例如125%</p><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/image-20220820201143115.png" alt="image-20220820201143115"><br>而手机上使用了视网膜技术。</p><p>1px(css像素)，在手机上显示的结果&#x3D;1px*像素缩放比</p><p>iphone8 : 1px(css像素)*2&#x3D;2</p><p>Tip:相当于直接把图片、文字这些放大两倍</p></blockquote></blockquote><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/image-20220820200923907.png" alt="image-20220820200923907"></p><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/image-20220820201423812.png" alt="image-20220820201423812"></p><ol start="2"><li><p>二倍图</p><p>如果直接将图片放大两倍，那可能就会变模糊，那怎么解决这个问题？</p><p>我们放一个100*100的，然后手动将这个图片缩小为50*50(css像素)，最终显示在屏幕上的是50(css像素)*2，显示的结果就是实际图片的效果</p></li></ol><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/image-20220820202429008.png" alt="image-20220820202429008"></p><ol start="3"><li>背景的缩放<ol><li>background-size: 图片的宽度 图片的高度</li><li>background-size: 图片宽度 (auto，默认)</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软/硬件知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 像素比大小 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript中的原型链</title>
      <link href="/2022/07/30/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2022/07/30/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、何为原型链？"><a href="#一、何为原型链？" class="headerlink" title="一、何为原型链？"></a>一、何为原型链？</h1><p>JavaScript中的原型关系</p><h1 id="二、原型链的解释"><a href="#二、原型链的解释" class="headerlink" title="二、原型链的解释"></a>二、原型链的解释</h1><ol><li><p>对象可以由a构造函数、b对象方法创建</p></li><li><p>来看下图。</p><p><img src="/2022/07/30/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/image-20220903202726634.png" alt="image-20220903202726634"></p><ol><li>f1和f2是function foo创建的对象。</li></ol></li></ol><p><img src="/2022/07/30/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="原型链"></p><p>1. </p>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
          <category> javascript进阶知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中组件入门</title>
      <link href="/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/"/>
      <url>/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p><img src="/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/image-20220729200851143.png" alt="image-20220729200851143"></p><p><img src="/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/image-20220729193042248.png" alt="image-20220729193042248"></p><h2 id="单文件组件与非单文件组件"><a href="#单文件组件与非单文件组件" class="headerlink" title="单文件组件与非单文件组件"></a>单文件组件与非单文件组件</h2><h3 id="1-单文件组件："><a href="#1-单文件组件：" class="headerlink" title="1.单文件组件："></a>1.单文件组件：</h3><p>​一个文件只包含一个组件  ——&gt;a.html</p><h3 id="2-非单文件组件"><a href="#2-非单文件组件" class="headerlink" title="2. 非单文件组件"></a>2. 非单文件组件</h3><p>​一个文件中包含n个组件 ——&gt;a.vue</p><h2 id="Vuecomponent构造器的生成过程"><a href="#Vuecomponent构造器的生成过程" class="headerlink" title="Vuecomponent构造器的生成过程"></a>Vuecomponent构造器的生成过程</h2><p>​创建vue组件时，cost componentName &#x3D;Vue.extend()  ——————————&gt;调用了Vue.extend这个方法,而这个方法的源码每次调用都生成了一个新的VueComponent</p><p><img src="/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/image-20220729223553810.png" alt="image-20220729223553810"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你领略Vue的风骚之路</title>
      <link href="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>先看完整的图。</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="生命周期"></p><h2 id="逐步解析"><a href="#逐步解析" class="headerlink" title="逐步解析"></a>逐步解析</h2><p>​1.Vue的初始化，两个生命周期函数</p><ul><li>beforecreate：在数据代理、数据监测之前</li><li>created：在完成数据代理、数据监测后</li></ul><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729150212600.png" alt="image-20220729150212600"></p><ol start="2"><li>Vue开始解析模块</li></ol><p>​Vue开始处理 插值语法、插值指令、计算属性……  ——&gt;不显示解析好的内容 ——</p><p>​————————&gt;这个过程进行虚拟DOM的生存</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729150411546.png" alt="image-20220729150411546"></p><ol start="3"><li>将虚拟DOM转换为真实DOM插入界面</li></ol><p>​上一步生成的虚拟DOM，Vue存了一份在vm.$el中，然后再用它来替换掉真实的那个el(绑定的模块)</p><p>​————————&gt;存在vm.$el中的虚拟DOM为后续的 虚拟DOM比较——&gt;即diff 提供准备</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729150931756.png" alt="image-20220729150931756"></p><ol start="4"><li><p>Vue的初始化完成，开始执行mounted生命周期函数。</p><p>​——————开启定时器，发送网络请求……</p></li></ol><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729152712878.png" alt="image-20220729152712878"></p><ol start="5"><li><p>检测变化 ——————&gt;这是一个闭环的过程</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729154420051.png" alt="image-20220729154420051"></p></li><li><p>销毁Vue</p></li></ol><p>destroy介绍</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729155152540.png" alt="image-20220729155152540"></p><blockquote><p>细节一：注意：</p><p>这里的事件监听器——&gt;指的是自定义事件</p><p>我们在 new Vue(</p><p>method:{<br>}</p><p>配置的方法都是原生的DOM事件，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    new Vue(</span><br><span class="line">method:&#123;</span><br><span class="line">        add()&#123;</span><br><span class="line">console.log(&#x27;add&#x27;)</span><br><span class="line">this.n++</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><p>​当vue执行时，最终会给button绑定 DOM原生的点击事件，这个事件是原生DOM上的，vue被杀死多少回都不会对其造成影响。</p></blockquote><p>​<img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729160100548.png" alt="image-20220729160100548"></p><h3 id="一个形象的比喻"><a href="#一个形象的比喻" class="headerlink" title="一个形象的比喻"></a>一个形象的比喻</h3><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729161519962.png" alt="image-20220729161519962">   </p><h2 id="几个要注意的细节"><a href="#几个要注意的细节" class="headerlink" title="几个要注意的细节"></a>几个要注意的细节</h2><h3 id="细节一：注意："><a href="#细节一：注意：" class="headerlink" title="细节一：注意："></a>细节一：注意：</h3><p>这里的事件监听器——&gt;指的是自定义事件</p><p>我们在 new Vue(</p><p>method:{<br>}</p><p>配置的方法都是原生的DOM事件，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    new Vue(</span><br><span class="line">method:&#123;</span><br><span class="line">        add()&#123;</span><br><span class="line">console.log(&#x27;add&#x27;)</span><br><span class="line">this.n++</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><p>​当vue执行时，最终会给button绑定 DOM原生的点击事件，这个事件是原生DOM上的，vue被杀死多少回都不会对其造成影响</p><h3 id="细节二"><a href="#细节二" class="headerlink" title="细节二"></a>细节二</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;</span><br><span class="line">                /* 这里还能得到vm上的数据和方法，但是</span><br><span class="line">                修改后数据，页面不会刷新了。</span><br><span class="line">                ——&gt;因为vue已经进入销毁了，不会再加载 beforeupdata和update函数</span><br><span class="line">                */</span><br><span class="line">                console.log(&#x27;beforeDestory&#x27;);</span><br><span class="line">                console.log(this.n);</span><br><span class="line">                this.add();</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 硬核知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/28/vue/15-%E5%86%85%E9%83%A8%E6%8C%87%E4%BB%A4/2.v-html/"/>
      <url>/2022/07/28/vue/15-%E5%86%85%E9%83%A8%E6%8C%87%E4%BB%A4/2.v-html/</url>
      
        <content type="html"><![CDATA[<h3 id="cookie简略图示"><a href="#cookie简略图示" class="headerlink" title="cookie简略图示"></a>cookie简略图示</h3><p><img src="/2022/07/28/vue/15-%E5%86%85%E9%83%A8%E6%8C%87%E4%BB%A4/2.v-html/image-20220728222602717.png" alt="image-20220728222602717"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/28/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/Vue.set/"/>
      <url>/2022/07/28/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/Vue.set/</url>
      
        <content type="html"><![CDATA[<p>1.局限性</p><p>对象不能是vm &#x2F;  vm的根数据对象(vm._data)</p><p><img src="/2022/07/28/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/Vue.set/image-20220728154450525.png" alt="image-20220728154450525"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>姓名实例_methods</title>
      <link href="/2022/07/28/vue/07-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/03.%E5%A7%93%E5%90%8D%E6%A1%88%E4%BE%8B_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
      <url>/2022/07/28/vue/07-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/03.%E5%A7%93%E5%90%8D%E6%A1%88%E4%BE%8B_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>通过一个实例，简要介绍计算属性</p><span id="more"></span><p>​    1.定义：要用的属性不存在，要通过已有属性计算得来</p><p>​    2.原理；底层借助了object.defineproperty方法提供的getter和setter</p><p>​    3.get函数什么时候执行</p><p>​      (1).初次读取时会执行一次</p><p>​      (2).当依赖的数据发生改变时会被再次调用</p><p>​    4.优势：与methods相比，内部有缓存机制（复用），效率更高，调式方便</p><p>​    5.备注：</p><p>​      (1).计算属性最终会出现在vm上，直接读取&#x2F;操作使用即可</p><p>​      (2).如果计算属性要被修改，那必须写在set函数去响应修改，</p><p>​      且set中药引起&#x3D;&#x3D;<strong>计算时依赖的数据</strong>&#x3D;&#x3D;发生改变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">       姓 &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">       名 &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">       测试 &lt;input type=&quot;text&quot;  v-model=&quot;x&quot;&gt; &lt;br&gt;</span><br><span class="line">       全名 &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">       全名 &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">       全名 &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">       &lt;!-- //计算属性的get什么时候被调用？ </span><br><span class="line">               1.除此读取fullname时，后面使用时会进行缓存。 </span><br><span class="line">               2.所以来的数据发生改变时 --&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line"></span><br><span class="line">       const vm =new Vue(&#123;</span><br><span class="line">           el: &#x27;#root&#x27;,</span><br><span class="line">           data: &#123;</span><br><span class="line">               firstName: &#x27;张&#x27;,</span><br><span class="line">               lastName: &#x27;三&#x27;,</span><br><span class="line">               x:1</span><br><span class="line">           &#125;,</span><br><span class="line">           computed:&#123;</span><br><span class="line">               fullName:&#123;</span><br><span class="line">                   //get有什么用？当有人读取fullname时就会被调用，返回值就作为fullname的值</span><br><span class="line">                   //get什么时候被调用？ </span><br><span class="line">                   // 1.除此读取fullname时。 </span><br><span class="line">                   // 2.所以来的数据发生改变时</span><br><span class="line">                   get()&#123;</span><br><span class="line">                       console.log(&quot;get被调用了&quot;);</span><br><span class="line">                       console.log(this);//此处this是mv实例</span><br><span class="line">                       return this.firstName+&#x27;-&#x27;+this.lastName</span><br><span class="line">                       // 这里用到的值为 firstNmae、lastName</span><br><span class="line">                   &#125;,</span><br><span class="line">                   //set有什么用？当fullName被修改</span><br><span class="line">                   //set什么时候被调用？</span><br><span class="line">                   set(value)&#123;</span><br><span class="line">                       const arr=value.split(&#x27;-&#x27;)</span><br><span class="line">                       this.firstName=arr[0]</span><br><span class="line">                       this.lastName=arr[1]</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           // 计算属性，和data/methods不一样，它不是直接放在vm上，</span><br><span class="line">           // 而是调用了get方法，得到返回值后再将返回值放在vm上</span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的开始</title>
      <link href="/2022/07/28/vue/11-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/"/>
      <url>/2022/07/28/vue/11-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p>Vue条件渲染 v-if与 v-show</p><span id="more"></span><p>​        条件渲染：</p><p>​              1.v-if</p><p>​                    写法：</p><p>​                        (1).v-if&#x3D;”表达式” </p><p>​                        (2).v-else-if&#x3D;”表达式”</p><p>​                        (3).v-else&#x3D;”表达式”</p><p>​                    适用于：切换频率较低的场景。</p><p>​                    特点：不展示的DOM元素直接被移除。（不会出现在HTML文件中）</p><p>​                    注意：v-if可以和:v-else-if、v-else一起使用，但要求&#x3D;&#x3D;<strong>结构不能被“打断”</strong>&#x3D;&#x3D;。</p><p>​              2.v-show</p><p>​                    写法：v-show&#x3D;”表达式”</p><p>​                    适用于：切换频率较高的场景。</p><p>​                    特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉（display：none）</p><p>​                </p><p>​              3.v-if可以和template配合使用，使多个元素一起显示&#x2F;隐藏，而不影响布局</p><p>​              4.备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</p><p>​                  因为 v-show，还存在于页面中，而v-if没有</p><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用v-if坐条件渲染 --&gt;</span><br><span class="line">        &lt;div v-if=&quot;表达式&quot;&gt; &lt;/div&gt;</span><br><span class="line">           &lt;div v-if=&quot;false&quot;&gt; &lt;/div&gt;</span><br><span class="line">           &lt;div v-if=&quot;1===1&quot;&gt; &lt;/div&gt;</span><br><span class="line">       </span><br><span class="line">      </span><br><span class="line">       &lt;!-- v-else和v-else-if  --&gt;</span><br><span class="line">       </span><br><span class="line">       &lt;div v-if=&quot;false&quot;&gt; &lt;/div&gt;</span><br><span class="line">       &lt;div v-elseif=&quot;1===1&quot;&gt; &lt;/div&gt; </span><br><span class="line"></span><br><span class="line">       &lt;!-- v-if,template配套使用，不破坏布局 --&gt;</span><br><span class="line">       &lt;template v-if=&quot;show&quot;&gt;</span><br><span class="line">           &lt;h2&gt;nihao$&lt;/h2&gt;</span><br><span class="line">           &lt;h2&gt;nihao$&lt;/h2&gt;</span><br><span class="line">           &lt;h2&gt;nihao$&lt;/h2&gt;</span><br><span class="line">       &lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用v-show做条件渲染 --&gt;</span><br><span class="line">       </span><br><span class="line">            &lt;div v-show=&quot;表达式&quot;&gt; &lt;/div&gt;</span><br><span class="line">            &lt;div v-show=&quot;false&quot;&gt; &lt;/div&gt;</span><br><span class="line">            &lt;div v-show=&quot;1===1&quot;&gt; &lt;/div&gt;</span><br><span class="line">         </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>class和style样式绑定</title>
      <link href="/2022/07/28/vue/10.%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/class%E5%92%8Cstyle%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A/"/>
      <url>/2022/07/28/vue/10.%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/class%E5%92%8Cstyle%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>class和style样式绑定</p><span id="more"></span><p>  绑定样式：</p><p>​      1.class样式</p><p>​        写法：:class&#x3D;’xxx’，xxx可以是对象、数组、字符串</p><p>​          字符串写法适用于：类名不确定，需要动态获取</p><p>​          数组写法使用与：要绑定多个样式，个数不确定，名字也不确定</p><p>​          对象写法：要绑定的样式名字、个数都确定，不确定应不应用</p><p>​      2.style样式</p><p>​          :style&#x3D;”xxx”，xxx可以是样式对象、样式对象数组</p><p>​        备注：</p><p>​          1.样式对象： key 不能瞎写，一定是&#x3D;&#x3D;<strong>存在的属性</strong>&#x3D;&#x3D;</p><p>​          2.属性中如果是两个单词，直接拼在一起 font-size -&gt; fontSize</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 准备好一个容器--&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 绑定class样式--字符串写法  适用于：样式的类名不确定，需要动态制定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :class=&quot;a&quot; @click=&quot;change()&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定class样式—--数组写法，适用于：要绑定的样式个数不确定，名字也不确定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定class样式——— 对象写法：适用于：要绑定的样式个数确定，名字确定，是否应用不确定--&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定style样式----对象写法 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定style样式----数组写法 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :style=&quot;styleArray&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">   &lt;script&gt;</span><br><span class="line">   Vue.config.productionTip=false //阻止vue在启动时生成生产提示</span><br><span class="line">   new Vue(&#123;</span><br><span class="line">   el:&#x27;#root&#x27;,</span><br><span class="line">   data:&#123;</span><br><span class="line">    a:&#x27;&#x27;,</span><br><span class="line">   name:&#x27;helloworld&#x27;,</span><br><span class="line">   classArr:[&#x27;atguigu1&#x27;,&#x27;atguigu2&#x27;,&#x27;atguigu3&#x27;],</span><br><span class="line">   classObj:&#123;</span><br><span class="line">    atguigu1:false,</span><br><span class="line">    atguigu2:false</span><br><span class="line">   &#125;,</span><br><span class="line">   styleObj:&#123;</span><br><span class="line">    color:&#x27;red&#x27;,</span><br><span class="line">    fontSize: &#x27;20px&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">   styleOb2:&#123;</span><br><span class="line">    backgroundcolor:&#x27;orange&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">   styleArray:[&#123;</span><br><span class="line">    color:&#x27;red&#x27;,</span><br><span class="line">    fontSize: &#x27;20px&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">   </span><br><span class="line">   ,&#123;</span><br><span class="line">    backgroundcolor:&#x27;orange&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">],</span><br><span class="line">  </span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   methods:&#123;</span><br><span class="line">    change()&#123;</span><br><span class="line">        //0-1,1娶不到 0,0.11，1.xxx,.2.xxx向下取证</span><br><span class="line">        var index= Math.floor(Math.random()*3)</span><br><span class="line">        var arr=[&#x27;happy&#x27;,&#x27;sad&#x27;,&#x27;normal&#x27;]</span><br><span class="line">        this.a=arr[index]</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A4/"/>
      <url>/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>一个vscode的使用技巧</p><p>自定义折叠</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//在开始的地方</span><br><span class="line">//#region</span><br><span class="line"></span><br><span class="line">//在结束的地方</span><br><span class="line">//#endregion</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
      <url>/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>key的发挥作用：</p><blockquote><p>如果不写 key，那Vue会&#x3D;&#x3D;默认&#x3D;&#x3D;将index作为key </p></blockquote><ol><li>当使用index做索引时，Vue内部虚拟DOM的操作过程</li></ol><p>面试题： react、vue中key的有什么作用？（key的内部原理）<br>    1.虚拟dom中key 的作用</p><ul><li>key是虚拟DOM对象的标识符，当数据发生改变时，vue会根据【新数据】生成【新的虚拟DOM】</li><li>随后vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较——&#x3D;&#x3D;<strong>虚拟DOM比较算法</strong>&#x3D;&#x3D;，比较规则如下：</li></ul><ol start="2"><li><p>对比规则：</p><p>(1).若虚拟DOM中找到了与新虚拟DOM相同的key</p><ul><li>1.若虚拟DOM中内容没变，直接使用之前的真实DOM</li><li>2.若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li></ul></li></ol><p>​(2).旧虚拟DOM中没找到与新虚拟DOM中相同的key</p><p>​——&gt;创建新的真实DOM，随后渲染到页面</p><ol start="3"><li><p>用index作为key可能会引发的问题：</p><ol><li><p>若对数据进行：逆序添加（不是从尾部插入，而是从头部插入）、逆序删除等&#x3D;&#x3D;<strong>破坏顺序操作&#x3D;&#x3D;</strong><br>会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt;  页面效果没问题，但效率低</p></li><li><p>&#x3D;&#x3D;<strong>如果结构中还包含输入类的DOM</strong>：&#x3D;&#x3D;</p><p>​会产生错误DOM更新  &#x3D;&#x3D;&gt; 界面有问题</p></li></ol></li><li><p>开发中如何选择key？</p><ol><li>最好使用每条数据的&#x3D;&#x3D;<strong>唯一标识符</strong>&#x3D;&#x3D;作为key，比如id、手机号、身份证号、学号等唯一值</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅使用与渲染列表用于展示，使用index作为key是没有问题的</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 这里的案例为在persons数列 ==**前**== 添加一个新元素==---&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;!-- 遍历数组 --&gt;</span><br><span class="line">&lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;</span><br><span class="line">&lt;button @click.once=&quot;add&quot;&gt;添加一个老刘&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">add()&#123;</span><br><span class="line">const p = &#123;id:&#x27;004&#x27;,name:&#x27;老刘&#x27;,age:40&#125;</span><br><span class="line">this.persons.unshift(p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/image-20220727223334324.png" alt="image-20220727223334324"></p><p><img src="/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/image-20220727223639483.png" alt="image-20220727223639483"></p><ol start="2"><li>id（自定义为key）</li></ol><p><img src="/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/image-20220727223718835.png" alt="image-20220727223718835"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>监视属性</title>
      <link href="/2022/07/27/vue/09-%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/"/>
      <url>/2022/07/27/vue/09-%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>VUe的引入</p><span id="more"></span><h2 id="一、-配置项"><a href="#一、-配置项" class="headerlink" title="一、 配置项"></a>一、 配置项</h2><ol><li>immediate</li></ol><blockquote><p>配置初始化时让handler被调用</p></blockquote><ol start="2"><li>handler(newValue,oldValue)</li></ol><blockquote><p>配置当对应的变量发生变化时调用的方法,可以接受两个参数</p></blockquote><ol start="3"><li>deep</li></ol><blockquote><p>配置是否进行多级目录</p></blockquote><h2 id="二、书写的方式"><a href="#二、书写的方式" class="headerlink" title="二、书写的方式"></a>二、书写的方式</h2><ol><li>直接在new Vue中配置</li></ol><blockquote><p>可以使用所有配置项</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//监视多级结构中某个属性的变化</span><br><span class="line">                &#x27;number.a&#x27;: &#123;</span><br><span class="line">                    immediate:true,//初始化时让handler被调用,</span><br><span class="line">                    deep:true,//检测多级</span><br><span class="line">                    // handler 在监听属性发生改变时会被调用</span><br><span class="line">                    handler(newValue,oldValue)&#123;</span><br><span class="line">                        console.log(&quot;a改变了&quot;,newValue,oldValue);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>简写，直接写hadler函数</li></ol><blockquote><p>不能添加配置项</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//简写</span><br><span class="line">               ishot(newValue,oldValue)&#123;</span><br><span class="line">                   console.log(&quot;a改变了&quot;,newValue,oldValue);</span><br><span class="line">                   console.log();</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用vm.$watch()配置</li></ol><blockquote><p>可以使用所有配置项</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//一、使用配置项</span><br><span class="line">         vm.$watch(&#x27;ishot&#x27;,&#123;</span><br><span class="line">             immediate:true,</span><br><span class="line">               console.log(&quot;ishot被改变了&quot;,newValue,oldValue);</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">//二、不使用配置项</span><br><span class="line"> vm.$watch(&#x27;ishot&#x27;,function()&#123;</span><br><span class="line">               console.log(&quot;ishot被改变了&quot;,newValue,oldValue);</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure><h2 id="三、watch与computed的区别"><a href="#三、watch与computed的区别" class="headerlink" title="三、watch与computed的区别"></a>三、watch与computed的区别</h2><ol><li>computed能完成的，watch都能完成。</li><li>watch能完成的功能，computed不一定能完成。例如：watch可以进行异步操作</li></ol><blockquote><p>两个重要的小原则：<br> 1.所被vue管理的函数，最好都写成普通函数，这样this的执行才是vm或 组件实例对象<br> 2.所有不被vue所管理的函数(定时器setTimeout、Ajax的回调函数等、promise问题等)<br> 最好写成箭头汗水，这样this的指向才是vm或    组件实例对象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">   </span><br><span class="line"> --&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">       姓 &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">       名 &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">    &lt;span&gt;全名 &#123;&#123;fullname&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line">       const vm= new Vue(&#123;</span><br><span class="line">            el: &#x27;#root&#x27;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                firstName:&#x27;张&#x27;,</span><br><span class="line">                lastName:&#x27;三&#x27;,</span><br><span class="line">                fullname:&#x27;张三&#x27;//监视属性需要先创建一个变量便于后期修改</span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line">                // fullname()&#123;</span><br><span class="line">                //     return this.firstName+&#x27;-&#x27; +this.lastName</span><br><span class="line">                // &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                changeishot()&#123;</span><br><span class="line">                    this.ishot=!this.ishot</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //监视属性</span><br><span class="line">            watch: &#123;</span><br><span class="line">                firstName()&#123;</span><br><span class="line">                    //setTimeout直接由浏览器执行，其this指向为Windows，固需要使用箭头函数，this指向往上找</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                    this.fullname=this.firstName+&#x27;-&#x27; +this.lastName</span><br><span class="line">                    &#125;, 1000);</span><br><span class="line">                &#125;,</span><br><span class="line">               lastName()&#123;</span><br><span class="line">                //setTimeout直接由浏览器执行，其this指向为Windows，固需要使用箭头函数，this指向往上找</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    console.log(this)</span><br><span class="line">                    this.fullname=this.firstName+&#x27;-&#x27; +this.lastName</span><br><span class="line">                    &#125;, 1000);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">    </span><br><span class="line">        &#125;)</span><br><span class="line">        // // 第二种配置方法</span><br><span class="line">        // vm.$watch(&#x27;ishot&#x27;,&#123;</span><br><span class="line">        //     immediate:true,</span><br><span class="line">        //     handler(newValue,oldValue)&#123;</span><br><span class="line">        //         console.log(&quot;ishot被改变了&quot;,newValue,oldValue);</span><br><span class="line">        //     &#125;</span><br><span class="line">        // &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的技巧</title>
      <link href="/2022/07/26/vue/08-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/vue%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/07/26/vue/08-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/vue%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue中的坑"><a href="#Vue中的坑" class="headerlink" title="Vue中的坑"></a>Vue中的坑</h2><ol><li>如果Vue模块中没有使用data中的数据，那data中的数据发生改变时，vue的浏览器插件 Vue tool不会刷新</li><li>使用了定时器settimeout()的话，定时器是由浏览器直接调用的，所以它的this指向的是 **&#x3D;&#x3D;Windows&#x3D;&#x3D;**，而不是&#x3D;&#x3D;vue&#x3D;&#x3D;</li><li>Vue的绑定样式，使用style绑定要<code>注意的点</code><ol><li>如果是两个单词，类似background-color这种，要去掉中间的<code>“-”</code>,写成一个组合词backgroundColor</li><li></li></ol></li></ol><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ol><li>Vue上简单的操作可以直接写在Vue模块里，因为<strong>Vue模块可以直接访问Vue实例上的所有属性</strong></li></ol><p>eg: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div&gt; &#123;&#123;file&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;!- @xxx=&quot;yyyy&quot; xxx是事件名,yyy可以写一些简单的语句--&gt;</span><br><span class="line">    &lt;button @click=&quot;file=&#x27;炎热&#x27;&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">                file:&#x27;helloworld&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue中的技巧 </tag>
            
            <tag> Vue中的坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的技巧</title>
      <link href="/2022/07/26/vue/Top0-Vue%E4%B8%AD%E7%9A%84%E5%9D%91/vue%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/07/26/vue/Top0-Vue%E4%B8%AD%E7%9A%84%E5%9D%91/vue%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue中的坑"><a href="#Vue中的坑" class="headerlink" title="Vue中的坑"></a>Vue中的坑</h2><ol><li>如果Vue模块中没有使用data中的数据，那data中的数据发生改变时，vue的浏览器插件 Vue tool不会刷新</li><li>使用了定时器settimeout()的话，定时器是由浏览器直接调用的，所以它的this指向的是 **&#x3D;&#x3D;Windows&#x3D;&#x3D;**，而不是&#x3D;&#x3D;vue&#x3D;&#x3D;</li><li>Vue的绑定样式，使用style绑定要<code>注意的点</code><ol><li>如果是两个单词，类似background-color这种，要去掉中间的<code>“-”</code>,写成一个组合词backgroundColor</li></ol></li><li>如果不是在脚手架中，组件名不能写自闭和（<school>，否则会导致后续的组件不能渲染)</school></li><li>脚手架<ol><li>如果更新了脚手架的内容，脚手架会自动完成编译，但不会主动刷新浏览器控制台的内容，需要手动进行刷新。</li></ol></li></ol><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ol><li>Vue上简单的操作可以直接写在Vue模块里，因为<strong>Vue模块可以直接访问Vue实例上的所有属性</strong></li></ol><p>eg: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div&gt; &#123;&#123;file&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;!- @xxx=&quot;yyyy&quot; xxx是事件名,yyy可以写一些简单的语句--&gt;</span><br><span class="line">    &lt;button @click=&quot;file=&#x27;炎热&#x27;&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">                file:&#x27;helloworld&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue中的技巧 </tag>
            
            <tag> Vue中的坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>姓名实例_methods</title>
      <link href="/2022/07/25/vue/07-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/1.%E5%A7%93%E5%90%8D%E5%AE%9E%E4%BE%8B_method%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/07/25/vue/07-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/1.%E5%A7%93%E5%90%8D%E5%AE%9E%E4%BE%8B_method%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>通过一个实例，简单说明Vue中数据绑定+模块刷新</p><span id="more"></span><h2 id="本文要点："><a href="#本文要点：" class="headerlink" title="本文要点："></a>本文要点：</h2><ul><li><input disabled type="checkbox"> 模块刷新的原理</li><li><input disabled type="checkbox"> vue的数据绑定</li></ul><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先看基本代码</p><p>让我们开始逐步拆解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        姓 &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">        名 &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">        全名 &lt;span&gt; &#123;&#123;fullname()&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.config.productionTip=false //阻止vue在启动时生成生产提示</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">    firstName:&#x27;张&#x27;,</span><br><span class="line">    lastName:&#x27;三&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        fullname()&#123;</span><br><span class="line">            console.log(&quot;这个方法被调用了&quot;);</span><br><span class="line">            return this.firstName + &#x27;-&#x27; +this.lastName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ol><li><a href="%E9%80%9A%E8%BF%87el%E7%BB%91%E5%AE%9A%E5%90%8E%E7%9A%84HTML">^Vue模块</a></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">      姓 &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">      名 &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">      全名 &lt;span&gt; &#123;&#123;fullname()&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ol start="2"><li>Vue实例</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        Vue.config.productionTip=false //阻止vue在启动时生成生产提示</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">    firstName:&#x27;张&#x27;,</span><br><span class="line">    lastName:&#x27;三&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        fullname()&#123;</span><br><span class="line">            console.log(&quot;这个方法被调用了&quot;);</span><br><span class="line">            return this.firstName + &#x27;-&#x27; +this.lastName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>分析过程，当input中输入数据，data中的数据发生改变，vue会自动<code>重新解析 [^vue实例] </code>，如果包含vdata的则直接刷新，有调用方法则重新调用</li></ol><p><img src="/2022/07/25/vue/07-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/1.%E5%A7%93%E5%90%8D%E5%AE%9E%E4%BE%8B_method%E5%AE%9E%E7%8E%B0/image-20220725153238921.png" alt="image-20220725153238921"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件处理基础</title>
      <link href="/2022/07/25/vue/06-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/3.%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/"/>
      <url>/2022/07/25/vue/06-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/3.%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="键盘事件语法糖："><a href="#键盘事件语法糖：" class="headerlink" title="键盘事件语法糖："></a>键盘事件语法糖：</h2><pre><code>     @keydown ——按下了就触发，不用抬起     @keyup ——抬起后触发</code></pre><h3 id="1-Vue中常用的按键别名："><a href="#1-Vue中常用的按键别名：" class="headerlink" title="1.Vue中常用的按键别名："></a>1.Vue中常用的按键别名：</h3><pre><code>    使用  ——&gt; @keyup.enter=&quot; &quot;    回车 =&gt; enter     删除 =&gt; delete    退出 =&gt; esc    空格 =&gt; space    切换 =&gt;  tab     ==**注意tab要使用keydown,因为按下后焦点就切换掉了，无法使用keyup** ==    上  =&gt; up    下  =&gt; down    左  =&gt; left    右  =&gt; right    换行 =&gt; tab (特殊，必须配合keydown去使用) </code></pre><h3 id="2-vue未提供别名的按键，可以使用按键原始的key值去绑定它，"><a href="#2-vue未提供别名的按键，可以使用按键原始的key值去绑定它，" class="headerlink" title="2.vue未提供别名的按键，可以使用按键原始的key值去绑定它，"></a>2.vue未提供别名的按键，可以使用按键原始的key值去绑定它，</h3><pre><code>但注意要变化为 kebasb-case(短横线命名) eg:——caps-lock</code></pre><h3 id="3-系统修饰键-ctrl-shift-alt-meta-win键"><a href="#3-系统修饰键-ctrl-shift-alt-meta-win键" class="headerlink" title="3.系统修饰键 ctrl shift alt meta(win键)"></a>3.系统修饰键 ctrl shift alt meta(win键)</h3><pre><code>    (1)配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才能被触发    (2)配合keydown使用正常触发    (3)可配合特定按键一起 @keyup.ctrl.xxx=&quot; &quot; @keyup.ctrl.z</code></pre><h3 id="4-也可以使用keycode去指定具体的按键（不推荐）"><a href="#4-也可以使用keycode去指定具体的按键（不推荐）" class="headerlink" title="4.也可以使用keycode去指定具体的按键（不推荐）"></a>4.也可以使用keycode去指定具体的按键（不推荐）</h3><h3 id="5-Vue-config-keyCodes-自定义键名-x3D-键码（keycode-可以去定制按键别名（同样不推荐）"><a href="#5-Vue-config-keyCodes-自定义键名-x3D-键码（keycode-可以去定制按键别名（同样不推荐）" class="headerlink" title="5.Vue.config.keyCodes.自定义键名 &#x3D; 键码（keycode) 可以去定制按键别名（同样不推荐）"></a>5.Vue.config.keyCodes.自定义键名 &#x3D; 键码（keycode) 可以去定制按键别名（同样不推荐）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">    键盘事件语法糖：</span><br><span class="line">         @keydown ——按下了就触发，不用抬起</span><br><span class="line">         @keyup ——抬起后触发</span><br><span class="line">    1.Vue中常用的按键别名：</span><br><span class="line">        使用  ——&gt; @keyup.enter=&quot; &quot;</span><br><span class="line">        回车 =&gt; enter </span><br><span class="line">        删除 =&gt; delete</span><br><span class="line">        退出 =&gt; esc</span><br><span class="line">        空格 =&gt; space</span><br><span class="line">        切换 =&gt;  tab </span><br><span class="line">        ==**注意tab要使用keydown,因为按下后焦点就切换掉了，无法使用keyup** ==</span><br><span class="line">        上  =&gt; up</span><br><span class="line">        下  =&gt; down</span><br><span class="line">        左  =&gt; left</span><br><span class="line">        右  =&gt; right</span><br><span class="line">        换行 =&gt; tab (特殊，必须配合keydown去使用) </span><br><span class="line"></span><br><span class="line">    2.vue未提供别名的按键，可以使用按键原始的key值去绑定它，</span><br><span class="line">    但注意要变化为 kebasb-case(短横线命名) eg:——caps-lock</span><br><span class="line"></span><br><span class="line">    3.系统修饰键 ctrl shift alt meta(win键) </span><br><span class="line">        (1)配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才能被触发</span><br><span class="line">        (2)配合keydown使用正常触发</span><br><span class="line">        (3)可配合特定按键一起 @keyup.ctrl.xxx=&quot; &quot; @keyup.ctrl.z</span><br><span class="line">    4.也可以使用keycode去指定具体的按键（不推荐）</span><br><span class="line"></span><br><span class="line">    5.Vue.config.keyCodes.自定义键名 = 键码（keycode) 可以去定制按键别名（同样不推荐）</span><br><span class="line"> --&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入内容&quot; @keyup.ctrl.y=&quot;showInfo&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.config.keyCodes.huiche=13;//定义了一格别名按键</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">    name:&#x27;helloworld&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        showInfo(e)&#123;</span><br><span class="line">            console.log(&quot;执行了&quot;);</span><br><span class="line">            console.log(e.key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件处理基础</title>
      <link href="/2022/07/24/vue/06-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/2.%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2022/07/24/vue/06-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/2.%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="vue的事件修饰符："><a href="#vue的事件修饰符：" class="headerlink" title="vue的事件修饰符："></a>vue的事件修饰符：</h2><ol><li>prevent：阻止默认事件（常用） ——@click.prevent</li><li>stop:阻止事件冒泡</li><li>once：事件只触发一次。（常用）</li><li>capture：使用事件的捕获模式<br>            tip:捕获模式：<br>                        先从外层开始捕获到点击</li><li>sefl:只有event.target是当前操作的元素时才触发事件——也可用作防止事件冒泡</li><li>passive：事件的默认行为立即执行，无须等待时间回调执行完毕。</li></ol><h2 id="修饰符饰符特点："><a href="#修饰符饰符特点：" class="headerlink" title="修饰符饰符特点："></a>修饰符饰符特点：</h2><ul><li>可以连续写：<ul><li>EG:@click.prevent.stop(阻止默认行为+阻止冒泡)</li></ul></li></ul><h3 id="额外的知识："><a href="#额外的知识：" class="headerlink" title="额外的知识："></a>额外的知识：</h3><ol><li>scroll为滚动条滚动事件，滚动条抵达边缘后不再出发</li><li>wheel为鼠标滚轮滚动事件，滚动条抵达边缘后依旧触发</li></ol><h2 id="以下为各个修饰符用法的介绍"><a href="#以下为各个修饰符用法的介绍" class="headerlink" title="以下为各个修饰符用法的介绍"></a>以下为各个修饰符用法的介绍</h2><blockquote><p>这是一个全局的例子，接下来让我们来细细诉说</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">        *&#123;</span><br><span class="line">            margin-top: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        .box1&#123;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">        .box2&#123;</span><br><span class="line">            background-color: azure;</span><br><span class="line">        &#125;</span><br><span class="line">        .scroll&#123;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: blueviolet;</span><br><span class="line">            overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line">        .scroll li&#123;</span><br><span class="line">            height: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        修饰符特点：</span><br><span class="line">            可以连续写</span><br><span class="line">            EG:@click.prevent.stop(阻止默认行为+阻止冒泡)</span><br><span class="line">        vue的大事件修饰符：</span><br><span class="line">        1.prevent：阻止默认事件（常用） ——@click.prevent</span><br><span class="line">        2.stop:阻止事件冒泡</span><br><span class="line">        3.once：事件只触发一次。（常用）</span><br><span class="line">        4.capture：使用事件的捕获模式</span><br><span class="line">                tip:捕获模式：</span><br><span class="line">                            先从外层开始捕获到点击</span><br><span class="line">                            然后从里层开始冒泡</span><br><span class="line">        5.sefl:只有event.target是当前操作的元素时才触发事件——也可用作防止事件冒泡</span><br><span class="line">        6.passive：事件的默认行为立即执行，无须等待时间回调执行完毕。</span><br><span class="line">        </span><br><span class="line">        额外的知识：</span><br><span class="line">        1.scroll为滚动条滚动事件，滚动条抵达边缘后不再出发</span><br><span class="line">        2.wheel为鼠标滚轮滚动事件，滚动条抵达边缘后依旧触发</span><br><span class="line"></span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 阻止默认事件 --&gt;</span><br><span class="line">        &lt;a href=&quot;https://www.baidu.com&quot; @click.prevent=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt;</span><br><span class="line">        &lt;!-- 阻止事件冒泡 --&gt;</span><br><span class="line">        &lt;div style=&quot;background-color: blanchedalmond;&quot;@click=&quot;showInfo&quot;&gt;</span><br><span class="line">            &lt;button @click.stop=&quot;showInfo2&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">            &lt;!-- 修饰符可以连续写 --&gt;</span><br><span class="line">            &lt;a href=&quot;https://www.baidu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 事件只触发一次 --&gt;</span><br><span class="line">        &lt;button @click.once=&quot;showInfo2&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">        &lt;!-- 事件的捕获模式  --&gt;</span><br><span class="line">        &lt;!--   捕获模式：</span><br><span class="line">                        先从外层开始捕获到点击</span><br><span class="line">                        然后从里层开始冒泡 </span><br><span class="line">                            这里体现为 box1先捕获到事件，然后到button，但</span><br><span class="line">                        冒泡是由button ——→  div </span><br><span class="line">                        冒泡的结果时，div中触发的点击时间event.target也是button     </span><br><span class="line">                    --&gt;</span><br><span class="line">        &lt;div @click.capture=&quot;click(1)&quot; class=&quot;box1&quot;&gt;</span><br><span class="line">            &lt;button @click=&quot;click(2)&quot;&gt;事件的捕获模式&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div @click.self=&quot;self($event)&quot; class=&quot;box2&quot;&gt;</span><br><span class="line">            &lt;button @click=&quot;self($event)&quot;&gt;事件修饰符self&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 6.passive：事件的默认行为立即执行，无须等待时间回调执行完毕。 --&gt;</span><br><span class="line">        &lt;!-- 事件执行的流程为：一执行回调函数，并且等待执行完成后 →二、渲染效果，</span><br><span class="line">            在这个案例中，scroll函数内事件执行时间过长，会影响滚动条的渲染 ，</span><br><span class="line">            这里使用passive不等待回调函数执行完成，直接渲染--&gt;</span><br><span class="line">        &lt;ul class=&quot;scroll&quot; @wheel=&quot;scroll&quot;&gt;</span><br><span class="line">            &lt;!-- wheel 为滚轮滚动事件</span><br><span class="line">            scroll 为滑动条滚动事件 --&gt;</span><br><span class="line">            &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">   &lt;script&gt;</span><br><span class="line">   new Vue(&#123;</span><br><span class="line">   el:&#x27;#root&#x27;,</span><br><span class="line">   data:&#123;</span><br><span class="line">    name:&#x27;helloworld&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            showInfo(e)&#123;</span><br><span class="line">                alert(&quot;欢迎你&quot;);</span><br><span class="line">                //这里弹出窗口后会默认执行href</span><br><span class="line">            &#125;,</span><br><span class="line">            showInfo2(e)&#123;</span><br><span class="line">                alert(&quot;同学你好&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            self(event)&#123;</span><br><span class="line">                console.log(event.target);</span><br><span class="line">            &#125;,</span><br><span class="line">            click(number)&#123;</span><br><span class="line">                console.log(number);</span><br><span class="line">            &#125;,</span><br><span class="line">            scroll()&#123;</span><br><span class="line">                for(let i=0;i&lt;100;i++)&#123;</span><br><span class="line">                    console.log(&quot;f&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"> &lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件处理基础</title>
      <link href="/2022/07/24/vue/06-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/1.%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/07/24/vue/06-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/1.%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h2><pre><code>            1. 使用v-on:xxx或 @xxx 绑定事件，其中xx为事件名            1. 事件的回调需要配置在methods对象中，最终会出添加到vm对象上</code></pre><ol start="3"><li>methods配置的函数，不要使用&#x3D;&#x3D;箭头函数&#x3D;&#x3D;！否则this的就不是vm了</li><li>methods配置的函数，都是被vue所管理的函数，this的指向是vm或 组件实例对象</li><li>@click&#x3D;”demo” 和@click&#x3D;”demo($event)”效果一样，但后者可以传</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        事件的基本使用</span></span><br><span class="line"><span class="comment">                1.使用v-on:xxx或 @xxx 绑定事件，其中xx为事件名</span></span><br><span class="line"><span class="comment">                2. 事件的回调需要配置在methods对象中，最终会出添加到vm对象上</span></span><br><span class="line"><span class="comment">                3. methods配置的函数，不要使用==箭头函数==！否则this的就不是vm了</span></span><br><span class="line"><span class="comment">4. methods配置的函数，都是被vue所管理的函数，this的指向是vm或 组件实例对象</span></span><br><span class="line"><span class="comment">5。 @click=&quot;demo&quot; 和@click=&quot;demo($event)&quot;效果一样，但后者可以传参</span></span><br><span class="line"><span class="comment">               --&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 添加一个容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;         --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1(不传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 传递参数  ,如果想保留event，使用关键词 $event --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示信息2(传递参数)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm= <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 事件要配置在methods 对象中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// alert(&quot;同学你好&quot;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//此处的this就是指vue实例</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo1</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;同学你好&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo2</span>(<span class="params">evnet,number</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(number);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(vm);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02何为数据代理</title>
      <link href="/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/02%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/02%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &lt;!-- 数据代理：通过一个对象代理对领一个对象中的属性的操作（读/写）  --&gt;</span><br><span class="line"></span><br><span class="line">​    &lt;!-- 这里是ojb2通过数据代理操作和使用object1的x --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        let obj1=&#123;x:100&#125;;</span><br><span class="line">        let obj2=&#123;y:200&#125;;</span><br><span class="line">        Object.defineProperty(obj2,&quot;x&quot;,&#123;</span><br><span class="line">            get()&#123;</span><br><span class="line">                return obj1.x</span><br><span class="line">            &#125;,</span><br><span class="line">            set(value)&#123;</span><br><span class="line">                obj1.x=value</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">​        &#125;)</span><br><span class="line">​    &lt;/script&gt;</span><br><span class="line">​    &lt;!-- </span><br><span class="line">​        1.Vue中的数据代理：</span><br><span class="line">​            通过vm对象来代理data对象中属性的操作 （读/写）</span><br><span class="line">​        2.Vue中数据代理的好处</span><br><span class="line">​            更加方便的操作data中的数据</span><br><span class="line">​        3.基本原理</span><br><span class="line">​            通过object.defineProperty()把data对象中所有属性都添加到vm上。</span><br><span class="line">​            并为每一个添加到vm上的属性，都指定一个getter/setter</span><br><span class="line">​            在getter/setter内部去操作（读/写）data中相应的属性</span><br><span class="line">​     --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">        el:&#x27;#root&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">        name:&#x27;helloworld&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">​    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="数据代理图示："><a href="#数据代理图示：" class="headerlink" title="数据代理图示："></a>数据代理图示：</h2><ol><li>Vue中的数据代理：<ol><li>通过vm对象来代理data对象中属性的操作 （读&#x2F;写）</li></ol></li><li>Vue中数据代理的好处<ol><li>更加方便的操作data中的数据</li></ol></li><li>基本原理</li><li>通过object.defineProperty()把data对象中所有属性都添加到vm上。<br>并为每一个添加到vm上的属性，都指定一个getter&#x2F;setter<br>在getter&#x2F;setter内部去操作（读&#x2F;写）data中相应的属性</li></ol><p><img src="/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/02%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/image-20220724171845259.png" alt="image-20220724171845259"></p><h2 id="额外补充："><a href="#额外补充：" class="headerlink" title="额外补充："></a>额外补充：</h2><ol><li>在vm对象中的_data,vue为了能做响应式，在_data做了&#x3D;&#x3D;<strong>数据劫持</strong>&#x3D;&#x3D;。所以打开_data后看到的不是跟原始data对象一样，而是经过了数据劫持的处理</li></ol><p><img src="/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/02%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/image-20220724171956764.png" alt="image-20220724171956764"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06.Object.defineProperty方法</title>
      <link href="/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/06-Object-defineProperty%E6%96%B9%E6%B3%95/"/>
      <url>/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/06-Object-defineProperty%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Vue中重要的数据代理函数 ——Object.defineProperty函数介绍</p><span id="more"></span><h2 id="1-组成"><a href="#1-组成" class="headerlink" title="1. 组成"></a>1. 组成</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(object,keyName,&#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">let number =21;</span><br><span class="line">    let person=&#123;</span><br><span class="line">        name:&#x27;张三&#x27;,</span><br><span class="line">        sex:&#x27;男&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object.defineProperty(person,&#x27;ages&#x27;,&#123;</span><br><span class="line">        // value:18,</span><br><span class="line">        // enumerable:true  默认添加的value是不可以 枚举 的，即不可以用来循环等</span><br><span class="line">        // for(val in person)&#123;</span><br><span class="line">        // console.log(val);</span><br><span class="line">        //             &#125;</span><br><span class="line">        // writable:true 控制属性是否可以被修改，默认为FALSE</span><br><span class="line">        // configurable:true 控制属性是否可以被删除，默认为FALSE</span><br><span class="line">        //当有人读取person的ages属性时，get函数(getter)就会被调用，且返回值就是age的值</span><br><span class="line">        get()&#123;</span><br><span class="line">            console.log(&quot;有人读取属性了&quot;);</span><br><span class="line">            return number</span><br><span class="line">        &#125;,</span><br><span class="line">        //当有人修改person的ages属性时，set函数(setter)就会被调用,且会接收到修改的具体指</span><br><span class="line">        set(value)&#123;</span><br><span class="line">            console.log(value);</span><br><span class="line">            number=value;//由于get方法中，将number返回当做ages的值，所以这里修改</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h2 id="2-get方法说明"><a href="#2-get方法说明" class="headerlink" title="2. get方法说明"></a>2. get方法说明</h2><blockquote><p>1.当使用此方法时不能再在配置对象中使用value</p><p>2.输出查看以….形式呈现</p></blockquote><p><img src="/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/06-Object-defineProperty%E6%96%B9%E6%B3%95/image-20220724153402562.png" alt="image-20220724153402562"></p><h2 id="3-set方法"><a href="#3-set方法" class="headerlink" title="3.set方法"></a>3.set方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//当有人修改person的ages属性时，set函数(setter)就会被调用,且会接收到修改的具体指</span><br><span class="line">        set(value)&#123;</span><br><span class="line">            console.log(value);</span><br><span class="line">            number=value;//由于get方法中，将number返回当做ages的值，所以这里修改</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>vue通过两个方法实现数据的沟通</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2022/07/23/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/07/23/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>🎢利用hexo+github的pages功能，搭建简易版的个人博客！🐼</p><p style="color:red">来动手试试吧！</p><span id="more"></span><p>[TOC]</p><h2 id="一、搭建准备工作"><a href="#一、搭建准备工作" class="headerlink" title="一、搭建准备工作"></a>一、搭建准备工作</h2><ol><li><p>配置安装好Node.js和Npm(NPM默认跟随Node.js安装)</p><blockquote><p>官方推荐(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</p></blockquote></li></ol><img src="/2022/07/23/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220723202332590.png" alt="image-20220723202332590"><ol start="2"><li>配置好Git环境</li></ol><h2 id="二、搭建和hexo常用命令"><a href="#二、搭建和hexo常用命令" class="headerlink" title="二、搭建和hexo常用命令"></a>二、搭建和hexo常用命令</h2><h3 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1. 安装hexo"></a>1. 安装hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="2-初始化hexo。首先进入你想创建blog的文件夹，启动powershell"><a href="#2-初始化hexo。首先进入你想创建blog的文件夹，启动powershell" class="headerlink" title="2. 初始化hexo。首先进入你想创建blog的文件夹，启动powershell"></a>2. 初始化hexo。首先进入你想创建blog的文件夹，启动powershell</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><blockquote><p>folder 为你想 创建的名字，这里可以自定义，我使用blog<br>hexo init blog</p></blockquote><h3 id="3-进入初始化好的hexo。再使用npm安装配套组件。然后再进入步骤2创建的文件夹，我这里是blog文件夹，你将会看到如下的文件结构。"><a href="#3-进入初始化好的hexo。再使用npm安装配套组件。然后再进入步骤2创建的文件夹，我这里是blog文件夹，你将会看到如下的文件结构。" class="headerlink" title="3. 进入初始化好的hexo。再使用npm安装配套组件。然后再进入步骤2创建的文件夹，我这里是blog文件夹，你将会看到如下的文件结构。"></a>3. 进入初始化好的hexo。再使用npm安装配套组件。然后再进入步骤2创建的文件夹，我这里是blog文件夹，你将会看到如下的文件结构。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">blog/文件下</span></span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这些我们后面再讲</span></span><br></pre></td></tr></table></figure><h3 id="4-开始创建你的第一个hexo博客"><a href="#4-开始创建你的第一个hexo博客" class="headerlink" title="4. 开始创建你的第一个hexo博客"></a>4. 开始创建你的第一个hexo博客</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g #编译生成静态文件 即 ——————&gt;将md文件配合其他文件生成 html+css+js文件</span><br><span class="line">hexo s # 启动本地调试</span><br></pre></td></tr></table></figure><h3 id="5-使用浏览器打开-localhost-4000"><a href="#5-使用浏览器打开-localhost-4000" class="headerlink" title="5. 使用浏览器打开 localhost:4000"></a>5. 使用浏览器打开 localhost:4000</h3><p>**Surprise  !**你的第一个hexo已经完成。</p><p><img src="/2022/07/23/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220723215707288.png" alt="image-20220723215707288"></p><h3 id="6-如果你不太喜欢官方给的主题，那让我们一起来完成主题的更换吧"><a href="#6-如果你不太喜欢官方给的主题，那让我们一起来完成主题的更换吧" class="headerlink" title="6. 如果你不太喜欢官方给的主题，那让我们一起来完成主题的更换吧"></a>6. 如果你不太喜欢官方给的主题，那让我们一起来完成主题的更换吧</h3><h4 id="a-去官方或者github-x2F-gitee-下载你喜欢的主题，并将其保存在themes文件下。"><a href="#a-去官方或者github-x2F-gitee-下载你喜欢的主题，并将其保存在themes文件下。" class="headerlink" title="a. 去官方或者github&#x2F;gitee 下载你喜欢的主题，并将其保存在themes文件下。"></a>a. 去官方或者github&#x2F;gitee 下载你喜欢的主题，并将其保存在themes文件下。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我这里用 next-pure主题做演示</span></span><br><span class="line">cd themes/</span><br><span class="line">git clone git@gitee.com:mirrors_cofess/hexo-theme-pure.git</span><br></pre></td></tr></table></figure><h4 id="b-修改-config-yml文件（blog文件夹下的，这里称为客户端配置文件），主题文件中也有一个，我将它称为主题配置文件"><a href="#b-修改-config-yml文件（blog文件夹下的，这里称为客户端配置文件），主题文件中也有一个，我将它称为主题配置文件" class="headerlink" title="b. 修改_config.yml文件（blog文件夹下的，这里称为客户端配置文件），主题文件中也有一个，我将它称为主题配置文件"></a>b. 修改_config.yml文件（blog文件夹下的，这里称为客户端配置文件），主题文件中也有一个，我将它称为主题配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Extensions</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></span><br><span class="line">theme: landscape</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里的thems 修改为你<span class="built_in">clone</span>后的文件名</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">eg:</span></span><br><span class="line">theme: hexo-theme-pure</span><br></pre></td></tr></table></figure><blockquote><p>注意thems 与值之间有  ”空格“</p></blockquote><h4 id="c-重新执行构建文件"><a href="#c-重新执行构建文件" class="headerlink" title="c. 重新执行构建文件"></a>c. 重新执行构建文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清理一下缓存，为了更好的使用主题</span><br><span class="line">hexo generate #直接使用hexo g也可以</span><br><span class="line">hexo server #直接使用hexo s也可以</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新打开，surprise！</span></span><br></pre></td></tr></table></figure><blockquote><p>具体的美化修改可以看官方的文档。<a href="https://gitee.com/mirrors_cofess/hexo-theme-pure">点击这里进入官方文档</a></p><blockquote><p>另外不要安装官方文档上的<code>hexo-generator-baidu-sitemap</code>插件，这个插件会导致程序报错。</p></blockquote></blockquote><h3 id="7-配置文件介绍"><a href="#7-配置文件介绍" class="headerlink" title="7. 配置文件介绍"></a>7. 配置文件介绍</h3><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> (查看详细请点击)信息，你可以在此配置大部分的参数</p><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package.json&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.8.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p><a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当你新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果你修改scaffold&#x2F;post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><blockquote><p>hexo n “blogName”</p><p>这里默认使用的模板就是post</p></blockquote><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><blockquote><p>我们使用 hexo n “blogName”命令生成新文档后。</p><p>md文件就储存在source&#x2F;_post&#x2F;下</p></blockquote><h3 id="8-如何配置github-x2F-gitee的部署"><a href="#8-如何配置github-x2F-gitee的部署" class="headerlink" title="8. 如何配置github&#x2F;gitee的部署"></a>8. 如何配置github&#x2F;gitee的部署</h3><ol><li>创建github&#x2F;gitee仓库，仓库名称为 [用户名称].github.io。并且要开启github pages服务</li></ol><p><img src="/2022/07/23/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220723223227122.png" alt="image-20220723223227122"></p><blockquote><p>ps:国内的gitee需要实名验证才能开启，但不晓得为什么我就是一直显示在审核中。</p></blockquote><ol start="2"><li>安装deploy插件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><pre><code> 3. 配置 _config.yml文件</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 对应仓库地址 </span><br><span class="line">  branch: #github为main，gitee为master</span><br></pre></td></tr></table></figure><ol start="4"><li>部署到github&#x2F;gitee上</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p> &#x3D;&#x3D;<strong>Congratulation ！完成啦</strong>&#x3D;&#x3D;</p><h2 id="三、解决一些小问题"><a href="#三、解决一些小问题" class="headerlink" title="三、解决一些小问题"></a>三、解决一些小问题</h2><h3 id="1-如何配置实现本地Typora和网页端都能正常显示图片？"><a href="#1-如何配置实现本地Typora和网页端都能正常显示图片？" class="headerlink" title="1. 如何配置实现本地Typora和网页端都能正常显示图片？"></a>1. 如何配置实现本地Typora和网页端都能正常显示图片？</h3><ol><li>安装<a href="https://github.com/EricGerry/hexo-asset-image-0.0.5.git">hexo-asset-image</a>,可以上传本地图片的插件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/EricGerry/hexo-asset-image-0.0.5.git --save</span><br></pre></td></tr></table></figure><blockquote><p>注意，这里必须使用&#x3D;&#x3D;<strong>0.0.5版本</strong>&#x3D;&#x3D;</p></blockquote><ol start="2"><li>配置_config.yml启用文件管理插件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在文件中使用查找功能</span></span><br><span class="line">post_asset_folder: false</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改为</span></span><br><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><ol start="3"><li>重新生成文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;test&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li>然后你会发现在souce&#x2F;_post&#x2F;目录下同时出现了 <em>test.md</em>和<em>test文件夹</em>，将你需要的图片资源丢到里面即可</li><li>最后一步，配置Typora。</li></ol><p><img src="/2022/07/23/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220723222234769.png" alt="image-20220723222234769"></p><blockquote><p>这里一定要勾选 &#x3D;&#x3D;优先使用相对路径&#x3D;&#x3D;</p></blockquote><ol start="6"><li>测试一下，恭喜完成！</li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前段界面响应式布局</title>
      <link href="/2022/07/23/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
      <url>/2022/07/23/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>🎢响应式布局！🐼</p><p><img src="/2022/07/23/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/image-20220720145858207.png" alt="image-20220720145858207"></p><p><img src="/2022/07/23/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/image-20220720145844309.png" alt="image-20220720145844309"></p>]]></content>
      
      
      <categories>
          
          <category> 响应式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前段三剑客 </tag>
            
            <tag> 响应式开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2022/07/23/JavaScript/Promise/1.Promise%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/23/JavaScript/Promise/1.Promise%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>🎢Promise的使用！🐼</p><p style="color:red">来动手试试吧！</p><span id="more"></span><p>promise的当</p><p><img src="/2022/07/23/JavaScript/Promise/1.Promise%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E4%BD%BF%E7%94%A8/image-20220720223120295.png" alt="image-20220720223120295"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2022/07/23/vue/16-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/07/23/vue/16-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<hr><span id="more"></span><p>[TOC]</p><h2 id="自定义指令总结："><a href="#自定义指令总结：" class="headerlink" title="自定义指令总结："></a>自定义指令总结：</h2><p>​        一、定义语法</p><p>​          （1）局部指令：</p><p>​            new Vue({          </p><p>​              directives:{</p><p>​                指令名:配置对象  或</p><p>​              }</p><p>​            })</p><p>​            或</p><p>​            new Vue({</p><p>​              directives:{</p><p>​                指令名:回调函数</p><p>​              }</p><p>​            })</p><p>​          (2)全局指令：</p><p>​            Vue.directive(指令名,配置对象) 或 Vue.directive(指令名,回调函数)</p><p>​        </p><p>​         二、配置对象中常用的3个回调：</p><p>​            (1).bind:指令与元素绑定陈功时调用</p><p>​            (2).inserted:指令所在元素被插入页面时调用</p><p>​            (3).update：指令所在模板结构被重新解析时调用</p><p>​        三、备注</p><p>​            1.指令定义时不加v-，但使用时要加v-</p><p>​            2.指令名如果是多个单词，则要使用kebab-case命名方式，</p><p>​              不要使用camelCase命名（驼峰）</p><h2 id="自定义指令的坑"><a href="#自定义指令的坑" class="headerlink" title="自定义指令的坑:"></a>自定义指令的坑:</h2><ol><li><p>多个单词命名时，不推荐使用 <strong>&#x3D;&#x3D;驼峰命名法&#x3D;&#x3D;</strong></p><p>why ? </p><p>​当你写成 v-bigNumber ，vue会将其转化为 v-bignumber</p><p>当你在directive中使用时就要写</p><p>​bignumber(){}</p><p>Vue推荐的是what?</p><p>​ 使用 ‘-‘ 进行分隔  v-big-number</p><p>在directive配置时，</p><p>​‘big-number’:function(){}</p><blockquote><p>tip : 在书写对象 时，原本的写法就是</p><p>​——–&gt;”key”:value</p><p>只是我们经常使用简写</p><p>​———————-&gt;big(){}</p><p>但简写不支持-这种符号</p><p>​so，需要写回本来的形式</p><p>​—————–’big-number’:function(){}</p></blockquote></li><li><p>**&#x3D;&#x3D;局部指令&#x3D;&#x3D;**只能在同一个Vue实例中使用</p><p>​how？配置全局</p><p>​Vue.directive(‘name’,function&#x2F;Object)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的开始</title>
      <link href="/2022/07/22/vue/01-%E5%88%9D%E5%A7%8Bvue/01.%E5%88%9D%E8%AF%86Vue/"/>
      <url>/2022/07/22/vue/01-%E5%88%9D%E5%A7%8Bvue/01.%E5%88%9D%E8%AF%86Vue/</url>
      
        <content type="html"><![CDATA[<p>VUe的引入</p><span id="more"></span><h1 id="Vue的开始"><a href="#Vue的开始" class="headerlink" title="Vue的开始"></a>Vue的开始</h1><h2 id="1-引入"><a href="#1-引入" class="headerlink" title="1.引入"></a>1.引入</h2><blockquote><p>vue.js是开发板的js文件，带有错误提示；vuemi.js是线上版，不会有提示</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入vuescript,引入完成后HTML中会多了一个vue的构造器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span>=<span class="literal">false</span>;<span class="comment">//阻止vue在启动时生成提示</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//创建Vue实例,参数为配置对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> x=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 链接vue实例与HTML元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,<span class="comment">//element,el用于指定当前vue实例为哪个容器服务，值通常为css选择器字符串。</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// el:documenet.getElementById(&#x27;root&#x27;),这样子写也可以</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>想要Vue工作，就必须创建一个Vue实例，且要传入一个配置对象</li><li>在HTML中创建容器，并在配置对象中用<em><strong>el</strong></em>，传入</li><li>容器内的代码依旧符合HTML规范，只不过混入了一些&#x3D;&#x3D;特殊的Vue语法&#x3D;&#x3D;。</li><li>容器里的代码被称为vue模块</li><li>Vue实例与容器只能是&#x3D;&#x3D;一一对应&#x3D;&#x3D;的关系</li><li>中的xxx要写==js表达式==,且xxx可以直接读取到data中的==所有属性==。</li><li>当Vue实例中的data发生变化是，页面中用到该数据的地方也会自动刷新。</li></ol><h3 id="区分什么是-x3D-x3D-js表达式-x3D-x3D-，什么是-x3D-x3D-js代码（或者说语句）-x3D-x3D"><a href="#区分什么是-x3D-x3D-js表达式-x3D-x3D-，什么是-x3D-x3D-js代码（或者说语句）-x3D-x3D" class="headerlink" title="区分什么是&#x3D;&#x3D;js表达式&#x3D;&#x3D;，什么是&#x3D;&#x3D;js代码（或者说语句）&#x3D;&#x3D;"></a>区分什么是&#x3D;&#x3D;js表达式&#x3D;&#x3D;，什么是&#x3D;&#x3D;js代码（或者说语句）&#x3D;&#x3D;</h3><ol><li><p>表达式：一个表达式会产生一个&#x3D;&#x3D;值&#x3D;&#x3D;，可以放在任何需要值的地方。</p><p>eg:</p><pre><code>- a(在已经定义好a变量后，再使用a，就会得到它对应的值)- a+b，这明显是一个 ‘加法运算的表达式’- function(1) ——这是一个调用函数并得到其返回值的形式- x==y?a:b ——三元表达式</code></pre></li><li><p>js代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 控制顺序，例如 <span class="keyword">if</span>()&#123;&#125;</span><br><span class="line">- <span class="keyword">for</span>()&#123;&#125;、、</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的模块语法及数据的双向绑定</title>
      <link href="/2022/07/22/vue/02.Vue%E7%9A%84%E6%A8%A1%E5%9D%97%E8%AF%AD%E6%B3%95%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/02.Vue%E7%9A%84%E6%A8%A1%E5%9D%97%E8%AF%AD%E6%B3%95%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
      <url>/2022/07/22/vue/02.Vue%E7%9A%84%E6%A8%A1%E5%9D%97%E8%AF%AD%E6%B3%95%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/02.Vue%E7%9A%84%E6%A8%A1%E5%9D%97%E8%AF%AD%E6%B3%95%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>VUe的的基本语法</p><span id="more"></span><h1 id="1-2模块语法、数据单-双-向绑定"><a href="#1-2模块语法、数据单-双-向绑定" class="headerlink" title="1.2模块语法、数据单(双)向绑定"></a>1.2模块语法、数据单(双)向绑定</h1><h2 id="一、模块语法"><a href="#一、模块语法" class="headerlink" title="一、模块语法"></a>一、模块语法</h2><blockquote><p>可分为：1.插值语法、2.指令语法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">      &lt;!-- 插值语法--&gt;</span><br><span class="line">      &lt;h1&gt;插值语法&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;!-- 指令语法--&gt;</span><br><span class="line">      &lt;h1&gt;指令语法&lt;/h1&gt;</span><br><span class="line">      &lt;a v-bind:href=&quot;url&quot;&gt;点我进入百度&lt;/a&gt;</span><br><span class="line">      &lt;!--简写--&gt;</span><br><span class="line">      &lt;a :href=&quot;school.url&quot;&gt;点我进入bing&lt;/a&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">      el:&#x27;#root&#x27;,</span><br><span class="line">      data:&#123;</span><br><span class="line">          name:&#x27;helloworld&#x27;,</span><br><span class="line">          url:&#x27;www.baidu.com&#x27;,</span><br><span class="line">          school:&#123;</span><br><span class="line">              url:&#x27;www.bing.com&#x27;</span><br><span class="line">          &#125;,</span><br><span class="line">          input:&#x27;value&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Vue模块语法有2大类：</p><ol><li><p>插值语法</p><ul><li><p>功能：用于解析&#x3D;&#x3D;标签体内容&#x3D;&#x3D;</p></li><li><p>写法：，xxx是&#x3D;&#x3D;js表达式&#x3D;&#x3D;,且可以&#x3D;&#x3D;直接读取&#x3D;&#x3D;(如果是date里面对象的值则需要使用object.propertyName访问)到data中的所有属性</p></li><li><p>备注：</p><ul><li>如果同一个变量在同一级中进行了多次赋值，则以&#x3D;&#x3D;最后一次赋值&#x3D;&#x3D;为准</li></ul></li></ul></li><li><p>指令语法</p><ul><li>功能：用于解析标签（包括标签属性、标签体内容、绑定时间……）</li><li>写法举例：<ul><li>绑定标签属性：v-bind:href&#x3D;’xxx’, <strong>xxx直接为名字</strong></li><li>或简写为 :href&#x3D;’xxx’,xxx同样要写&#x3D;&#x3D;js表达式&#x3D;&#x3D;</li></ul></li><li>备注：<ul><li><ol><li>Vue中有许多的指令，且形式都是 v-??，这里只是一个举例</li><li>v-bind是&#x3D;&#x3D;<strong>单向数据绑定</strong>&#x3D;&#x3D;</li></ol></li></ul></li></ul><blockquote><p>这里需要注意一下，微信小程序中的指令语法写法与插值语法相同</p><p>eg: <view width> </view></p></blockquote></li></ol><h2 id="二、双向数据绑定"><a href="#二、双向数据绑定" class="headerlink" title="二、双向数据绑定"></a>二、双向数据绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-mode</span>=<span class="string">&#x27;name&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 普通写法 单向数据绑定 --&gt;</span></span><br><span class="line">    单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 简写 v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值--&gt;</span></span><br><span class="line">    单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>Vue中有2种数据绑定的方式：</p><ol><li><p>单向绑定(v-bind)：数据只能从data流向页面</p></li><li><p>双向绑定(v-model)：数据不仅能从data流向页面，还可以从&#x3D;&#x3D;页面流向data&#x3D;&#x3D;</p></li></ol><blockquote><p>1.双向绑定一般都应用在表单类元素上（如：input、select等）</p></blockquote><blockquote><p>2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el与data的两种写法+vue实例</title>
      <link href="/2022/07/22/vue/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/"/>
      <url>/2022/07/22/vue/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>el与data的两种写法+vue实例</p><span id="more"></span><h1 id="el与data的两种写法-vue实例"><a href="#el与data的两种写法-vue实例" class="headerlink" title="el与data的两种写法+vue实例"></a>el与data的两种写法+vue实例</h1><h2 id="一、-认识vue实例"><a href="#一、-认识vue实例" class="headerlink" title="一、.认识vue实例"></a>一、.认识vue实例</h2><p><img src="/2022/07/22/vue/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/image-20220720233419940.png" alt="image-20220720233419940"></p><p> 1.1，以$开头的字符都是vue准备好给小程序用的</p><p>1.2 以_是vue底层在使用的</p><p><img src="/2022/07/22/vue/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/image-20220720234345244.png" alt="image-20220720234345244"></p><p>1.3 使用vue原型缔造对象的方法</p><p><img src="/2022/07/22/vue/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/image-20220720234416167.png" alt="image-20220720234416167"></p><h2 id="二、el的第二种写法"><a href="#二、el的第二种写法" class="headerlink" title="二、el的第二种写法"></a>二、el的第二种写法</h2><ol><li>简介</li></ol><p>​vue实例构造器里的方法</p><p>​v.#mount(‘xx’) ——xxx为<strong>css的选择器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// el:&#x27;#root&#x27;, //第一种写法</span></span></span><br><span class="line"><span class="language-javascript">     <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">name</span>:<span class="string">&#x27;helloworld&#x27;</span></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript">     v.$mount(<span class="string">&#x27;#root&#x27;</span>) <span class="comment">//第二种写法</span></span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、-data的两种写法"><a href="#三、-data的两种写法" class="headerlink" title="三、 data的两种写法"></a>三、 data的两种写法</h2>   <script>       new Vue({        // el:'#root', //el第一种写法        data:{//data的第一种写法        name:'helloworld'        }        v.$mount('#root') //el第二种写法        //data第二种写法,函数式              data:function(){           return{               name:'尚硅谷'           }       }       or:       data:      })        </script><p>​      </p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>el有2种写法</p><ul><li>new Vue时候配置el属性</li><li>先创建Vue实例，随后再通过使用vue原型中的mount方法，vm.$mount(‘#root’)指定el的值</li></ul><p>data有2种写法</p><ul><li><p>对象式</p></li><li><p>函数式</p><blockquote><p>如何选择：在组件中，data必须使用函数式</p></blockquote></li></ul><p>一个重要的原则：由vue管理的函数，一定不要写&#x3D;&#x3D;箭头函数&#x3D;&#x3D;，一旦写了箭头函数，this就不再是vue实例了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的MVVM设计模式</title>
      <link href="/2022/07/22/vue/04.Vue%E4%B8%AD%E7%9A%84MVVM/04.Vue%E4%B8%AD%E7%9A%84MVVM/"/>
      <url>/2022/07/22/vue/04.Vue%E4%B8%AD%E7%9A%84MVVM/04.Vue%E4%B8%AD%E7%9A%84MVVM/</url>
      
        <content type="html"><![CDATA[<p>Vue中的MVVM设计模式</p><span id="more"></span><h1 id="Mvvw"><a href="#Mvvw" class="headerlink" title="Mvvw"></a>Mvvw</h1><p><img src="/2022/07/22/vue/04.Vue%E4%B8%AD%E7%9A%84MVVM/04.Vue%E4%B8%AD%E7%9A%84MVVM/image-20220721001442128.png" alt="image-20220721001442128"></p><p><img src="/2022/07/22/vue/04.Vue%E4%B8%AD%E7%9A%84MVVM/04.Vue%E4%B8%AD%E7%9A%84MVVM/image-20220721001558095.png" alt="image-20220721001558095"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>M：模型(Model) ：data中的数据</li><li>V：视图(View) ：模板代码</li><li>VM：视图模型(ViewModel)：Vue实例</li></ul><h3 id="观察发现"><a href="#观察发现" class="headerlink" title="观察发现"></a>观察发现</h3><p>​MVM模型：</p><ol><li>data上的所有属性，最终都会出现在vm身上。</li><li>vm身上所有的属性，及vue原型上所有属性，在vue模块上都可以直接使用</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4-%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8/1-%E6%9E%84%E9%80%A0%E5%99%A8/"/>
      <url>/2022/07/20/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4-%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8/1-%E6%9E%84%E9%80%A0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><h3 id="一、构造器的简介："><a href="#一、构造器的简介：" class="headerlink" title="一、构造器的简介："></a>一、构造器的简介：</h3><p>​是类的一种特殊的方法，它的主要作用是完成对<code>==新对象的初始化==</code>。</p><p>​&#x3D;&#x3D;&#x3D;&gt;在创建完对象后，才进行的初始化，而不是用它来创建对象。</p><p><img src="/2022/07/20/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4-%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8/1-%E6%9E%84%E9%80%A0%E5%99%A8/image-20221012220702986.png" alt="image-20221012220702986"></p><h3 id="二、构造器的特点"><a href="#二、构造器的特点" class="headerlink" title="二、构造器的特点"></a>二、构造器的特点</h3><ol><li><p>方法名和类名相同。</p></li><li><p>没有返回值。（&#x3D;&#x3D;同时不能写void关键字，留空即可！！！！&#x3D;&#x3D;）</p></li><li><p>在创建对象时，系统会自动的调用该类的构造器完成对对象的初始化。</p></li></ol><p><img src="/2022/07/20/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4-%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8/1-%E6%9E%84%E9%80%A0%E5%99%A8/image-20220720234732290.png" alt="image-20220720234732290"></p><h3 id="三、构造器的注意事项和细节"><a href="#三、构造器的注意事项和细节" class="headerlink" title="三、构造器的注意事项和细节"></a>三、构造器的注意事项和细节</h3><ol><li>一个类中可以定义多个不同的构造器，即&#x3D;&#x3D;构造器重载&#x3D;&#x3D;</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class sequenceArray&#123;</span><br><span class="line">    int age;</span><br><span class="line">    String name;</span><br><span class="line">    sequenceArray()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    sequenceArray(int age,String name)&#123;</span><br><span class="line">        this.age=age;</span><br><span class="line">        this.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>构造器名与类名相同</p></li><li><p>构造器没有返回值（不能写void!!!!!!!!）</p></li><li><p>构造器是完成对对象的初始化，并不是创建对象！</p></li><li><p>在创建对象时，系统自动的调用该类的构造方法</p></li><li><p>如果程序猿没有定义构造器，系统会自动给类生成一个默认午参构造器(也叫默认构造器)，比如Dog()，使用<code>javap指令</code>进行反编译。</p><ol><li><img src="/2022/07/20/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4-%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8/1-%E6%9E%84%E9%80%A0%E5%99%A8/image-20221012224832331.png" alt="image-20221012224832331"></li></ol></li><li><p>一旦定义了自己的构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显式的定义一下，即Dog(){}（这点很重要）</p></li><li><p>在构造器中可以使用this()方法调用本类中的另一个构造器，且this方法只能在第一行。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>7-GoF代理模式</title>
      <link href="/2022/07/20/SSM/Spring/7-GoF%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/07/20/SSM/Spring/7-GoF%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、扩展——类与类之间的关系"><a href="#一、扩展——类与类之间的关系" class="headerlink" title="一、扩展——类与类之间的关系"></a>一、扩展——类与类之间的关系</h3><h3 id="1-泛化关系-继承-is-a"><a href="#1-泛化关系-继承-is-a" class="headerlink" title="1.泛化关系 继承  is a"></a>1.泛化关系 继承  is a</h3><p>Cat is Anima</p><p>public class Animal(){}</p><p>public calss Cat extends Animal（）{}</p><h3 id="2-关联关系-has-a"><a href="#2-关联关系-has-a" class="headerlink" title="2.关联关系 has a"></a>2.关联关系 has a</h3><p>张三 is a aapple   </p><p><img src="/2022/07/20/SSM/Spring/7-GoF%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/image-20220720223608138.png" alt="image-20220720223608138"></p><h3 id="二、动态代理机制"><a href="#二、动态代理机制" class="headerlink" title="二、动态代理机制"></a>二、动态代理机制</h3><p>1.JDK自带的动态代理</p><blockquote><p>核心：proxy 类 的 newProxyInstance 方法</p></blockquote><p><strong>原理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> //创建代理对象</span><br><span class="line">/*做了两件事</span><br><span class="line">        1。在内存中动态生成了一个代理类的字节码class</span><br><span class="line">        2.new对象了，通过内存中生成的代理类 这个代码，实例化了代理对象。</span><br><span class="line">        *</span><br><span class="line">        * */</span><br><span class="line">//Proxy.newProxyInstance(类加载器，代理类要实现的接口，调用处理器)</span><br><span class="line">调用 处理器是一个实现了 InvocationHandler 接口的类。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/JavaScript/ES6/"/>
      <url>/2022/07/20/JavaScript/ES6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ES6</p></blockquote><ol><li>双引号&#x2F;单引号， ’‘，普通的单&#x2F;双引号 <code>==不能实现换行==</code>,如果想要<code>内容中换行</code>，需要使用 &#x3D;&#x3D;反单引号&#96;&#x3D;&#x3D;</li></ol><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var test=`</span><br><span class="line">213213</span><br><span class="line">`</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/JavaScript/Untitled/"/>
      <url>/2022/07/20/JavaScript/Untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/JavaScript/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/07/20/JavaScript/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>构造函数就相当于 java 中的class ，具有泛指的类，是具有一些方法和属性的集合  ——————&gt; &#x3D;&#x3D;抽象的&#x3D;&#x3D;</p><p>而对象是一个**&#x3D;&#x3D;具体的实物&#x3D;&#x3D;**</p><p>​new 构造函数()，使用构造函数创建对象的过程 ——————&gt; 对象的实例化</p><p><img src="/2022/07/20/JavaScript/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E8%B1%A1/image-20220720205459754.png" alt="image-20220720205459754"></p><p>new关键字执行过程</p><ol><li><p>当构造函数遇到new时，就会在内存中创建一个新的空对象</p></li><li><p>函数的 <strong>&#x3D;&#x3D;this&#x3D;&#x3D;</strong> 指向刚刚创建的空对象</p></li><li><p>执行构造函数里面的代码，给这个空对象添加属性和方法</p></li><li><p>返回这个对象</p></li></ol><p><img src="/2022/07/20/JavaScript/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E8%B1%A1/image-20220720210308949.png" alt="image-20220720210308949"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/JAVA/0-Java%E7%BB%86%E8%8A%82/Java%E5%BC%80%E5%8F%91%E7%BB%86%E8%8A%82/"/>
      <url>/2022/07/20/JAVA/0-Java%E7%BB%86%E8%8A%82/Java%E5%BC%80%E5%8F%91%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote><p>Java中有一些细节的问题需要我们注意,这里进行详细的解释,避免后期踩坑.</p></blockquote><ol><li><p>如果Java文件中<code>有且只能有##一个##public类</code>,</p><ol><li><p>如果public存在时， 文件名<code>必须</code>按该类名来命名。</p></li><li><p>其他类的个数不限制。</p><ol><li><blockquote><p>同时，每一个类，在编译后都对应一个.class文件</p></blockquote></li></ol></li></ol></li><li><p>main方法是java的程序入口，它具有固定的写法。</p><ul><li><p>只能有一个，但是位置不限（可存在public类，或其他类中）</p></li><li><p>可以将main方法写在其他非public类中，然后<code>指定运行</code>非public类，这样入口方法就是非public的main方法。</p></li><li><blockquote><p>指定运行，即运行时，使用 java xxx(类名)</p></blockquote></li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老韩推荐的学习方法：</p><p><img src="/2022/07/20/JAVA/0-Java%E7%BB%86%E8%8A%82/Java%E5%BC%80%E5%8F%91%E7%BB%86%E8%8A%82/image-20220921204316192.png" alt="image-20220921204316192"></p><ol start="3"><li><p>可变参数一定要写在形参的第一个位置。</p></li><li><p>在构造器中使用this调用另一个构造器时，一定要把把把this调用语句放在第一位。0</p></li><li><p>使用 System.out.println(对象名) ,的时候，默认会调用 对象的 &#x3D;&#x3D;toString方法&#x3D;&#x3D;，使用其返回值进行输出</p></li><li><p>三元操作符必须要返回一个数据。而且类型要确定，不可能条件为真时返回int类型，条件为假时返回float类型，编译器是不允许如此的，所以它就会进行类型转换了. 会根据运算符的精确度类型进行自动类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Object object1=<span class="literal">true</span>? <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>):<span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);</span><br><span class="line">    System.out.println(object1); ----&gt;<span class="number">1.0</span>?</span><br><span class="line">        A：为什么是<span class="number">1.0</span> 而不是<span class="number">1</span>？</span><br><span class="line">        Q；三元运算符需要==看成一个整体==，它会返回一个数据，而且类型要确定，不可能条件为真时返回<span class="type">int</span> ，条件为假时为 <span class="type">double</span>，和其他运算符相同，会自动进行 ==类型转换==,根据运算符的精确度进行==自动类型转换==，--&gt;最高级</span><br></pre></td></tr></table></figure><p><img src="/2022/07/20/JAVA/0-Java%E7%BB%86%E8%8A%82/Java%E5%BC%80%E5%8F%91%E7%BB%86%E8%8A%82/image-20221119151901581.png" alt="image-20221119151901581"></p></li></ol><h4 id="7-x3D-x3D-和-equal"><a href="#7-x3D-x3D-和-equal" class="headerlink" title="7.&#x3D;&#x3D; 和 equal"></a>7.&#x3D;&#x3D; 和 equal</h4><ol><li>&#x3D;&#x3D;<ol><li>基本数据类型 —&gt;比较值</li><li>对象 —-&gt;比较地址</li></ol></li><li>equal<ol><li>部分类中进行了重写。</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/vue/18-%E9%9D%9E%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/VueComponent/"/>
      <url>/2022/07/20/vue/18-%E9%9D%9E%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/VueComponent/</url>
      
        <content type="html"><![CDATA[<h2 id="vueComponet的分析"><a href="#vueComponet的分析" class="headerlink" title="vueComponet的分析"></a>vueComponet的分析</h2><p>关于VueComponent：<br>            1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</p><blockquote><p>​ 2.我们只需要写<school>或<school></school>，Vue解析时会帮我们创建school组件的实例对象，<br>​即Vue帮我们执行的：new VueComponent(options)。<br>​                        当我们书写<school>或 <shcool></shcool></school>时，vue会自动解析并帮我们调用new VueComponet(options)创建出一个新的实例<br>​3.特别注意：<code>每次</code>调用Vue.extend，返回的都是一个<code>全新</code>的VueComponent！！！！</school></p></blockquote><p>​—-&gt; 验证过程如下</p><blockquote><p>​4.关于this指向：<br>​(1).组件配置中：<br>​data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。<br>​(2).new Vue(options)配置中：<br>​data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。<br>​5.VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。<br>​Vue的实例对象，以后简称vm。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;school&gt;&lt;/school&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.config.productionTip = false;</span><br><span class="line">    var school=Vue.extend(&#123;</span><br><span class="line">        name:&quot;school&quot;,</span><br><span class="line">        template:`</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;school&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;`,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                hello:&quot;hello&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    var student=Vue.extend(&#123;</span><br><span class="line">        name:&quot;student&quot;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                hello:&quot;hello&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    这里为验证过程</span><br><span class="line">    // 验证两个vuecomponent</span><br><span class="line">    // 方式一 直接判断</span><br><span class="line">    // console.log(student==school); --&gt;false</span><br><span class="line">    // </span><br><span class="line">    //方式二往school上添加东西,如果school和student是同一个东西,那student上也会有</span><br><span class="line">    // 结果为undefined</span><br><span class="line">    // school.a=99</span><br><span class="line">    // console.log(school.a,student.a); </span><br><span class="line">    //             --&gt; 99 undefined</span><br><span class="line">    // 方式三查看源码</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    /* </span><br><span class="line">``      Vue.extend=function(extendOptions)&#123;</span><br><span class="line">    ……</span><br><span class="line">    var Sub =function vueComponet (options)&#123;</span><br><span class="line">        this._init(options);</span><br><span class="line">        //这里每次调用vuecomponent时，就会创建一个sub函数变量，并且返回该函数变量</span><br><span class="line">        //每一次调用时，sub都是现定义的</span><br><span class="line">        //固</span><br><span class="line">        //</span><br><span class="line">        //每次调用vue.extend时，都会生成一个新的vuecompont的构造器函数</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">    return Sub;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line">console.log(student);</span><br><span class="line">    var vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;#root&#x27;,</span><br><span class="line">        components:&#123;school,student&#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1-数列入门.md</title>
      <link href="/2022/07/20/JAVA/1-%E5%8F%98%E9%87%8F/3-%E6%95%B0%E5%88%97/1-%E6%95%B0%E5%88%97%E5%85%A5%E9%97%A8/"/>
      <url>/2022/07/20/JAVA/1-%E5%8F%98%E9%87%8F/3-%E6%95%B0%E5%88%97/1-%E6%95%B0%E5%88%97%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><ol><li>默认初始化<ol><li>无论作为成员变量还是class全局变量，数组变量都会有初始化</li></ol></li></ol><blockquote><p>数组变量无论作为什么变量，都有默认初始化</p></blockquote><ol start="2"><li><p>创建</p><ol><li><p>静态初始化</p><ol><li><pre><code class="java">type[] parameterName = new Type[]&#123;data&#125; int[] arr =new int[]&#123;1，2，4，4&#125;;//or int[] arr=&#123;1,2,4,4&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 二、一些细节</span><br><span class="line"></span><br><span class="line">1. 索引越界</span><br><span class="line"></span><br><span class="line">   1. 访问了数组不存在的索引对应的元素，造成索引越界。</span><br><span class="line"></span><br><span class="line">2. 空指针异常</span><br><span class="line"></span><br><span class="line">   1. 当数组变量不再指向堆内存中的数组数据时，造成空指针异常</span><br><span class="line"></span><br><span class="line">      1. ```java</span><br><span class="line">         int [] arr=&#123;1,10,-1&#125;;</span><br><span class="line">                 arr=null;</span><br><span class="line">                 System.out.println(arr[1]);</span><br><span class="line">         Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">         at com.jhfuture.Array.main.main(main.java:8)</span><br></pre></td></tr></table></figure></code></pre></li><li></li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/vue/24-vueX/vuex/"/>
      <url>/2022/07/20/vue/24-vueX/vuex/</url>
      
        <content type="html"><![CDATA[<h1 id="vueX"><a href="#vueX" class="headerlink" title="vueX"></a>vueX</h1><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><blockquote><p> 在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</p></blockquote><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​     &#x3D;&#x3D;多个组件&#x3D;&#x3D;需要共享数据时</p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   actions,</span><br><span class="line">   mutations,</span><br><span class="line">   state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">   <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">   store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line">   <span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line">   <span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">      state.<span class="property">sum</span> += value</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   actions,</span><br><span class="line">   mutations,</span><br><span class="line">   state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">   <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   ......</span><br><span class="line">   getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3-单行命令.md</title>
      <link href="/2022/07/20/MySQL/3-%E5%8D%95%E8%A1%8C%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/07/20/MySQL/3-%E5%8D%95%E8%A1%8C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="一、简要介绍"><a href="#一、简要介绍" class="headerlink" title="一、简要介绍"></a>一、简要介绍</h3><p>​单行处理，多行输出</p><p>特点：一行一行处理，每一行输出一个结果。</p><blockquote><p> <strong>注意注意注意</strong><br> 单行函数中有 null 参与的数字运算最终值 总是null </p><p> 1.+  -   *  &#x2F;  四则运算</p><hr><p> 2.多行命令中没有————-</p></blockquote><p>​</p><h3 id="二、常用"><a href="#二、常用" class="headerlink" title="二、常用"></a>二、常用</h3><ol><li><p>lower (字段) 转小写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">lower</span>(job) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">lower</span>(job) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="operator">|</span> clerk      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salesman   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salesman   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> manager    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salesman   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> manager    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> manager    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> analyst    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> president  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> salesman   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> clerk      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> clerk      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> analyst    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> clerk      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>upper (字段) 转大小</p></li><li><p>substr(字段,起始下表,截取长度) 取字符 &#x3D;&#x3D;在sql的字符串中，字符串的下表是从1开始的&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> substr(job,<span class="number">1</span>,<span class="number">3</span>) <span class="keyword">from</span> emp;</span><br><span class="line">## CLE</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> substr(job,<span class="number">1</span>,<span class="number">3</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> CLE <span class="comment">--&gt;clerk    |</span></span><br><span class="line"><span class="operator">|</span> SAL             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SAL             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MAN             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SAL             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MAN             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MAN             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANA             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> PRE             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SAL             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLE             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLE             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANA             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLE             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>concat(a,b) 将 b 字符串拼接到 a 的尾部。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> concat(job,mgr) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> concat(job,mgr) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> CLERK7902       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN7698    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN7698    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER7839     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN7698    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER7839     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MANAGER7839     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST7566     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SALESMAN7698    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLERK7788       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLERK7698       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ANALYST7566     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CLERK7782       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>额外的小知识</p><ol><li><p>length(字段) 获取字段的长度</p></li><li><p>round(数字,保留的小数位),保留位为0则只保留整数位，且保留的值会进行四舍五入  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> round(<span class="number">0.55</span>,<span class="number">0</span>) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span> round(<span class="number">0.55</span>,<span class="number">0</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li><li><p>rand() 生成0到1的随机数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> rand() <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span> rand()               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0.6586841099510753</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0.4807403501875143</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0.4276494518179907</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0.6960262392610556</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0.19718287158495082</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0.8978356708752323</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0.8976297703549543</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0.7946418698827195</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">0.2803200690823794</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0.017674766497383608</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0.24741365597342482</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0.18404401110861823</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">0.17797911835646174</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">0.337763589190099</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ol></blockquote><ol start="4"><li><p>四则运算</p><ol><li><ul><li></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> sal<span class="operator">+</span>comm <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> sal<span class="operator">+</span>comm <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1900.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1750.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2650.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1500.00</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">14</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>Lower 转换小写 </p><p>upper 转换大写 </p><p>substr 取子串（substr(被截取的字符串,起始下标, 截取的长度)）</p><p>length() 取长度 </p><p>trim 去空格 </p><p>str_to_date 将字符串转换成日期 </p><p>date_format 格式化日期 </p><p>format 设置千分位 </p><p>round 四舍五入 </p><p>rand() 生成随机数 </p><p>Ifnull 可以将 null 转换成一个具体值</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态数组</title>
      <link href="/2022/07/20/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/6-%E5%A4%9A%E6%80%81/2-%E5%A4%9A%E6%80%81%E7%9A%84%E5%BA%94%E7%94%A8/1-%E5%A4%9A%E6%80%81%E6%95%B0%E7%BB%84/"/>
      <url>/2022/07/20/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/6-%E5%A4%9A%E6%80%81/2-%E5%A4%9A%E6%80%81%E7%9A%84%E5%BA%94%E7%94%A8/1-%E5%A4%9A%E6%80%81%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="/2022/07/20/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/6-%E5%A4%9A%E6%80%81/2-%E5%A4%9A%E6%80%81%E7%9A%84%E5%BA%94%E7%94%A8/1-%E5%A4%9A%E6%80%81%E6%95%B0%E7%BB%84/image-20220720180345157.png" alt="image-20220720180345157"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jhfuture.poly._polyarr__;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PloyArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Person person[]=<span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">3</span>];</span><br><span class="line">        person[<span class="number">0</span>]=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;这是个人&quot;</span>);</span><br><span class="line">        person[<span class="number">1</span>]=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小明&quot;</span>,<span class="number">15</span>);</span><br><span class="line">        person[<span class="number">2</span>]=<span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;李老师&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;person.length ; i++) &#123;</span><br><span class="line">            <span class="comment">//调用每一个say</span></span><br><span class="line">            <span class="comment">//输出结果由每一个运行类型决定</span></span><br><span class="line">            person[i].say();</span><br><span class="line">            <span class="keyword">if</span> (person[i] <span class="keyword">instanceof</span>  Student)&#123;</span><br><span class="line">                ((Student)person[i]).Study();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (person[i] <span class="keyword">instanceof</span>  Teacher)&#123;</span><br><span class="line">                ((Teacher)person[i]).teacher();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//应用实例：现有一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;here is Person&quot;</span>+getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    Person()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span>  <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;here is Student&quot;</span>+getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;可以学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span>  <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">double</span> salery;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;here is Teacher&quot;</span>+getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">( String name1, <span class="type">double</span> salery)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name1;</span><br><span class="line">        <span class="built_in">this</span>.salery = salery;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teacher</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;可以教书&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalery</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalery</span><span class="params">(<span class="type">double</span> salery)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salery = salery;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出</span></span><br><span class="line">here is Person这是个人</span><br><span class="line">here is Student小明</span><br><span class="line">可以学习</span><br><span class="line">here is Teacher李老师</span><br><span class="line">可以教书</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多态数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/%E6%A0%91%E8%8E%93%E6%B4%BE/%E4%BF%AE%E6%94%B9usb%E5%90%AF%E5%8A%A8/"/>
      <url>/2022/07/20/%E6%A0%91%E8%8E%93%E6%B4%BE/%E4%BF%AE%E6%94%B9usb%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>引脚图</p><p><img src="https://img-blog.csdnimg.cn/2020030311551983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjE2NDcx,size_16,color_FFFFFF,t_70" alt="图1.1 树莓派4B引脚分布"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正式开始之前先说一下为什么4B的USB启动这么姗姗来迟。</p><p>要了解这个问题，我们先要了解一下4B之前的版本的启动流程，主要分为四个阶段：</p><ol><li>GPU读取芯片上一个ROM的内容并执行</li><li>ROM中的程序挂载SD卡并加载第一个FAT分区上的bootcode.bin</li><li>bootcode.bin从FAT分区加载start.elf</li><li>start.elf从FAT分区加载kernel.img，然后唤醒CPU,CPU开始执行kernel.img</li></ol><p>从这个流程中可以看到，第一阶段的BootLoader是从芯片上的ROM中读取的，ROM里的代码是出厂定制好的后期不能再改变。然而随着4B的硬件升级，USB被移到了PCIe总线，网卡也用了新的型号，再加上4B启动过程和SDRAM的设置远比之前的型号要复杂的多，继续使用集成在SoC ROM中的代码是有很大风险的，所以4B增加了一块EEPROM来解决这个问题，启动程序写入到EEPROM中来取代bootcode.bin的工作，启动程序的bug修复和新功能添加都方便了很多。</p><p>启动机制改动还是挺大的，所以USB启动姗姗来迟还是可以理解的。</p><p>关于EEPROM和4B启动流程的内容可以参考下面两篇文章：</p><ul><li><a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/booteeprom.md">pi4 eeprom</a></li><li><a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bootmodes/bootflow_2711.md">pi4 bootflow</a></li></ul><h2 id="更新eeprom"><a href="#更新eeprom" class="headerlink" title="更新eeprom"></a>更新eeprom</h2><h3 id="1、使用rpi-eeprom更新"><a href="#1、使用rpi-eeprom更新" class="headerlink" title="1、使用rpi-eeprom更新"></a>1、使用<code>rpi-eeprom</code>更新</h3><p>最新的官方系统里已经集成了rpi-eeprom包来升级eeprom，官方github上有这个项目的源码，如果不是官方系统可以clone此项目来升级eeprom，项目地址是：<a href="https://github.com/raspberrypi/rpi-eeprom%EF%BC%8C%E9%87%8C%E9%9D%A2%E5%8C%85%E5%90%AB%E5%8D%87%E7%BA%A7%E8%84%9A%E6%9C%AC%E5%92%8C%E5%9B%BA%E4%BB%B6%E3%80%82">https://github.com/raspberrypi/rpi-eeprom，里面包含升级脚本和固件。</a></p><p>三方系统(例如树莓派爱好者基地2.0系统)升级方法<a href="https://blog.csdn.net/nanhantianyi/article/details/106542883">请看这里</a>，这篇文章介绍官方系统的升级方法：</p><p>整个升级过程都需要root权限，如果你是用pi用户登录的，先执行<code>sudo -i</code>切换到root用户。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#升级系统软件包</span><br><span class="line">apt update</span><br><span class="line">apt upgrade</span><br></pre></td></tr></table></figure><p>然后编辑<code>/etc/default/rpi-eeprom-update</code>文件，把内容改为<code>FIRMWARE_RELEASE_STATUS=&quot;beta&quot;</code></p><p>如果想用固件的默认配置直接执行<code>rpi-eeprom-update -d -a</code>，然后重启完成升级。</p><p>如果想修改eeprom的参数配置，请参考<a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2711_bootloader_config.md">这里</a>。</p><p>重启后进入系统验证一下eeprom固件版本，执行<code>rpi-eeprom-update</code>，如果BOOTLOADER的版本在<code>2020-05-15</code>及以上就可以USB启动了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/2-%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2022/07/20/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/2-%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>为了保护java类中的属性&#x2F;方法&#x2F;类本身—&gt;封装</p><h3 id="一、类型"><a href="#一、类型" class="headerlink" title="一、类型"></a>一、类型</h3><ol><li>public<ol><li>特点：<ol><li>本类—–&gt; yes</li><li>子类—–&gt; yes</li><li></li></ol></li></ol></li></ol><table><thead><tr><th align="center">访问级别</th><th>访问控制修饰符</th><th>同类</th><th>同包</th><th>子类</th><th>不同包</th></tr></thead><tbody><tr><td align="center">公开</td><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td align="center">受保护的</td><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td align="center">默认</td><td>没有修饰符</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td align="center">私有</td><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h3 id="二、使用的注意事项"><a href="#二、使用的注意事项" class="headerlink" title="二、使用的注意事项"></a>二、使用的注意事项</h3><ol><li>修饰符可以用来修饰类的属性、成员方法及类本身</li><li>只有默认修饰符和public可以修饰class</li><li>成员方法的访问规则和属性完全一样。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/%E9%9A%8F%E8%BA%ABWiFi%E7%9A%84%E6%8A%98%E8%85%BE/Debian/"/>
      <url>/2022/07/20/%E9%9A%8F%E8%BA%ABWiFi%E7%9A%84%E6%8A%98%E8%85%BE/Debian/</url>
      
        <content type="html"><![CDATA[<ol><li><p>安装base.zip</p></li><li><p>刷写Debian系统</p></li><li><p>配置驱动程序</p><ol><li><p>修改ADB</p></li><li><p>安装NDIS驱动</p><ol><li><p>这里会有一个未知设备（由于我已经安装完成驱动则不会出现)<img src="/2022/07/20/%E9%9A%8F%E8%BA%ABWiFi%E7%9A%84%E6%8A%98%E8%85%BE/Debian/image-20220720133912744.png" alt="image-20220720133912744"></p></li><li><p>选择驱动</p><ol><li><p><img src="/2022/07/20/%E9%9A%8F%E8%BA%ABWiFi%E7%9A%84%E6%8A%98%E8%85%BE/Debian/image-20220720134031763.png" alt="image-20220720134031763"></p></li><li><p><img src="/2022/07/20/%E9%9A%8F%E8%BA%ABWiFi%E7%9A%84%E6%8A%98%E8%85%BE/Debian/image-20220720134053046.png" alt="image-20220720134053046"></p></li><li><p>选择网络适配器，然后选择 Microsoft —-&gt;NDIS<img src="/2022/07/20/%E9%9A%8F%E8%BA%ABWiFi%E7%9A%84%E6%8A%98%E8%85%BE/Debian/image-20220720134209911.png" alt="image-20220720134209911"></p></li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/vue/22-%E6%8F%92%E6%A7%BDslot/%E6%8F%92%E6%A7%BD/"/>
      <url>/2022/07/20/vue/22-%E6%8F%92%E6%A7%BDslot/%E6%8F%92%E6%A7%BD/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/vue/%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
      <url>/2022/07/20/vue/%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ol><li>Vetur     author—–pine WU</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/%E7%A1%AC%E7%9B%98%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/07/20/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/%E7%A1%AC%E7%9B%98%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>硬盘的组成 : 主控、DRAM、NAND</p><blockquote><p>各类介绍</p></blockquote><p>一、 NAND的分类:</p><ol><li>SLC(Single Level Cell 单层单元)</li><li>MLT(Mutil Level Ceil)</li><li>TLC(Triple Level Ceil)</li></ol><p>二、DRAM：</p><p>​1. 存储FTL（flash translation ): </p><p>​当操作系统向硬盘写入数据时，主控会根据情况挑选NAND中的一块区域，在写入数据的同时，也会将数据的位置 nand2 dieChip03 114 区块 51页——&gt; 即为 flash translation layer 记录到DRAM中。</p><p><img src="/2022/07/20/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/%E7%A1%AC%E7%9B%98%E7%9F%A5%E8%AF%86/image-20220919105645209.png" alt="image-20220919105645209"></p><ol start="2"><li>缓解写放大:<ol><li>在硬盘向</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/20/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>引出</strong></p><blockquote><p>以下的updatemei方法中直接更新了数组下表为1的整个元素，但在vue开发者工具中没有体现 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line">       new Vue(&#123;</span><br><span class="line">           el: &#x27;#root&#x27;,</span><br><span class="line">           data: &#123;</span><br><span class="line">               name: &#x27;helloworld&#x27;,</span><br><span class="line">               sortType:0,//1为升序，2位降序，0默认不变,</span><br><span class="line">               persons: [</span><br><span class="line">                   &#123; id: &#x27;001&#x27;, name: &#x27;马冬梅&#x27;, age: 30, sex: &#x27;女&#x27; &#125;,</span><br><span class="line">                   &#123; id: &#x27;002&#x27;, name: &#x27;周冬雨&#x27;, age: 19, sex: &#x27;女&#x27; &#125;,</span><br><span class="line">                   &#123; id: &#x27;003&#x27;, name: &#x27;周杰伦&#x27;, age: 18, sex: &#x27;男&#x27; &#125;,</span><br><span class="line">                   &#123; id: &#x27;004&#x27;, name: &#x27;温兆伦&#x27;, age: 20, sex: &#x27;男&#x27; &#125;</span><br><span class="line"></span><br><span class="line">               ],</span><br><span class="line">               keyWord:&#x27;&#x27;</span><br><span class="line">           &#125;,</span><br><span class="line">           </span><br><span class="line">           methods: &#123;</span><br><span class="line">               //这样修改vue并没有认可你的修改</span><br><span class="line">               updatemei()&#123;</span><br><span class="line">                   this.persons[0] = &#123;id: &#x27;001&#x27;, name: &#x27;马老师&#x27;, age: 30, sex: &#x27;女&#x27;&#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       </span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>点击事件后</p></blockquote><p><img src="/2022/07/20/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220720103341490.png" alt="image-20220720103341490"></p><h2 id="Vue更新的原理"><a href="#Vue更新的原理" class="headerlink" title="Vue更新的原理"></a>Vue更新的原理</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/%E9%82%AE%E4%BB%B6%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
      <url>/2022/07/20/%E9%82%AE%E4%BB%B6%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---1. 先引入jquery库 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-1.12.4.js&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">&quot;sha256-Qw82+bXyGq6MydymqBxNPYTaUXXq7c8v3CwiYwLLNXU=&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里使用cdn引入，亦可以使用本地文件引入 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!---2. 调用jquery中的Ajax发送请求 --&gt;</span></span><br><span class="line"> $.ajax(&#123;</span><br><span class="line">            url: &#x27;https://mousehao.fun/api/sendEmail/public/index.php/index/SendEmail/send&#x27;,</span><br><span class="line">            type: &#x27;POST&#x27;,</span><br><span class="line">            // 设置的是请求参数</span><br><span class="line">            data: &#123;</span><br><span class="line">                passCode:&quot;xxx&quot;,  //接口使用授权码，请联系吴部获取</span><br><span class="line">SMTPHost:&quot;smtp.qq.com&quot;, //你的邮箱对应的SMTP服务器 ， 这里以QQ邮箱举例</span><br><span class="line">AuthorizationCode:&quot;xxxx&quot;,  //你的smtp授权码</span><br><span class="line">From:&quot;yinghao_wu@qq.com&quot;,  //发件的邮箱(即你的邮箱)</span><br><span class="line">To:&quot;1412xxxx91@qq.com&quot;, //收件人邮箱</span><br><span class="line">FromName:&quot;广师大科教@网络研发部&quot;,   //发件人</span><br><span class="line">Title:&quot;接口测试&quot;, // 邮件主题</span><br><span class="line">Body:&#x27;<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:pink&quot;</span>&gt;</span>粉色字体<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;  //这里为邮件内容</span><br><span class="line">            &#125;</span><br><span class="line">            success: function (res) &#123;</span><br><span class="line">                </span><br><span class="line">                console.log(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
