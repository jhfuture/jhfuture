<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安装mysql</title>
      <link href="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>[TOC]</p><h2 id="一、下载-MySQL"><a href="#一、下载-MySQL" class="headerlink" title="一、下载 MySQL"></a>一、下载 MySQL</h2><ol><li>打开mysql官网<a href="https://www.mysql.com/downloads/">MySQL :: MySQL Downloads</a>，选择 GPL版本下载<ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017232115705.png" alt="image-20221017232115705"></li></ol></li></ol><h2 id="二、安装MySQL"><a href="#二、安装MySQL" class="headerlink" title="二、安装MySQL"></a>二、安装MySQL</h2><ol><li><p>选择安装类型</p><ol><li><h3 id="1-选择设置类型"><a href="#1-选择设置类型" class="headerlink" title="***1. 选择设置类型*****"></a><em>*<em>*</em>*1. 选择设置类型****</em>*</h3><p>“Developer Default”是开发者默认；</p><p>“Server only”仅作为服务器安装；</p><p>“Clientonly”仅作为客户端安装；</p><p>“Full”是完整安装；</p><p>“Custom”是自定义安装；</p></li><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017233008602.png" alt="image-20221017233008602"></p></li></ol></li><li><p>一路下一步即可</p></li><li><p>这里选择设置密码</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017233934424.png" alt="image-20221017233934424"></li></ol></li><li><p>设置密码</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234054198.png" alt="image-20221017234054198"></li></ol></li><li><p>选择账户</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234302264.png" alt="image-20221017234302264"></li></ol></li><li><p>配置权限</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234527109.png" alt="image-20221017234527109"></li></ol></li><li><p>执行一些配置</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234735958.png" alt="image-20221017234735958"></li></ol></li><li><p>配置mysql router（直接默认即可）</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234710589.png" alt="image-20221017234710589"></li></ol></li><li><p>链接测试server，输入第三步中设置的密码</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234835921.png" alt="image-20221017234835921"></li></ol></li><li><p>最后完成，出现cmd窗口和mysql workbench则成功</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017235021486.png" alt="image-20221017235021486"></li></ol></li><li><p>配置系统Path变量</p><ol><li><p>找到mysql的安装路径，默认为</p><ol><li><pre><code>C:\Program Files\MySQL\MySQL Server 8.0\bin</code></pre></li></ol></li><li><p>打开系统变量 此电脑右键属性—–&gt;关于–&gt;高级系统设置—–&gt;高级—–&gt;环境变量—&gt;选择Path,编辑—&gt;新建，把mysql的安装路径粘贴</p><ol><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000240473.png" alt="image-20221018000240473"></p></li><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000321376.png" alt="image-20221018000321376"></p></li><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000415838.png" alt="image-20221018000415838"></p></li><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000451402.png" alt="image-20221018000451402"></p></li></ol></li><li><p>按键  win+R ,输入cmd ，然后输入myssql，有反应即正常</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000826285.png" alt="image-20221018000826285"></li></ol></li></ol></li></ol><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/17/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99/"/>
      <url>/2022/10/17/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><h3 id="一、方法重写"><a href="#一、方法重写" class="headerlink" title="一、方法重写"></a>一、方法重写</h3><p>方法重写也叫方法覆盖，需要满足下面的条件</p><ol><li><p>子类的方法&#x3D;&#x3D;参数，方法名城&#x3D;&#x3D;，要和父类的参数，方法名称完全一样。</p></li><li><p>子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类。</p><ol><li><p>eg: 父类返回的类型是Object,子类方法返回类型是 String</p><ol><li><p>public Object getinfo()  public String getinfo()</p></li><li><pre><code class="java">pu</code></pre></li><li></li></ol></li></ol></li><li><p>子类方法不能缩小父类方法的&#x3D;&#x3D;访问权限&#x3D;&#x3D;</p><ol><li>父类： void sayOk()   子类：public void sayOk() </li><li>默认—-&gt; public   public&gt;protected&gt; 默认&gt; private</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/16/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/2-%E7%BB%A7%E6%89%BF%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
      <url>/2022/10/16/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/2-%E7%BB%A7%E6%89%BF%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class ExtendTheory&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">     Son son=new Son();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class  GrandPa&#123;</span><br><span class="line">    String name=&quot;大头爷爷&quot;;</span><br><span class="line">&#125;</span><br><span class="line">class Father extends  GrandPa &#123;</span><br><span class="line">    String name=&quot;大头爸爸&quot;;</span><br><span class="line">&#125;</span><br><span class="line">class Son extends Father&#123;</span><br><span class="line">    String name=&quot;大头儿子&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先加载类信息-&gt; GrandPa信息–&gt;  Father—-&gt;son</li><li>在堆中开辟 内存空间 —-&gt; 储存GrandPa—&gt;储存 Father—&gt;储存son</li></ol><p><img src="/2022/10/16/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/2-%E7%BB%A7%E6%89%BF%E7%9A%84%E6%9C%AC%E8%B4%A8/image-20221016163319682.png" alt="image-20221016163319682"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/"/>
      <url>/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows内存优化"><a href="#Windows内存优化" class="headerlink" title="Windows内存优化"></a>Windows内存优化</h2><h3 id="一、fetch"><a href="#一、fetch" class="headerlink" title="一、fetch"></a>一、fetch</h3><p>a)</p><p>​简介：</p><p>超级预读是系统会根据用户的使用习惯，将经常使用的程序和文件预加载到空闲的物理内存中，从而总体提高系统的速度。</p><p>b)操作</p><ol><li>打开注册表编辑器 Win+R—&gt; regedit</li><li>打开路径</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters</span><br></pre></td></tr></table></figure><ol start="3"><li><p>修改</p><ol><li><p>- 0 – 禁用</p><p>- 1 – 启用应用程序预读</p><p>- 2 – 启用系统引导预读</p><p>- 3 – 启用应用程序和系统引导预读</p></li></ol><p><img src="/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/image-20221014180556322.png" alt="image-20221014180556322"></p></li><li><p>打开任务管理器，关闭sysmain服务</p><ol><li>ctrl+shift+Esc启动任务管理器</li><li>服务<img src="/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/image-20221014180749957.png" alt="image-20221014180749957"></li><li><img src="/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/image-20221014180809492.png" alt="image-20221014180809492">设置为禁止</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/1-%E7%BB%A7%E6%89%BF%E5%85%A5%E9%97%A8/"/>
      <url>/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/1-%E7%BB%A7%E6%89%BF%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><p><img src="/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/1-%E7%BB%A7%E6%89%BF%E5%85%A5%E9%97%A8/image-20221016144937017.png" alt="image-20221016144937017"></p><h3 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extend 关键词</span><br></pre></td></tr></table></figure><h3 id="三、继承的使用细节"><a href="#三、继承的使用细节" class="headerlink" title="三、继承的使用细节"></a>三、继承的使用细节</h3><ol><li><p>子类继承了所有的属性和方法，非私有的属性和方法可以直接在子类中进行访问，但是私有属性和方法不能在子类直接访问，要通过&#x3D;&#x3D;父类提供&#x3D;&#x3D;的公共方法去访问。</p></li><li><p>子类必须调用父类的构造器，完成父类的初始化</p><ol><li><blockquote><p>在子类的构造器中会有 super</p></blockquote></li></ol></li><li><p>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的<code>无参构造器</code>。如果父类没有提供无参构造器，则必须在子类的构造器中使用super去指定使用父类的哪个构造器完成对父类</p><blockquote><p>如果父类中没有构造器，那编译器会自动添加一个空的同名构造器，如果父类中有其他构造器，则编译器不会创建空形参的同名构造器下面这段代码就会报错</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String n1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  String n2;</span><br><span class="line">String n3=<span class="string">&quot;n3&quot;</span>;</span><br><span class="line"><span class="keyword">private</span>  String n4=<span class="string">&quot;n4&quot;</span>;</span><br><span class="line">base(String name)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//缺少构造器的显式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sub</span>  <span class="keyword">extends</span> <span class="title class_">base</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">sub</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(n1+n2+n3+getn4());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//另一个类进行调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">sub</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p style="color:red">java: 无法将类 com.jhfuture.extend.base中的构造器 base应用到给定类型;  需要: java.lang.String  找到: 没有参数  原因: 实际参数列表和形式参数列表长度不同      </p><ol start="4"><li><p>如果需要指定使用父类的构造器，在子类构造器中使用super()</p><ol><li>调用无参构造器 —–&gt; super() &#x2F;什么都不写</li><li>调用有参构造器 ——&gt; super( parameter)</li></ol></li><li><p>super在使用时，需要放在&#x3D;&#x3D;构造器的第一行&#x3D;&#x3D;（super只能在构造器中使用)</p></li><li><p>super()和this()都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</p></li><li><p>Java所有类都是object类的子类，object是所有类的基类。</p><ol><li><img src="/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/1-%E7%BB%A7%E6%89%BF%E5%85%A5%E9%97%A8/image-20221016160315556.png" alt="image-20221016160315556"></li></ol></li><li><p>父类构造器的调用不限于直接父类！将一直往上追溯到object类（顶级父类）</p></li><li><p>子类最多只能继承一个父类（指直接继承），即java中是&#x3D;&#x3D;单继承机制&#x3D;&#x3D;</p><ol><li>思考，如何让A类继承B类和C类。</li><li>A继承B–》继承C</li></ol></li><li><p>不能滥用继承，子类和父类之间必须满足is-a的逻辑关系</p><ol><li>animal<ol><li>Cat extents Animal 合理</li></ol></li><li>Person is Music<ol><li>person extend &#x2F;&#x2F;不合理</li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/1-%E5%8C%85/"/>
      <url>/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/1-%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="一、包的本质"><a href="#一、包的本质" class="headerlink" title="一、包的本质"></a>一、包的本质</h3><p>文件夹</p><h3 id="二、导入包"><a href="#二、导入包" class="headerlink" title="二、导入包"></a>二、导入包</h3><ol><li><p>按需导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xxx.xxx.className;</span><br></pre></td></tr></table></figure></li><li><p>完整导入</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xxx.xxx</span><br></pre></td></tr></table></figure><p>三、包的注意事项</p><ol><li><p>命名规范：</p><ol><li>不能含关键字</li><li>不能以数字开头</li><li>以数字、字母、下划线组成</li></ol></li><li><p>java lang中的包是默认导入的。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/14/Windows/%E5%AE%89%E8%A3%85office2016/"/>
      <url>/2022/10/14/Windows/%E5%AE%89%E8%A3%85office2016/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/13/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FFAT/"/>
      <url>/2022/10/13/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FFAT/</url>
      
        <content type="html"><![CDATA[<p><strong>● FAT16</strong></p><p>优点：兼容性最好，某些数码设备可能对FAT32和NTFS格式的存储卡支持不太好，因此只能使用FAT16。</p><p>缺点：最大仅支持2GB分区，空间浪费大。</p><p>备注：赶紧看看U盘是不是FAT格式，如果是就改用FAT32吧！</p><p><strong>● FAT32</strong></p><p>优点：兼容性好。</p><p>缺点：单个文件不能超过4GB，不支持512MB以下容量的U盘。</p><p>备注：如果U盘容量达8GB以上，发现4GB文件拷不进去的话，可以考虑换用NTFS或ExFAT格式了。</p><p><strong>● ExFAT</strong></p><p>优点：专为闪存和U盘设计，空间浪费小。</p><p><strong>● NTFS</strong></p><p>优点：兼容性好，支持任意大小的U盘。</p><p>缺点：会缩短闪存寿命。</p><p>备注：反正U盘超便宜，不怕坏的朋友们使用NTFS其实挺好。</p><p><strong>FatFs和FAT32是什么关系？</strong></p><p>搞嵌入式的应该对FatFs并不陌生，那么肯定有人会问：<strong>FatFs和FAT32是什么关系？</strong></p><p>我们说的FatFs是指FAT Filesystem，是一个通用的文件系统(FAT&#x2F;exFAT)模块，用于在小型嵌入式系统中实现FAT文件系统。一种供MS-DOS及其它Windows操作系统对文件进行组织与管理的文件系统。</p><p>FAT 文件系统起源于 1980 年左右，是 MS-DOS 首先支持的文件系统。</p><p>而FAT32可以说是经过FatFs发展而来：</p><p>###一些操作</p><ol><li><a href="https://www.disktool.cn/jiaocheng/convert-ntfs.html">NTS格式无损数据转fat—分区助手</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装Windows系统(使用微PE)</title>
      <link href="/2022/10/13/Windows/installWindows/"/>
      <url>/2022/10/13/Windows/installWindows/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="安装-x2F-重装Windows系统"><a href="#安装-x2F-重装Windows系统" class="headerlink" title="安装&#x2F;重装Windows系统"></a>安装&#x2F;重装Windows系统</h2><p>[TOC]</p><h3 id="一、制作PE系统盘"><a href="#一、制作PE系统盘" class="headerlink" title="一、制作ＰＥ系统盘"></a>一、制作ＰＥ系统盘</h3><ol><li><p>准备好一个U盘，并备份好其中的文件(制作启动盘时会清空u盘所有文件！！！！)</p></li><li><p>下载<a href="https://www.wepe.com.cn/download.html">微PE工具箱</a></p></li><li><p>使用PE工具箱制作u盘</p><ol><li><img src="/2022/10/13/Windows/installWindows/image-20221013201439305.png" alt="image-20221013201439305"></li></ol></li><li><p>选择后点击确定</p></li></ol><h3 id="二、下载Windows镜像"><a href="#二、下载Windows镜像" class="headerlink" title="二、下载Windows镜像"></a>二、下载Windows镜像</h3><ol><li><p>打开<a href="https://msdn.itellyou.cn/">msdn下载站</a></p></li><li><p>选择操作系统镜像</p><ol><li>这里以Windows10镜像为演示<img src="/2022/10/13/Windows/installWindows/image-20221013201956842.png" alt="image-20221013201956842"></li><li>复制下载链接，并用迅雷打开<img src="/2022/10/13/Windows/installWindows/image-20221013202212437.png" alt="image-20221013202212437"></li><li>下载完成后复制到u盘中即可。</li></ol></li></ol><blockquote><p>business为企业版，consumer为零售版，x64代表64位系统，x86为32位系统</p></blockquote><p>​</p><h3 id="三、重启电脑／开启需要安装的电脑，选择从U盘启动"><a href="#三、重启电脑／开启需要安装的电脑，选择从U盘启动" class="headerlink" title="三、重启电脑／开启需要安装的电脑，选择从Ｕ盘启动"></a>三、重启电脑／开启需要安装的电脑，选择从Ｕ盘启动</h3><ol><li><p>上百度查询 &#x3D;&#x3D;xxxx电脑如何从U盘启动&#x3D;&#x3D;&#x3D;。这里以联想笔记本为例&#x3D;&#x3D;&gt; 开机时连续摁F12</p></li><li><p>进入PE后选择Windows安装器</p></li><li><p>选择第二步下载的iso镜像。<img src="/2022/10/13/Windows/installWindows/image-20221013210934557.png" alt="image-20221013210934557">&#x3D;&#x3D;》点击选择进行选择</p></li><li><p>第二栏和第三栏选择你要安装的磁盘分区即可。</p></li><li><p>显示安装完成&#x3D;&#x3D;&#x3D;&#x3D;》手动或自动重启即可。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Windows使用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Untitled/"/>
      <url>/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/Untitled/"/>
      <url>/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/Untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/1-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/"/>
      <url>/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/1-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="方法重载："><a href="#方法重载：" class="headerlink" title="方法重载："></a>方法重载：</h2><p>即方法同名的方法：</p><p>特点：</p><ol><li>方法名相同</li><li>形参列表：必须不同（形参类型或个数或顺序，至少其中的一类不同，参数名无要求（不影响）)</li><li>返回类型：无要求&#x3D;&#x3D;&#x3D;&gt;无法形成方法重载。</li></ol><p><img src="/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/1-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/image-20221013005835441-16655939244151.png" alt="image-20221013005835441"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/07/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/10/07/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基本数据类型</p></blockquote><p>基本数据类型：</p><p>​只有值拷贝。</p><p><img src="/2022/10/07/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220720213940526.png" alt="image-20220720213940526"></p><p>内存空间：</p><blockquote><p>本质是jvm中不同方法体的栈</p></blockquote><p><img src="/2022/10/07/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220720214141265.png" alt="image-20220720214141265"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/07/IDEA/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/10/07/IDEA/%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="IDEA的相关快捷键"><a href="#IDEA的相关快捷键" class="headerlink" title="IDEA的相关快捷键"></a>IDEA的相关快捷键</h2><p>一、自带通用<br>     1. ctrl +&#x2F; 注释</p><pre><code>2. alt+/ 补全3. import  package自动导入包      1. ![image-20221007201550828](快捷键/image-20221007201550828.png)2022直接设置完即可，其他版本设置完后 ，在需要导入package的地方点击 ``alt +enter``即可4. ctrl+alt+L   格式化代码5.  alt +insert 生成构造器 6. Ctrl +H 查看一个类的层级关系    1. 将鼠标放在想要查看的类上    2. 摁下 Ctrl + H     3. 生成可视图 鼠标右键--&gt;diagrams---&gt; show diagram7. Ctrl+ B 查看方法所在的class 8. ==```.var  自动分配变量名```==    1. ``` java    new Person().var ---&gt;回车     |     |自动生成     ↓    Person Person= new Person();    ```</code></pre><p>​        </p><p>​        </p><p>​    </p><p>二、自定义</p><pre><code>1. ctrl+d删除当前行 ---&gt; delete1. ctrl+alt + ↓ 复制当前行 -----&gt;duplicate1. alt +R 快速运行 ---------&gt; run</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/06/vue/25-%E6%93%8D%E4%BD%9CDOM/ref/"/>
      <url>/2022/10/06/vue/25-%E6%93%8D%E4%BD%9CDOM/ref/</url>
      
        <content type="html"><![CDATA[<h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li>被用来给元素(纯粹的html元素)或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是<code>组件实例对象（vc）</code><ol><li>html标签<ol><li>使用docum.getElementByID()，与使用ref并无区别</li></ol></li><li><code>组件</code> ☸<ol><li>如果使用docum.getElementByID()，则获取的只是该DOM元素<code>&lt;div id=&quot;school&quot;&gt;&lt;h1&gt;学校名称:尚硅谷&lt;/h1&gt;&lt;/div&gt;</code></li><li>使用ref,则获取的是vc实例对象  vueCompont{xxxxxxxxxx}</li></ol></li></ol></li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/06/vue/18-%E9%9D%9E%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB/"/>
      <url>/2022/10/06/vue/18-%E9%9D%9E%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>1.一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype</p><p>2.为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</p></blockquote><p>图示：</p><p>​vue在vueComponet的原型对象与vue的原型对象中加了一条线</p><p>​让vc能用到vue原型对象上的诸多优秀方法</p><p><img src="/2022/10/06/vue/18-%E9%9D%9E%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB/image-20221006214133088.png" alt="image-20221006214133088"></p><p>一、验证该关系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> school=<span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;school&quot;</span>,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;school&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span>,</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                <span class="attr">hello</span>:<span class="string">&quot;hello&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">        <span class="attr">components</span>:&#123;school,student&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内置关系成立吗&quot;</span>,school.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>===<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>二、原型链中的解释。</p><p>构造函数上的原型属性和 <code>构造器所创建的对象</code>上的隐式属性所指向的为<code>同一个原型对象</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个构造函数</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">b</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个Demo的实例对象</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Demo</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">//显示原型属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">__proto__</span>) <span class="comment">//隐式原型属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span> === d.<span class="property">__proto__</span>) <span class="comment">//t</span></span><br><span class="line">----&gt;<span class="literal">true</span>;</span><br><span class="line"><span class="comment">//程序员通过显示原型属性操作原型对象，追加一个x属性，值为99</span></span><br><span class="line"><span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">x</span> = <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>,d) </span><br></pre></td></tr></table></figure><p>二、内置关系的使用</p><ol><li>全局事件总线</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/05/JavaScript/Promise/promiseAll%E5%92%8CpromiseRace/"/>
      <url>/2022/10/05/JavaScript/Promise/promiseAll%E5%92%8CpromiseRace/</url>
      
        <content type="html"><![CDATA[<p>PromiseApi的使用</p><blockquote><p>API为处理异步操作而生</p></blockquote><blockquote><p>一、promiseAll(promiseArr)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">promiseArr</span>: 包含 n 个 promise 的数组</span><br><span class="line">  说明: 返回一个新的 promise, 只有所有的 promise<span class="string">`都成功才成功`</span>且成功的value是所有promise成功的value的数组, 只要有一    个失败了就直接失败。</span><br><span class="line">         --》并且只要检测到失败的，就##立即返回##失败的promise</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>二、Promise.Race(promiseArr)</p><p>   promiseArr: 包含 n 个 promise 的数组<br>       说明: 返回一个新的 promise, <code>第一个完成</code>的 promise 的结果状态就是最终的结果状态,<br>         和all方法一样，获取到当<code>第一个完成</code>的 promise 的结果状态，就立即返回 *&#x2F;</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="title class_">Promise</span> 构造函数：<span class="keyword">new</span> <span class="title class_">Promise</span>(executor)</span><br><span class="line">        executor 函数：是同步执行的，(resolve, reject) =&gt; &#123; &#125;</span><br><span class="line">        resolve 函数：调用 resolve 将 <span class="title class_">Promise</span> 实例内部状态改为成功(fulfiled)。</span><br><span class="line">        reject 函数：调用 reject 将 <span class="title class_">Promise</span> 实例内部状态改为失败(rejected)。</span><br><span class="line">        说明：executor 函数会在 <span class="title class_">Promise</span> 内部立即同步调用，异步代码放在 executor 函数中。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> 方法：<span class="title class_">Promise</span> 实例.<span class="title function_">then</span>(onFulfilled, onRejected)</span><br><span class="line">        onFulfilled：成功的回调函数 —— (value) =&gt; &#123; &#125;</span><br><span class="line">        onRejected：失败的回调函数 —— (reason) =&gt; &#123; &#125;</span><br><span class="line">        注意：then 方法会返回一个新的 <span class="title class_">Promise</span> 实例对象。 </span><br><span class="line">        </span><br><span class="line"><span class="number">3.</span><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">catch</span>(onRejected) 方法</span><br><span class="line">        (<span class="number">1</span>) onRejected 函数: 失败的回调函数(reason) =&gt; &#123; &#125;</span><br><span class="line">          说明: <span class="title function_">then</span>()的语法糖, 相当于: <span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">        (<span class="number">2</span>) 异常穿透使用: 当运行到最后, 没被处理的所有异常错误都会进入这个方法的回调函数中 </span><br><span class="line"> <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;失败原因&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// promise.then(</span></span><br><span class="line">    <span class="comment">//   undefined,  //成功的回调可以是undefined</span></span><br><span class="line">    <span class="comment">//   (reason) =&gt; &#123; console.log(`失败原因：$&#123;reason&#125;`); &#125;  //失败的回调必须有，否则会报错</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line">    <span class="comment">// then()的语法糖</span></span><br><span class="line">    promise.<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`失败原因：<span class="subst">$&#123;reason&#125;</span>`</span>); &#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 关于then()的成功回调为undefined问题</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;成功的value&#x27;</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(</span><br><span class="line">      <span class="literal">undefined</span>,    <span class="comment">//成功的回调undefined，但是Promise底层做了处理，加上了成功回调 value =&gt; value</span></span><br><span class="line">      <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败原因：&#x27;</span>, reason); &#125;</span><br><span class="line">    ).<span class="title function_">then</span>(</span><br><span class="line">      <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功的value：&#x27;</span>, value); &#125;,</span><br><span class="line">      <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败原因：&#x27;</span>, reason); &#125;</span><br><span class="line">    ) </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/21/JAVA/2-%E5%8E%9F%E3%80%81%E5%8F%8D%E3%80%81%E8%A1%A5%E7%A0%81/%E4%B8%89%E7%A0%81/"/>
      <url>/2022/09/21/JAVA/2-%E5%8E%9F%E3%80%81%E5%8F%8D%E3%80%81%E8%A1%A5%E7%A0%81/%E4%B8%89%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<ol><li>二进制的<code>最高位</code>是<code>符号位</code></li><li>正数的三码合一</li><li>负数的反码&#x3D;符号位不变，其他位<code>取反</code>    or  补码-1</li><li>负数的补码&#x3D;反码+1， </li><li>0的反码、补码都是0</li><li>java没有无符号数，换言之，java中的数都是有符号的。</li><li>计算机在运算时，都是以<code>补码的形式来运算</code>的</li><li>在看运算结果时，要看他的原码(!!，最终呈现的是原码)</li></ol><p><img src="/2022/09/21/JAVA/2-%E5%8E%9F%E3%80%81%E5%8F%8D%E3%80%81%E8%A1%A5%E7%A0%81/%E4%B8%89%E7%A0%81/image-20220921215536101.png" alt="image-20220921215536101"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/21/JAVA/0-Java%E7%BB%86%E8%8A%82/%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
      <url>/2022/09/21/JAVA/0-Java%E7%BB%86%E8%8A%82/%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/09/21/JAVA/0-Java%E7%BB%86%E8%8A%82/%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/image-20220921214648842.png" alt="image-20220921214648842"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/21/JAVA/java%E7%9A%84%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/09/21/JAVA/java%E7%9A%84%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>java与JavaScript中的三元运算符相似，这里只说注意的地方</p></blockquote><p>TernaryoperatorDetail.Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx条件 ? 表达式<span class="number">1</span>：表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><ol><li><p>表达式1和表达式2要为可以赋给变量的类型（或可以自动转换&#x2F;或者强制换)</p><blockquote><p>自动转换 int —&gt; double</p></blockquote></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/21/JAVA/1-%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
      <url>/2022/09/21/JAVA/1-%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="java转义字符"><a href="#java转义字符" class="headerlink" title="java转义字符"></a>java转义字符</h1><blockquote><p>常用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\t 制表位</span><br><span class="line">    </span><br><span class="line">\n 换行</span><br><span class="line">\\ ： 一个\</span><br><span class="line">\<span class="string">&quot; ： 一个“</span></span><br><span class="line"><span class="string">\&#x27; : 一个&#x27;</span></span><br><span class="line"><span class="string">\r :一个回车</span></span><br><span class="line"><span class="string">//回车没有换行，以前的打字机在打完第一行字后，会把光标放回头部</span></span><br><span class="line"><span class="string">    </span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;韩顺平教育\r北京&quot;</span>)</span><br><span class="line">  运行顺序</span><br><span class="line">    --&gt;韩顺平教育↓(光标)</span><br><span class="line">    ---&gt;↓韩顺平教育</span><br><span class="line"> ----------&gt; 北京平教育</span><br></pre></td></tr></table></figure><blockquote><p>计算机看到一个&#x2F;时，就会判断<code>下一个字符</code>为转义的。</p><p>注意：</p><p>​ 只有<code>一个</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Eg:</span><br><span class="line"></span><br><span class="line">​<span class="comment">//如果想输出两个//</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;////hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>编译器看到第一个\时，看成是做转义的，第二个字符(有且只有一个)才是真正输出的字符。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/15/vue/23-%E6%8F%92%E4%BB%B6/2-%E8%B7%AF%E7%94%B1/%E8%B7%AF%E7%94%B1/"/>
      <url>/2022/09/15/vue/23-%E6%8F%92%E4%BB%B6/2-%E8%B7%AF%E7%94%B1/%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<p>##入门</p><ol><li>安装 npm i vue-router  (从2022&#x2F;2&#x2F;27起，vue-router 版本默认为4，只适合vue3使用，如果vue2直接安装将报依赖错误)<ol><li>npm i vue-router@3<code>(vue2)</code></li></ol></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue组件</title>
      <link href="/2022/09/15/vue%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/09/15/vue%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/15/vue/23-%E6%8F%92%E4%BB%B6/vue%E4%B8%AD%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
      <url>/2022/09/15/vue/23-%E6%8F%92%E4%BB%B6/vue%E4%B8%AD%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>vue中的插件，本质是一个包含了一个install方法的<code>==对象==</code>,install方法接受的第一个参数为<code>==vue的构造函数==</code>,其他参数为vue,use()传入的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line"></span><br><span class="line">install(vue,options)&#123;</span><br><span class="line"> // 1. 添加全局过滤器</span><br><span class="line">    Vue.filter(....)</span><br><span class="line"></span><br><span class="line">    // 2. 添加全局指令</span><br><span class="line">    Vue.directive(....)</span><br><span class="line"></span><br><span class="line">    // 3. 配置全局混入(合)</span><br><span class="line">    Vue.mixin(....)</span><br><span class="line"></span><br><span class="line">    // 4. 给vue原型上添加实例方法、添加</span><br><span class="line">    Vue.prototype.$myMethod = function () &#123;...&#125;</span><br><span class="line">    Vue.prototype.$myProperty = xxxx</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//当使用 Vue.use时，将自动调用插件中的install方法</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li>导入插件(安装外挂)  import abc from xxx</li><li>使用插件(开启外挂) Vue.use(abc)</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/15/vue/21-vuecli%E8%84%9A%E6%89%8B%E6%9E%B6/vuecli/"/>
      <url>/2022/09/15/vue/21-vuecli%E8%84%9A%E6%89%8B%E6%9E%B6/vuecli/</url>
      
        <content type="html"><![CDATA[<pre><code>脚手架架构├── node_modules ├── public│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><p>初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.vue create projectName(不能使用大写字母)</span><br><span class="line">2.选择vue2/vue3</span><br><span class="line">3.创建完成</span><br><span class="line">4.编写xxxx</span><br><span class="line">5.运行 cd projectName </span><br><span class="line">6. npm run</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/09/13/vue/22-%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/1%E9%80%9A%E8%BF%87anxious%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/"/>
      <url>/2022/09/13/vue/22-%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/1%E9%80%9A%E8%BF%87anxious%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件中的通讯方式</title>
      <link href="/2022/09/06/vue/19-%E7%BB%84%E4%BB%B6/2-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
      <url>/2022/09/06/vue/19-%E7%BB%84%E4%BB%B6/2-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h2><p>相互的组件之间一定会进行数据交互，那一定就会用到<code>组件之间的通讯</code>。</p><ol><li>父子之间的通讯———————-&gt;a、a.1父给子，property直接传递 。a.2子给父，父先给子偷偷传递一个函数，然后子再调用该函数进行参数传递。&#x3D;&#x3D;或&#x3D;&#x3D;  a.3父给子绑定自定义函数<br>                                                                                                      b、使用全局总线<br>                                                                                           c、订阅消息</li><li>同级兄弟之间的通讯—————–&gt;a、全局总线 b、订阅消息</li><li>亲戚关系比较复制——————–&gt;  a、全局总线 b、订阅消息</li></ol><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><h3 id="１．最简单的方法的方法————–property"><a href="#１．最简单的方法的方法————–property" class="headerlink" title="１．最简单的方法的方法————–property"></a>１．最简单的方法的方法————–property</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//使用</span><br><span class="line">//父--to--&gt;子</span><br><span class="line">&lt;student  :propertyName=&quot;parameterName/functionName&quot;&gt;&lt;/student&gt;</span><br><span class="line">//子--accept--父</span><br><span class="line">props:[&quot;parameterName/functionName&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//案例</span><br><span class="line">//父组件，使用property传递参数、函数，实现父子之间通讯</span><br><span class="line"></span><br><span class="line">&lt;MyFooter :todos=&quot;todos&quot; :checkAllTodo=&quot;checkAllTodo&quot; :clearAllTodo=&quot;clearAllTodo&quot;/&gt;</span><br><span class="line"></span><br><span class="line">//子组件,通过接收property，然后收到来自父的参数，并调用函数来传递方法。</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyFooter&#x27;,</span><br><span class="line">props:[&#x27;todos&#x27;,&#x27;checkAllTodo&#x27;,&#x27;clearAllTodo&#x27;],</span><br><span class="line">computed: &#123;</span><br><span class="line">//总数</span><br><span class="line">total()&#123;</span><br><span class="line">return this.todos.length</span><br><span class="line">&#125;,</span><br><span class="line">//已完成数</span><br><span class="line">doneTotal()&#123;</span><br><span class="line">//此处使用reduce方法做条件统计</span><br><span class="line">/* const x = this.todos.reduce((pre,current)=&gt;&#123;</span><br><span class="line">console.log(&#x27;@&#x27;,pre,current)</span><br><span class="line">return pre + (current.done ? 1 : 0)</span><br><span class="line">&#125;,0) */</span><br><span class="line">//简写</span><br><span class="line">return this.todos.reduce((pre,todo)=&gt; pre + (todo.done ? 1 : 0) ,0)</span><br><span class="line">&#125;,</span><br><span class="line">//控制全选框</span><br><span class="line">isAll:&#123;</span><br><span class="line">//全选框是否勾选</span><br><span class="line">get()&#123;</span><br><span class="line">return this.doneTotal === this.total &amp;&amp; this.total &gt; 0</span><br><span class="line">&#125;,</span><br><span class="line">//isAll被修改时set被调用</span><br><span class="line">set(value)&#123;</span><br><span class="line">this.checkAllTodo(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">/* checkAll(e)&#123;</span><br><span class="line">this.checkAllTodo(e.target.checked)</span><br><span class="line">&#125; */</span><br><span class="line">//清空所有已完成</span><br><span class="line">clearAll()&#123;</span><br><span class="line">this.clearAllTodo()</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="２-使用自定义事件给子组件的实例对象的绑定事件。"><a href="#２-使用自定义事件给子组件的实例对象的绑定事件。" class="headerlink" title="２. 使用自定义事件给子组件的实例对象的绑定事件。"></a>２. 使用自定义事件给子组件的实例对象的绑定事件。</h3><blockquote><p>然后在子组件中用 <code>this.$emit(&quot;functionName&quot;,parameter)</code>进行调用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//使用</span><br><span class="line">//父--to--&gt;子</span><br><span class="line">//方法一  直接写 </span><br><span class="line">//父</span><br><span class="line">&lt;student  @functionName=&#x27;funName&#x27;&gt;&lt;/student&gt;</span><br><span class="line">//子</span><br><span class="line">this.$emit(&quot;fucNa&quot;)</span><br><span class="line">//方法二  通过ref</span><br><span class="line">//父</span><br><span class="line">&lt;student ref=&#x27;student&#x27;&gt;&lt;/student&gt;</span><br><span class="line">this.$ref.student.$on(&quot;functionName&quot;,parameterName)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//子--accept--&gt;父</span><br><span class="line">this.$emit(&quot;functionName&quot;)</span><br><span class="line">//使用emit调用即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-使用全局总线"><a href="#3-使用全局总线" class="headerlink" title="3.使用全局总线"></a>3.使用全局总线</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 在main.js中进行全局总线的挂载安装</span></span><br><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line"><span class="comment">//安装全局事件总线,尽量早的进行安装</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 在A组件中调用this.$bus.$on()绑定事件</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;School&#x27;,this)</span></span><br><span class="line">            <span class="comment">//在vc加载完成后就进行绑定</span></span><br><span class="line">   <span class="comment">// tip:</span></span><br><span class="line">      <span class="comment">//      这里也需要注意this指向的问题，如果想this指向为当前vc，就使用箭头函数/写在methods中的函数（详细看前一篇）</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;hello&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是School组件，收到了数据&#x27;</span>,data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">//</span></span><br><span class="line">            <span class="comment">//在beforedestroy是最好进行解绑 ,适当的给它减少压力</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">//3. 在B组件中调用this.$bus.$emit()调用事件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;Student&#x27;,this.x)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">sendStudentName</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;hello&#x27;</span>,<span class="variable language_">this</span>.<span class="property">name</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里简要说明一下全局总线的工作原理(及其要求)：</p><pre><code>1. 全局总线的要求: - 全部组件都能访问到 - 可以调用 this.\$on(FunctionName,function) 方法进行事件的绑定、this.\$emit(fuctionName,parameter)方法进行方法的触发</code></pre><p>​2. 一个重要的内置关系： VueComponent.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype</p><p>​        2.1 为什么要有这个关系：—-&gt;让&#x3D;&#x3D;组件实例对象（vc）&#x3D;&#x3D;可以<strong>访问</strong>到 &#x3D;&#x3D;Vue原型&#x3D;&#x3D;上的属性、方法。</p><blockquote><p>这里涉及到了一部分原型链的知识：<br>    简要说明一下： 由构造函数创建的对像（这里为vueComponet创建的vc对象），可以通过 &#x3D;&#x3D;_proto_（隐形原型）&#x3D;&#x3D;访问到构造函数上的&#x3D;&#x3D;原型&#x3D;&#x3D;</p><p>​而构造函数自身可以通过 &#x3D;&#x3D;prototype（显示原型）&#x3D;&#x3D;直接访问自身的&#x3D;&#x3D;原型对象&#x3D;&#x3D;</p><p><img src="/2022/09/06/vue/19-%E7%BB%84%E4%BB%B6/2-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/%E5%8E%9F%E5%9E%8B%E9%93%BE-16630694336681.png" alt="原型链"></p></blockquote><blockquote><p>tip:   Q:为什么不把$bus加在vc的原型上?</p><p>​A:每一个vc是由vue构造函数中的extend函数每一次调用生成的,且</p><p>​——&gt;每次调用vue.extend时,返回的都是一个<code>全新</code>的vuecomponent(即vc的构造函数)</p><p>​—-&gt; 每次的构造函数都不同（详细看18章中的介绍)</p><p>​↓以下为原型链的知识</p><p>​—原型（prototype）本质上是存在于构造函数上的一个属性，如果每一个vc的构造函数（vueComponent）都不同，那每一个vc都有一个自己的原型(prototype)。</p><p>​final：</p><p>​如果加在某一个vc的原型上，则无法让每一个vc都能访问到。</p><p>​—-&gt;加在vm的原型上，由于vm的构造器只有一个，所以原型也只有一个。</p><p>​再通过 VueComponent.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype  这个关系，则可以让每一个vc都能成功访问到。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">、</span><br><span class="line"><span class="comment">//以下为说明原型链中原型属性</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">a</span>=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个demo的实例对象</span></span><br><span class="line"><span class="keyword">const</span> d=<span class="keyword">new</span> <span class="title class_">Demo</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">//显示原型属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>)<span class="comment">//隐私原型属性</span></span><br><span class="line"><span class="comment">//两个属性指向的是同一个原型对象，显示和隐式是对属性的修饰，</span></span><br><span class="line"><span class="comment">//------&gt; 不能说“显示原型对象”/“隐式原型对象”，这样子会误以为有两个原型对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo.<span class="property"><span class="keyword">prototype</span></span>==p.<span class="property">__proto__</span>) <span class="comment">//----&gt; tr</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="4-使用订阅信息推送。"><a href="#4-使用订阅信息推送。" class="headerlink" title="4. 使用订阅信息推送。"></a>4. 使用订阅信息推送。</h3><blockquote><p>订阅消息与全局总线的原理相近，这里不展开叙说，只说明简要的使用方法</p></blockquote><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue绑定样式</title>
      <link href="/2022/09/04/vue/08-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/"/>
      <url>/2022/09/04/vue/08-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h2><ol><li><p>网页的组件元素的样式通常由 1. 绑定class，然后通过css文件书写，或者 2. 直接在标签中书写style。</p></li><li><p>如果我们想要修改样式，无非也是改动他们。在jquery&#x2F;JavaScript中我们可以通过直接操作DOM元素实现，而在vue中，vue帮我们实现了虚拟DOM的操作，使得我们可以不用去直接操作DOM来实现这个功能。</p></li><li><p>在vue中我们使用：a)class绑定与、b)style绑定进行实现</p><blockquote><p>tips :  如果原本就有class属性，那使用:class&#x3D;xxx时，只会在原来的基础上进行添加，而不会<code>覆盖</code></p></blockquote></li></ol><h2 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h2><h3 id="1-通过-class-39-xxx-39-实现、xxx可以是字符串、数组、对象。"><a href="#1-通过-class-39-xxx-39-实现、xxx可以是字符串、数组、对象。" class="headerlink" title="1. 通过:class=&#39;xxx&#39;实现、xxx可以是字符串、数组、对象。"></a>1. 通过<code>:class=&#39;xxx&#39;</code>实现、xxx可以是字符串、数组、对象。</h3><ol><li><p>通过<code>字符串</code>实现适用于：只有一个，但是类名不确定，需要<code>动态获取</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">changeMood()&#123;</span><br><span class="line">const arr = [&#x27;happy&#x27;,&#x27;sad&#x27;,&#x27;normal&#x27;]</span><br><span class="line">const index = Math.floor(Math.random()*3)</span><br><span class="line">this.mood = arr[index]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>通过<code>数组</code>实现，适用于：需要绑定多个属性，且数量未知，类名未知。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">return&#123;</span><br><span class="line">classArr:[&#x27;normal&#x27;,&#x27;bad&#x27;,&quot;good&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>通过<code>对象实现</code>，使用于：要绑定的个数确定(通常情况，但也可以添加)，类名确定，但要<code>动态决定用不用</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">return&#123;</span><br><span class="line">classObj:&#123;</span><br><span class="line">atguigu1:false,</span><br><span class="line">atguigu2:false,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-通过style实现-style-xxx-xxx可以是对象、对象数组"><a href="#2-通过style实现-style-xxx-xxx可以是对象、对象数组" class="headerlink" title="2. 通过style实现  :style={xxx},xxx可以是对象、对象数组"></a>2. 通过style实现  <code>:style=&#123;xxx&#125;</code>,xxx可以是对象、对象数组</h3><ol><li>通过配置对象</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;basic&quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">styleObj2:&#123;</span><br><span class="line">backgroundColor:&#x27;orange&#x27;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>通过数组对线</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;basic&quot; :style=&quot;styleArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">styleArr:[</span><br><span class="line">&#123;</span><br><span class="line">fontSize: &#x27;40px&#x27;,</span><br><span class="line">color:&#x27;blue&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">backgroundColor:&#x27;gray&#x27;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="scope属性"><a href="#scope属性" class="headerlink" title="scope属性"></a>scope属性</h2><blockquote><p>组件之间难免会存在相同的类名，或者id名，那怎么解决呢？，vue中为我们提供了一个scope属性，在每个组件的 <script> 中添加 scope属性，即可使</p><p><code>当前界面</code>的样式只会在<code>当前页面生效</code> </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script scope&gt;</span><br></pre></td></tr></table></figure></script></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> vue绑定样式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中使用本地存储</title>
      <link href="/2022/09/03/vue/20-%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/localstorage/"/>
      <url>/2022/09/03/vue/20-%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/localstorage/</url>
      
        <content type="html"><![CDATA[<h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>localxlocalStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>             该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>localStorage.getItem(&#39;person&#39;);</code></p><pre><code>     该方法接受一个键名作为参数，返回键名对应的值。</code></pre></li><li><p><code>localStorage.removeItem(&#39;key&#39;);</code></p><pre><code>     该方法接受一个键名作为参数，并把该键名从存储中删除。</code></pre></li><li><p><code> localStorage.clear()</code></p><pre><code>     该方法会清空存储中的所有数据。</code></pre></li></ol></li><li><p>备注：</p><ol><li><code>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</code></li><li>LocalStorage存储的内容，需要<code>手动清除</code>才会消失。</li><li><code>localStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>session————&gt; 对话，网页结束后就消失了，而localstorage————&gt; 不删除就不会消失</p></li><li><p>如果是一个对象，那需要使用<code>JSON.stringfy()</code>转换为字符串，然后再<code>储存</code>，</p><p>同时，在<code>读取</code>时，需要使用<code>JSON.parse()</code>进行解析，然后再使用，否则会发生<code>类型问题</code></p><p><img src="/2022/09/03/vue/20-%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/localstorage/image-20220903213957106.png" alt="image-20220903213957106"></p></li></ol><blockquote><p>这里 ‘test’本来应该是object类型，但储存的时候进行了转换，而读取时没有进行转换，则最终读取的数据，类型为 ‘String’</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 本地储存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/"/>
      <url>/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一、部门职能"><a href="#一、部门职能" class="headerlink" title="一、部门职能"></a>一、部门职能</h1><ol><li>科教招新项目的开发</li></ol><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821151559325.png" alt="image-20220821151559325"></p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821151809684.png" alt="image-20220821151809684"></p><ol start="2"><li><p>广师大网页管理</p></li><li><p>贴上我们的作品</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821152050558.png" alt="image-20220821152050558"></p></li></ol><h1 id="二、部门的招新要求"><a href="#二、部门的招新要求" class="headerlink" title="二、部门的招新要求"></a>二、部门的招新要求</h1><ul><li><p><strong>&#x3D;&#x3D;自身具有明确的职业规划&#x3D;&#x3D;</strong>,将来从事软件开发相关的职业。</p></li><li><p>&#x3D;&#x3D;对编程具有较高的兴趣&#x3D;&#x3D;，小白也没关系，部门内有学长学姐专业指导。</p></li><li><p>&#x3D;&#x3D;不好高骛远，脚踏实地&#x3D;&#x3D;，做到认真并按时的完成部门任务。</p></li><li><p>&#x3D;&#x3D;<strong>具有一定的自主学习能力</strong>&#x3D;&#x3D;遇到问题及时沟通。</p></li><li><p>&#x3D;&#x3D;<strong>乐观积极，百折不挠</strong>&#x3D;&#x3D;，希望你能在变强的路上越走越远</p><h1 id="三、成员介绍"><a href="#三、成员介绍" class="headerlink" title="三、成员介绍"></a>三、成员介绍</h1><p>1.正部</p><p>副部，以下排名不分先后</p><p>2.xxxx</p><p>3.xxxx</p><p>4.xxxx</p></li></ul><h1 id="四、部门活动介绍"><a href="#四、部门活动介绍" class="headerlink" title="四、部门活动介绍"></a>四、部门活动介绍</h1><p>谁说程序猿都是冷冰冰的一群人，我们也有许多有趣的时刻。</p><ol><li><p>部门合照</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821154555782.png" alt="image-20220821154555782"></p></li><li><p>部门团建</p><ol><li>团建的大pizza！</li></ol><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821154507943.png" alt="image-20220821154507943"></p><p>2.团建的奶茶+烧烤！</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821154659655.png" alt="image-20220821154659655"></p></li></ol><p>团建一起玩游戏！！！</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821155413221.png" alt="image-20220821155413221"></p><p>3.他们都说程序猿各个都是直男直女，莫得感情，但我们！会在元宵节给每一位小骨干送上一碗**&#x3D;&#x3D;温馨的小汤圆&#x3D;&#x3D;**！！！！</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220821161244.jpg" alt="微信图片_20220821161244"></p><h1 id="五、结尾"><a href="#五、结尾" class="headerlink" title="五、结尾"></a>五、结尾</h1><p>1.鼓舞</p><p>加入<strong>网络研发部</strong>，一起在<strong>验前端编程学习</strong>的海洋里遨游，</p><p>如果你已经确定在<strong>IT行业</strong>方向发展</p><p>我们能让你</p><p>在前端学习上<strong>领先</strong>于同专业同学</p><p>我们还能帮你</p><p>解答<strong>C&#x2F;C++、Java编程语言</strong>学习上的疑惑</p><p>还在犹豫什么！</p><ol start="2"><li><p>报名方式</p><p>点击下方的小程序链接，选择投递**&#x3D;&#x3D;网络研发部&#x3D;&#x3D;**吧！</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/gh_c897a4e417c2_258.jpg" alt="gh_c897a4e417c2_258"></p><ul><li></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rem适配方案</title>
      <link href="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
      <url>/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<hr><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820211218623.png" alt="image-20220820211218623"></p><p>自适应</p><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820211524694.png" alt="image-20220820211524694"></p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><h3 id="技术方案一："><a href="#技术方案一：" class="headerlink" title="技术方案一："></a>技术方案一：</h3><pre><code>- less- 媒体查询- 人</code></pre><p>技术方案2（推荐）</p><pre><code>- flexible.js- rem</code></pre><p>总结：</p><pre><code>1. 两种方案都存在1. 方案二更加简单</code></pre><p>动态设置html标签font-size大小</p><p>​<img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820215730239.png" alt="image-20220820215730239"></p><p>rem实际开发的适配方案</p><p>rem&#x3D; 页面元素值(px)&#x2F;(屏幕宽度&#x2F;划分的分数)</p><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820221718183.png" alt="image-20220820221718183"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820232329513.png" alt="image-20220820232329513"></p>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rem适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Less的使用</title>
      <link href="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/less/"/>
      <url>/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/less/</url>
      
        <content type="html"><![CDATA[<p>一、 Less是什么</p><p>​css的扩展语言</p><p>二、less的使用</p><pre><code>1. 变量    1. 变量时没有固定的值，可以改变的。    &gt; 1.书写less文件：    &gt;    &gt; ​@变量名 ：值    &gt;    &gt; 2.    2. 命名规范    1. ==**必须有@前嘴==**    2. 不能包含特殊字符    3. 不能以数字开头    4. 大小写敏感    3. 案例    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@color:pink</span><br><span class="line"></span><br><span class="line">.p&#123;</span><br><span class="line">color:@color</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>2. Less嵌套</code></pre><p>​    </p><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.子元素的样式直接写在父元素里面就好--&gt;</span></span><br><span class="line">.header&#123;</span><br><span class="line">color:red;</span><br><span class="line">a&#123;</span><br><span class="line">background-color:pink;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">添加伪类选择器</span><br><span class="line"><span class="comment">&lt;!--  如果有伪类选择器、交集选择器、伪类选择器 使用**==&amp;==**---&gt;</span> 内层选择器的前面需要加 ==&amp;==</span><br><span class="line">.header&#123;</span><br><span class="line">a&#123;</span><br><span class="line">&amp;:hover&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>![image-20220820210222137](less/image-20220820210222137.png)3. ==**Less运算**==☆   1. \+ \- \*  /    2. 运算顺序与四则运算相同，都是先乘数，后加减   ![image-20220820210628143](less/image-20220820210628143.png)   **注意：**   1. ==**运算符中间有空格隔开 1 px + 5**==   2. 对于不同的单位直接的运算，运算结果取==第一个值==的单位   ​![image-20220820210724170](less/image-20220820210724170.png)</code></pre><ol start="4"><li><p>@import 导入另一个样式文件（less）文件</p><p><strong>最后一定要加&#x3D;&#x3D;;&#x3D;&#x3D;</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;css文件&quot;</span> ;   //把一个样式文件导入到本样式文件中</span><br><span class="line">//link  将一个样式文件引入到<span class="selector-tag">html</span>页面</span><br></pre></td></tr></table></figure></li><li><p>编译less</p></li><li><p>Vscode 的easy less插件</p><ol><li>安装</li></ol></li></ol><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/less/image-20220820204947984.png" alt="image-20220820204947984"></p><p>​2. 插件会自动将less编译成一个css文件</p>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Less </tag>
            
            <tag> css扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑像素比的知识</title>
      <link href="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&amp;%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/"/>
      <url>/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&amp;%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<ol><li>物理像素比</li></ol><blockquote><p>电脑上当缩放比例为100%时，1px（css像素）则为电脑屏幕上的1个像素大小</p><blockquote><p>Windows10会自动将缩放比例调整为100%以上，例如125%</p><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/image-20220820201143115.png" alt="image-20220820201143115"><br>而手机上使用了视网膜技术。</p><p>1px(css像素)，在手机上显示的结果&#x3D;1px*像素缩放比</p><p>iphone8 : 1px(css像素)*2&#x3D;2</p><p>Tip:相当于直接把图片、文字这些放大两倍</p></blockquote></blockquote><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/image-20220820200923907.png" alt="image-20220820200923907"></p><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/image-20220820201423812.png" alt="image-20220820201423812"></p><ol start="2"><li><p>二倍图</p><p>如果直接将图片放大两倍，那可能就会变模糊，那怎么解决这个问题？</p><p>我们放一个100*100的，然后手动将这个图片缩小为50*50(css像素)，最终显示在屏幕上的是50(css像素)*2，显示的结果就是实际图片的效果</p></li></ol><p><img src="/2022/08/20/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/image-20220820202429008.png" alt="image-20220820202429008"></p><ol start="3"><li>背景的缩放<ol><li>background-size: 图片的宽度 图片的高度</li><li>background-size: 图片宽度 (auto，默认)</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软/硬件知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 像素比大小 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript中的原型链</title>
      <link href="/2022/07/30/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2022/07/30/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、何为原型链？"><a href="#一、何为原型链？" class="headerlink" title="一、何为原型链？"></a>一、何为原型链？</h1><p>JavaScript中的原型关系</p><h1 id="二、原型链的解释"><a href="#二、原型链的解释" class="headerlink" title="二、原型链的解释"></a>二、原型链的解释</h1><ol><li><p>对象可以由a构造函数、b对象方法创建</p></li><li><p>来看下图。</p><p><img src="/2022/07/30/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/image-20220903202726634.png" alt="image-20220903202726634"></p><ol><li>f1和f2是function foo创建的对象。</li></ol></li></ol><p><img src="/2022/07/30/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="原型链"></p><p>1. </p>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
          <category> javascript进阶知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中组件入门</title>
      <link href="/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/"/>
      <url>/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p><img src="/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/image-20220729200851143.png" alt="image-20220729200851143"></p><p><img src="/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/image-20220729193042248.png" alt="image-20220729193042248"></p><h2 id="单文件组件与非单文件组件"><a href="#单文件组件与非单文件组件" class="headerlink" title="单文件组件与非单文件组件"></a>单文件组件与非单文件组件</h2><h3 id="1-单文件组件："><a href="#1-单文件组件：" class="headerlink" title="1.单文件组件："></a>1.单文件组件：</h3><p>​一个文件只包含一个组件  ——&gt;a.html</p><h3 id="2-非单文件组件"><a href="#2-非单文件组件" class="headerlink" title="2. 非单文件组件"></a>2. 非单文件组件</h3><p>​一个文件中包含n个组件 ——&gt;a.vue</p><h2 id="Vuecomponent构造器的生成过程"><a href="#Vuecomponent构造器的生成过程" class="headerlink" title="Vuecomponent构造器的生成过程"></a>Vuecomponent构造器的生成过程</h2><p>​创建vue组件时，cost componentName &#x3D;Vue.extend()  ——————————&gt;调用了Vue.extend这个方法,而这个方法的源码每次调用都生成了一个新的VueComponent</p><p><img src="/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/image-20220729223553810.png" alt="image-20220729223553810"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你领略Vue的风骚之路</title>
      <link href="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>先看完整的图。</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="生命周期"></p><h2 id="逐步解析"><a href="#逐步解析" class="headerlink" title="逐步解析"></a>逐步解析</h2><p>​1.Vue的初始化，两个生命周期函数</p><ul><li>beforecreate：在数据代理、数据监测之前</li><li>created：在完成数据代理、数据监测后</li></ul><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729150212600.png" alt="image-20220729150212600"></p><ol start="2"><li>Vue开始解析模块</li></ol><p>​Vue开始处理 插值语法、插值指令、计算属性……  ——&gt;不显示解析好的内容 ——</p><p>​————————&gt;这个过程进行虚拟DOM的生存</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729150411546.png" alt="image-20220729150411546"></p><ol start="3"><li>将虚拟DOM转换为真实DOM插入界面</li></ol><p>​上一步生成的虚拟DOM，Vue存了一份在vm.$el中，然后再用它来替换掉真实的那个el(绑定的模块)</p><p>​————————&gt;存在vm.$el中的虚拟DOM为后续的 虚拟DOM比较——&gt;即diff 提供准备</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729150931756.png" alt="image-20220729150931756"></p><ol start="4"><li><p>Vue的初始化完成，开始执行mounted生命周期函数。</p><p>​——————开启定时器，发送网络请求……</p></li></ol><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729152712878.png" alt="image-20220729152712878"></p><ol start="5"><li><p>检测变化 ——————&gt;这是一个闭环的过程</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729154420051.png" alt="image-20220729154420051"></p></li><li><p>销毁Vue</p></li></ol><p>destroy介绍</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729155152540.png" alt="image-20220729155152540"></p><blockquote><p>细节一：注意：</p><p>这里的事件监听器——&gt;指的是自定义事件</p><p>我们在 new Vue(</p><p>method:{<br>}</p><p>配置的方法都是原生的DOM事件，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    new Vue(</span><br><span class="line">method:&#123;</span><br><span class="line">        add()&#123;</span><br><span class="line">console.log(&#x27;add&#x27;)</span><br><span class="line">this.n++</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><p>​当vue执行时，最终会给button绑定 DOM原生的点击事件，这个事件是原生DOM上的，vue被杀死多少回都不会对其造成影响。</p></blockquote><p>​<img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729160100548.png" alt="image-20220729160100548"></p><h3 id="一个形象的比喻"><a href="#一个形象的比喻" class="headerlink" title="一个形象的比喻"></a>一个形象的比喻</h3><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729161519962.png" alt="image-20220729161519962">   </p><h2 id="几个要注意的细节"><a href="#几个要注意的细节" class="headerlink" title="几个要注意的细节"></a>几个要注意的细节</h2><h3 id="细节一：注意："><a href="#细节一：注意：" class="headerlink" title="细节一：注意："></a>细节一：注意：</h3><p>这里的事件监听器——&gt;指的是自定义事件</p><p>我们在 new Vue(</p><p>method:{<br>}</p><p>配置的方法都是原生的DOM事件，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    new Vue(</span><br><span class="line">method:&#123;</span><br><span class="line">        add()&#123;</span><br><span class="line">console.log(&#x27;add&#x27;)</span><br><span class="line">this.n++</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><p>​当vue执行时，最终会给button绑定 DOM原生的点击事件，这个事件是原生DOM上的，vue被杀死多少回都不会对其造成影响</p><h3 id="细节二"><a href="#细节二" class="headerlink" title="细节二"></a>细节二</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;</span><br><span class="line">                /* 这里还能得到vm上的数据和方法，但是</span><br><span class="line">                修改后数据，页面不会刷新了。</span><br><span class="line">                ——&gt;因为vue已经进入销毁了，不会再加载 beforeupdata和update函数</span><br><span class="line">                */</span><br><span class="line">                console.log(&#x27;beforeDestory&#x27;);</span><br><span class="line">                console.log(this.n);</span><br><span class="line">                this.add();</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 硬核知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/28/vue/15-%E5%86%85%E9%83%A8%E6%8C%87%E4%BB%A4/2.v-html/"/>
      <url>/2022/07/28/vue/15-%E5%86%85%E9%83%A8%E6%8C%87%E4%BB%A4/2.v-html/</url>
      
        <content type="html"><![CDATA[<h3 id="cookie简略图示"><a href="#cookie简略图示" class="headerlink" title="cookie简略图示"></a>cookie简略图示</h3><p><img src="/2022/07/28/vue/15-%E5%86%85%E9%83%A8%E6%8C%87%E4%BB%A4/2.v-html/image-20220728222602717.png" alt="image-20220728222602717"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/28/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/Vue.set/"/>
      <url>/2022/07/28/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/Vue.set/</url>
      
        <content type="html"><![CDATA[<p>1.局限性</p><p>对象不能是vm &#x2F;  vm的根数据对象(vm._data)</p><p><img src="/2022/07/28/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/Vue.set/image-20220728154450525.png" alt="image-20220728154450525"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>姓名实例_methods</title>
      <link href="/2022/07/28/vue/07-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/03.%E5%A7%93%E5%90%8D%E6%A1%88%E4%BE%8B_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
      <url>/2022/07/28/vue/07-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/03.%E5%A7%93%E5%90%8D%E6%A1%88%E4%BE%8B_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>通过一个实例，简要介绍计算属性</p><span id="more"></span><p>​    1.定义：要用的属性不存在，要通过已有属性计算得来</p><p>​    2.原理；底层借助了object.defineproperty方法提供的getter和setter</p><p>​    3.get函数什么时候执行</p><p>​      (1).初次读取时会执行一次</p><p>​      (2).当依赖的数据发生改变时会被再次调用</p><p>​    4.优势：与methods相比，内部有缓存机制（复用），效率更高，调式方便</p><p>​    5.备注：</p><p>​      (1).计算属性最终会出现在vm上，直接读取&#x2F;操作使用即可</p><p>​      (2).如果计算属性要被修改，那必须写在set函数去响应修改，</p><p>​      且set中药引起&#x3D;&#x3D;<strong>计算时依赖的数据</strong>&#x3D;&#x3D;发生改变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">       姓 &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">       名 &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">       测试 &lt;input type=&quot;text&quot;  v-model=&quot;x&quot;&gt; &lt;br&gt;</span><br><span class="line">       全名 &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">       全名 &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">       全名 &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">       &lt;!-- //计算属性的get什么时候被调用？ </span><br><span class="line">               1.除此读取fullname时，后面使用时会进行缓存。 </span><br><span class="line">               2.所以来的数据发生改变时 --&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line"></span><br><span class="line">       const vm =new Vue(&#123;</span><br><span class="line">           el: &#x27;#root&#x27;,</span><br><span class="line">           data: &#123;</span><br><span class="line">               firstName: &#x27;张&#x27;,</span><br><span class="line">               lastName: &#x27;三&#x27;,</span><br><span class="line">               x:1</span><br><span class="line">           &#125;,</span><br><span class="line">           computed:&#123;</span><br><span class="line">               fullName:&#123;</span><br><span class="line">                   //get有什么用？当有人读取fullname时就会被调用，返回值就作为fullname的值</span><br><span class="line">                   //get什么时候被调用？ </span><br><span class="line">                   // 1.除此读取fullname时。 </span><br><span class="line">                   // 2.所以来的数据发生改变时</span><br><span class="line">                   get()&#123;</span><br><span class="line">                       console.log(&quot;get被调用了&quot;);</span><br><span class="line">                       console.log(this);//此处this是mv实例</span><br><span class="line">                       return this.firstName+&#x27;-&#x27;+this.lastName</span><br><span class="line">                       // 这里用到的值为 firstNmae、lastName</span><br><span class="line">                   &#125;,</span><br><span class="line">                   //set有什么用？当fullName被修改</span><br><span class="line">                   //set什么时候被调用？</span><br><span class="line">                   set(value)&#123;</span><br><span class="line">                       const arr=value.split(&#x27;-&#x27;)</span><br><span class="line">                       this.firstName=arr[0]</span><br><span class="line">                       this.lastName=arr[1]</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           // 计算属性，和data/methods不一样，它不是直接放在vm上，</span><br><span class="line">           // 而是调用了get方法，得到返回值后再将返回值放在vm上</span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的开始</title>
      <link href="/2022/07/28/vue/11-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/"/>
      <url>/2022/07/28/vue/11-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p>Vue条件渲染 v-if与 v-show</p><span id="more"></span><p>​        条件渲染：</p><p>​              1.v-if</p><p>​                    写法：</p><p>​                        (1).v-if&#x3D;”表达式” </p><p>​                        (2).v-else-if&#x3D;”表达式”</p><p>​                        (3).v-else&#x3D;”表达式”</p><p>​                    适用于：切换频率较低的场景。</p><p>​                    特点：不展示的DOM元素直接被移除。（不会出现在HTML文件中）</p><p>​                    注意：v-if可以和:v-else-if、v-else一起使用，但要求&#x3D;&#x3D;<strong>结构不能被“打断”</strong>&#x3D;&#x3D;。</p><p>​              2.v-show</p><p>​                    写法：v-show&#x3D;”表达式”</p><p>​                    适用于：切换频率较高的场景。</p><p>​                    特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉（display：none）</p><p>​                </p><p>​              3.v-if可以和template配合使用，使多个元素一起显示&#x2F;隐藏，而不影响布局</p><p>​              4.备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</p><p>​                  因为 v-show，还存在于页面中，而v-if没有</p><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用v-if坐条件渲染 --&gt;</span><br><span class="line">        &lt;div v-if=&quot;表达式&quot;&gt; &lt;/div&gt;</span><br><span class="line">           &lt;div v-if=&quot;false&quot;&gt; &lt;/div&gt;</span><br><span class="line">           &lt;div v-if=&quot;1===1&quot;&gt; &lt;/div&gt;</span><br><span class="line">       </span><br><span class="line">      </span><br><span class="line">       &lt;!-- v-else和v-else-if  --&gt;</span><br><span class="line">       </span><br><span class="line">       &lt;div v-if=&quot;false&quot;&gt; &lt;/div&gt;</span><br><span class="line">       &lt;div v-elseif=&quot;1===1&quot;&gt; &lt;/div&gt; </span><br><span class="line"></span><br><span class="line">       &lt;!-- v-if,template配套使用，不破坏布局 --&gt;</span><br><span class="line">       &lt;template v-if=&quot;show&quot;&gt;</span><br><span class="line">           &lt;h2&gt;nihao$&lt;/h2&gt;</span><br><span class="line">           &lt;h2&gt;nihao$&lt;/h2&gt;</span><br><span class="line">           &lt;h2&gt;nihao$&lt;/h2&gt;</span><br><span class="line">       &lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用v-show做条件渲染 --&gt;</span><br><span class="line">       </span><br><span class="line">            &lt;div v-show=&quot;表达式&quot;&gt; &lt;/div&gt;</span><br><span class="line">            &lt;div v-show=&quot;false&quot;&gt; &lt;/div&gt;</span><br><span class="line">            &lt;div v-show=&quot;1===1&quot;&gt; &lt;/div&gt;</span><br><span class="line">         </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>class和style样式绑定</title>
      <link href="/2022/07/28/vue/10.%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/class%E5%92%8Cstyle%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A/"/>
      <url>/2022/07/28/vue/10.%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/class%E5%92%8Cstyle%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>class和style样式绑定</p><span id="more"></span><p>  绑定样式：</p><p>​      1.class样式</p><p>​        写法：:class&#x3D;’xxx’，xxx可以是对象、数组、字符串</p><p>​          字符串写法适用于：类名不确定，需要动态获取</p><p>​          数组写法使用与：要绑定多个样式，个数不确定，名字也不确定</p><p>​          对象写法：要绑定的样式名字、个数都确定，不确定应不应用</p><p>​      2.style样式</p><p>​          :style&#x3D;”xxx”，xxx可以是样式对象、样式对象数组</p><p>​        备注：</p><p>​          1.样式对象： key 不能瞎写，一定是&#x3D;&#x3D;<strong>存在的属性</strong>&#x3D;&#x3D;</p><p>​          2.属性中如果是两个单词，直接拼在一起 font-size -&gt; fontSize</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 准备好一个容器--&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 绑定class样式--字符串写法  适用于：样式的类名不确定，需要动态制定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :class=&quot;a&quot; @click=&quot;change()&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定class样式—--数组写法，适用于：要绑定的样式个数不确定，名字也不确定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定class样式——— 对象写法：适用于：要绑定的样式个数确定，名字确定，是否应用不确定--&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定style样式----对象写法 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定style样式----数组写法 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :style=&quot;styleArray&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">   &lt;script&gt;</span><br><span class="line">   Vue.config.productionTip=false //阻止vue在启动时生成生产提示</span><br><span class="line">   new Vue(&#123;</span><br><span class="line">   el:&#x27;#root&#x27;,</span><br><span class="line">   data:&#123;</span><br><span class="line">    a:&#x27;&#x27;,</span><br><span class="line">   name:&#x27;helloworld&#x27;,</span><br><span class="line">   classArr:[&#x27;atguigu1&#x27;,&#x27;atguigu2&#x27;,&#x27;atguigu3&#x27;],</span><br><span class="line">   classObj:&#123;</span><br><span class="line">    atguigu1:false,</span><br><span class="line">    atguigu2:false</span><br><span class="line">   &#125;,</span><br><span class="line">   styleObj:&#123;</span><br><span class="line">    color:&#x27;red&#x27;,</span><br><span class="line">    fontSize: &#x27;20px&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">   styleOb2:&#123;</span><br><span class="line">    backgroundcolor:&#x27;orange&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">   styleArray:[&#123;</span><br><span class="line">    color:&#x27;red&#x27;,</span><br><span class="line">    fontSize: &#x27;20px&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">   </span><br><span class="line">   ,&#123;</span><br><span class="line">    backgroundcolor:&#x27;orange&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">],</span><br><span class="line">  </span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   methods:&#123;</span><br><span class="line">    change()&#123;</span><br><span class="line">        //0-1,1娶不到 0,0.11，1.xxx,.2.xxx向下取证</span><br><span class="line">        var index= Math.floor(Math.random()*3)</span><br><span class="line">        var arr=[&#x27;happy&#x27;,&#x27;sad&#x27;,&#x27;normal&#x27;]</span><br><span class="line">        this.a=arr[index]</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A4/"/>
      <url>/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>一个vscode的使用技巧</p><p>自定义折叠</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//在开始的地方</span><br><span class="line">//#region</span><br><span class="line"></span><br><span class="line">//在结束的地方</span><br><span class="line">//#endregion</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
      <url>/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>key的发挥作用：</p><blockquote><p>如果不写 key，那Vue会&#x3D;&#x3D;默认&#x3D;&#x3D;将index作为key </p></blockquote><ol><li>当使用index做索引时，Vue内部虚拟DOM的操作过程</li></ol><p>面试题： react、vue中key的有什么作用？（key的内部原理）<br>    1.虚拟dom中key 的作用</p><ul><li>key是虚拟DOM对象的标识符，当数据发生改变时，vue会根据【新数据】生成【新的虚拟DOM】</li><li>随后vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较——&#x3D;&#x3D;<strong>虚拟DOM比较算法</strong>&#x3D;&#x3D;，比较规则如下：</li></ul><ol start="2"><li><p>对比规则：</p><p>(1).若虚拟DOM中找到了与新虚拟DOM相同的key</p><ul><li>1.若虚拟DOM中内容没变，直接使用之前的真实DOM</li><li>2.若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li></ul></li></ol><p>​(2).旧虚拟DOM中没找到与新虚拟DOM中相同的key</p><p>​——&gt;创建新的真实DOM，随后渲染到页面</p><ol start="3"><li><p>用index作为key可能会引发的问题：</p><ol><li><p>若对数据进行：逆序添加（不是从尾部插入，而是从头部插入）、逆序删除等&#x3D;&#x3D;<strong>破坏顺序操作&#x3D;&#x3D;</strong><br>会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt;  页面效果没问题，但效率低</p></li><li><p>&#x3D;&#x3D;<strong>如果结构中还包含输入类的DOM</strong>：&#x3D;&#x3D;</p><p>​会产生错误DOM更新  &#x3D;&#x3D;&gt; 界面有问题</p></li></ol></li><li><p>开发中如何选择key？</p><ol><li>最好使用每条数据的&#x3D;&#x3D;<strong>唯一标识符</strong>&#x3D;&#x3D;作为key，比如id、手机号、身份证号、学号等唯一值</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅使用与渲染列表用于展示，使用index作为key是没有问题的</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 这里的案例为在persons数列 ==**前**== 添加一个新元素==---&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;!-- 遍历数组 --&gt;</span><br><span class="line">&lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;</span><br><span class="line">&lt;button @click.once=&quot;add&quot;&gt;添加一个老刘&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">add()&#123;</span><br><span class="line">const p = &#123;id:&#x27;004&#x27;,name:&#x27;老刘&#x27;,age:40&#125;</span><br><span class="line">this.persons.unshift(p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/image-20220727223334324.png" alt="image-20220727223334324"></p><p><img src="/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/image-20220727223639483.png" alt="image-20220727223639483"></p><ol start="2"><li>id（自定义为key）</li></ol><p><img src="/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/image-20220727223718835.png" alt="image-20220727223718835"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>监视属性</title>
      <link href="/2022/07/27/vue/09-%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/"/>
      <url>/2022/07/27/vue/09-%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>VUe的引入</p><span id="more"></span><h2 id="一、-配置项"><a href="#一、-配置项" class="headerlink" title="一、 配置项"></a>一、 配置项</h2><ol><li>immediate</li></ol><blockquote><p>配置初始化时让handler被调用</p></blockquote><ol start="2"><li>handler(newValue,oldValue)</li></ol><blockquote><p>配置当对应的变量发生变化时调用的方法,可以接受两个参数</p></blockquote><ol start="3"><li>deep</li></ol><blockquote><p>配置是否进行多级目录</p></blockquote><h2 id="二、书写的方式"><a href="#二、书写的方式" class="headerlink" title="二、书写的方式"></a>二、书写的方式</h2><ol><li>直接在new Vue中配置</li></ol><blockquote><p>可以使用所有配置项</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//监视多级结构中某个属性的变化</span><br><span class="line">                &#x27;number.a&#x27;: &#123;</span><br><span class="line">                    immediate:true,//初始化时让handler被调用,</span><br><span class="line">                    deep:true,//检测多级</span><br><span class="line">                    // handler 在监听属性发生改变时会被调用</span><br><span class="line">                    handler(newValue,oldValue)&#123;</span><br><span class="line">                        console.log(&quot;a改变了&quot;,newValue,oldValue);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>简写，直接写hadler函数</li></ol><blockquote><p>不能添加配置项</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//简写</span><br><span class="line">               ishot(newValue,oldValue)&#123;</span><br><span class="line">                   console.log(&quot;a改变了&quot;,newValue,oldValue);</span><br><span class="line">                   console.log();</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用vm.$watch()配置</li></ol><blockquote><p>可以使用所有配置项</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//一、使用配置项</span><br><span class="line">         vm.$watch(&#x27;ishot&#x27;,&#123;</span><br><span class="line">             immediate:true,</span><br><span class="line">               console.log(&quot;ishot被改变了&quot;,newValue,oldValue);</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">//二、不使用配置项</span><br><span class="line"> vm.$watch(&#x27;ishot&#x27;,function()&#123;</span><br><span class="line">               console.log(&quot;ishot被改变了&quot;,newValue,oldValue);</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure><h2 id="三、watch与computed的区别"><a href="#三、watch与computed的区别" class="headerlink" title="三、watch与computed的区别"></a>三、watch与computed的区别</h2><ol><li>computed能完成的，watch都能完成。</li><li>watch能完成的功能，computed不一定能完成。例如：watch可以进行异步操作</li></ol><blockquote><p>两个重要的小原则：<br> 1.所被vue管理的函数，最好都写成普通函数，这样this的执行才是vm或 组件实例对象<br> 2.所有不被vue所管理的函数(定时器setTimeout、Ajax的回调函数等、promise问题等)<br> 最好写成箭头汗水，这样this的指向才是vm或    组件实例对象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">   </span><br><span class="line"> --&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">       姓 &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">       名 &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">    &lt;span&gt;全名 &#123;&#123;fullname&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line">       const vm= new Vue(&#123;</span><br><span class="line">            el: &#x27;#root&#x27;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                firstName:&#x27;张&#x27;,</span><br><span class="line">                lastName:&#x27;三&#x27;,</span><br><span class="line">                fullname:&#x27;张三&#x27;//监视属性需要先创建一个变量便于后期修改</span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line">                // fullname()&#123;</span><br><span class="line">                //     return this.firstName+&#x27;-&#x27; +this.lastName</span><br><span class="line">                // &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                changeishot()&#123;</span><br><span class="line">                    this.ishot=!this.ishot</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //监视属性</span><br><span class="line">            watch: &#123;</span><br><span class="line">                firstName()&#123;</span><br><span class="line">                    //setTimeout直接由浏览器执行，其this指向为Windows，固需要使用箭头函数，this指向往上找</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                    this.fullname=this.firstName+&#x27;-&#x27; +this.lastName</span><br><span class="line">                    &#125;, 1000);</span><br><span class="line">                &#125;,</span><br><span class="line">               lastName()&#123;</span><br><span class="line">                //setTimeout直接由浏览器执行，其this指向为Windows，固需要使用箭头函数，this指向往上找</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    console.log(this)</span><br><span class="line">                    this.fullname=this.firstName+&#x27;-&#x27; +this.lastName</span><br><span class="line">                    &#125;, 1000);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">    </span><br><span class="line">        &#125;)</span><br><span class="line">        // // 第二种配置方法</span><br><span class="line">        // vm.$watch(&#x27;ishot&#x27;,&#123;</span><br><span class="line">        //     immediate:true,</span><br><span class="line">        //     handler(newValue,oldValue)&#123;</span><br><span class="line">        //         console.log(&quot;ishot被改变了&quot;,newValue,oldValue);</span><br><span class="line">        //     &#125;</span><br><span class="line">        // &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的技巧</title>
      <link href="/2022/07/26/vue/08-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/vue%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/07/26/vue/08-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/vue%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue中的坑"><a href="#Vue中的坑" class="headerlink" title="Vue中的坑"></a>Vue中的坑</h2><ol><li>如果Vue模块中没有使用data中的数据，那data中的数据发生改变时，vue的浏览器插件 Vue tool不会刷新</li><li>使用了定时器settimeout()的话，定时器是由浏览器直接调用的，所以它的this指向的是 **&#x3D;&#x3D;Windows&#x3D;&#x3D;**，而不是&#x3D;&#x3D;vue&#x3D;&#x3D;</li><li>Vue的绑定样式，使用style绑定要<code>注意的点</code><ol><li>如果是两个单词，类似background-color这种，要去掉中间的<code>“-”</code>,写成一个组合词backgroundColor</li><li></li></ol></li></ol><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ol><li>Vue上简单的操作可以直接写在Vue模块里，因为<strong>Vue模块可以直接访问Vue实例上的所有属性</strong></li></ol><p>eg: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div&gt; &#123;&#123;file&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;!- @xxx=&quot;yyyy&quot; xxx是事件名,yyy可以写一些简单的语句--&gt;</span><br><span class="line">    &lt;button @click=&quot;file=&#x27;炎热&#x27;&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">                file:&#x27;helloworld&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue中的技巧 </tag>
            
            <tag> Vue中的坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的技巧</title>
      <link href="/2022/07/26/vue/Top0-Vue%E4%B8%AD%E7%9A%84%E5%9D%91/vue%E6%8A%80%E5%B7%A7/"/>
      <url>/2022/07/26/vue/Top0-Vue%E4%B8%AD%E7%9A%84%E5%9D%91/vue%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue中的坑"><a href="#Vue中的坑" class="headerlink" title="Vue中的坑"></a>Vue中的坑</h2><ol><li>如果Vue模块中没有使用data中的数据，那data中的数据发生改变时，vue的浏览器插件 Vue tool不会刷新</li><li>使用了定时器settimeout()的话，定时器是由浏览器直接调用的，所以它的this指向的是 **&#x3D;&#x3D;Windows&#x3D;&#x3D;**，而不是&#x3D;&#x3D;vue&#x3D;&#x3D;</li><li>Vue的绑定样式，使用style绑定要<code>注意的点</code><ol><li>如果是两个单词，类似background-color这种，要去掉中间的<code>“-”</code>,写成一个组合词backgroundColor</li></ol></li><li>如果不是在脚手架中，组件名不能写自闭和（<school>，否则会导致后续的组件不能渲染)</school></li><li>脚手架<ol><li>如果更新了脚手架的内容，脚手架会自动完成编译，但不会主动刷新浏览器控制台的内容，需要手动进行刷新。</li></ol></li></ol><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ol><li>Vue上简单的操作可以直接写在Vue模块里，因为<strong>Vue模块可以直接访问Vue实例上的所有属性</strong></li></ol><p>eg: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div&gt; &#123;&#123;file&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;!- @xxx=&quot;yyyy&quot; xxx是事件名,yyy可以写一些简单的语句--&gt;</span><br><span class="line">    &lt;button @click=&quot;file=&#x27;炎热&#x27;&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">                file:&#x27;helloworld&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue中的技巧 </tag>
            
            <tag> Vue中的坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>姓名实例_methods</title>
      <link href="/2022/07/25/vue/07-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/1.%E5%A7%93%E5%90%8D%E5%AE%9E%E4%BE%8B_method%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/07/25/vue/07-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/1.%E5%A7%93%E5%90%8D%E5%AE%9E%E4%BE%8B_method%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>通过一个实例，简单说明Vue中数据绑定+模块刷新</p><span id="more"></span><h2 id="本文要点："><a href="#本文要点：" class="headerlink" title="本文要点："></a>本文要点：</h2><ul><li><input disabled type="checkbox"> 模块刷新的原理</li><li><input disabled type="checkbox"> vue的数据绑定</li></ul><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>先看基本代码</p><p>让我们开始逐步拆解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        姓 &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">        名 &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">        全名 &lt;span&gt; &#123;&#123;fullname()&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.config.productionTip=false //阻止vue在启动时生成生产提示</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">    firstName:&#x27;张&#x27;,</span><br><span class="line">    lastName:&#x27;三&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        fullname()&#123;</span><br><span class="line">            console.log(&quot;这个方法被调用了&quot;);</span><br><span class="line">            return this.firstName + &#x27;-&#x27; +this.lastName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ol><li><a href="%E9%80%9A%E8%BF%87el%E7%BB%91%E5%AE%9A%E5%90%8E%E7%9A%84HTML">^Vue模块</a></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">      姓 &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">      名 &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">      全名 &lt;span&gt; &#123;&#123;fullname()&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ol start="2"><li>Vue实例</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        Vue.config.productionTip=false //阻止vue在启动时生成生产提示</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">    firstName:&#x27;张&#x27;,</span><br><span class="line">    lastName:&#x27;三&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        fullname()&#123;</span><br><span class="line">            console.log(&quot;这个方法被调用了&quot;);</span><br><span class="line">            return this.firstName + &#x27;-&#x27; +this.lastName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>分析过程，当input中输入数据，data中的数据发生改变，vue会自动<code>重新解析 [^vue实例] </code>，如果包含vdata的则直接刷新，有调用方法则重新调用</li></ol><p><img src="/2022/07/25/vue/07-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/1.%E5%A7%93%E5%90%8D%E5%AE%9E%E4%BE%8B_method%E5%AE%9E%E7%8E%B0/image-20220725153238921.png" alt="image-20220725153238921"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件处理基础</title>
      <link href="/2022/07/25/vue/06-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/3.%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/"/>
      <url>/2022/07/25/vue/06-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/3.%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="键盘事件语法糖："><a href="#键盘事件语法糖：" class="headerlink" title="键盘事件语法糖："></a>键盘事件语法糖：</h2><pre><code>     @keydown ——按下了就触发，不用抬起     @keyup ——抬起后触发</code></pre><h3 id="1-Vue中常用的按键别名："><a href="#1-Vue中常用的按键别名：" class="headerlink" title="1.Vue中常用的按键别名："></a>1.Vue中常用的按键别名：</h3><pre><code>    使用  ——&gt; @keyup.enter=&quot; &quot;    回车 =&gt; enter     删除 =&gt; delete    退出 =&gt; esc    空格 =&gt; space    切换 =&gt;  tab     ==**注意tab要使用keydown,因为按下后焦点就切换掉了，无法使用keyup** ==    上  =&gt; up    下  =&gt; down    左  =&gt; left    右  =&gt; right    换行 =&gt; tab (特殊，必须配合keydown去使用) </code></pre><h3 id="2-vue未提供别名的按键，可以使用按键原始的key值去绑定它，"><a href="#2-vue未提供别名的按键，可以使用按键原始的key值去绑定它，" class="headerlink" title="2.vue未提供别名的按键，可以使用按键原始的key值去绑定它，"></a>2.vue未提供别名的按键，可以使用按键原始的key值去绑定它，</h3><pre><code>但注意要变化为 kebasb-case(短横线命名) eg:——caps-lock</code></pre><h3 id="3-系统修饰键-ctrl-shift-alt-meta-win键"><a href="#3-系统修饰键-ctrl-shift-alt-meta-win键" class="headerlink" title="3.系统修饰键 ctrl shift alt meta(win键)"></a>3.系统修饰键 ctrl shift alt meta(win键)</h3><pre><code>    (1)配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才能被触发    (2)配合keydown使用正常触发    (3)可配合特定按键一起 @keyup.ctrl.xxx=&quot; &quot; @keyup.ctrl.z</code></pre><h3 id="4-也可以使用keycode去指定具体的按键（不推荐）"><a href="#4-也可以使用keycode去指定具体的按键（不推荐）" class="headerlink" title="4.也可以使用keycode去指定具体的按键（不推荐）"></a>4.也可以使用keycode去指定具体的按键（不推荐）</h3><h3 id="5-Vue-config-keyCodes-自定义键名-x3D-键码（keycode-可以去定制按键别名（同样不推荐）"><a href="#5-Vue-config-keyCodes-自定义键名-x3D-键码（keycode-可以去定制按键别名（同样不推荐）" class="headerlink" title="5.Vue.config.keyCodes.自定义键名 &#x3D; 键码（keycode) 可以去定制按键别名（同样不推荐）"></a>5.Vue.config.keyCodes.自定义键名 &#x3D; 键码（keycode) 可以去定制按键别名（同样不推荐）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">    键盘事件语法糖：</span><br><span class="line">         @keydown ——按下了就触发，不用抬起</span><br><span class="line">         @keyup ——抬起后触发</span><br><span class="line">    1.Vue中常用的按键别名：</span><br><span class="line">        使用  ——&gt; @keyup.enter=&quot; &quot;</span><br><span class="line">        回车 =&gt; enter </span><br><span class="line">        删除 =&gt; delete</span><br><span class="line">        退出 =&gt; esc</span><br><span class="line">        空格 =&gt; space</span><br><span class="line">        切换 =&gt;  tab </span><br><span class="line">        ==**注意tab要使用keydown,因为按下后焦点就切换掉了，无法使用keyup** ==</span><br><span class="line">        上  =&gt; up</span><br><span class="line">        下  =&gt; down</span><br><span class="line">        左  =&gt; left</span><br><span class="line">        右  =&gt; right</span><br><span class="line">        换行 =&gt; tab (特殊，必须配合keydown去使用) </span><br><span class="line"></span><br><span class="line">    2.vue未提供别名的按键，可以使用按键原始的key值去绑定它，</span><br><span class="line">    但注意要变化为 kebasb-case(短横线命名) eg:——caps-lock</span><br><span class="line"></span><br><span class="line">    3.系统修饰键 ctrl shift alt meta(win键) </span><br><span class="line">        (1)配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才能被触发</span><br><span class="line">        (2)配合keydown使用正常触发</span><br><span class="line">        (3)可配合特定按键一起 @keyup.ctrl.xxx=&quot; &quot; @keyup.ctrl.z</span><br><span class="line">    4.也可以使用keycode去指定具体的按键（不推荐）</span><br><span class="line"></span><br><span class="line">    5.Vue.config.keyCodes.自定义键名 = 键码（keycode) 可以去定制按键别名（同样不推荐）</span><br><span class="line"> --&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入内容&quot; @keyup.ctrl.y=&quot;showInfo&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.config.keyCodes.huiche=13;//定义了一格别名按键</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    data:&#123;</span><br><span class="line">    name:&#x27;helloworld&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        showInfo(e)&#123;</span><br><span class="line">            console.log(&quot;执行了&quot;);</span><br><span class="line">            console.log(e.key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件处理基础</title>
      <link href="/2022/07/24/vue/06-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/2.%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2022/07/24/vue/06-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/2.%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="vue的事件修饰符："><a href="#vue的事件修饰符：" class="headerlink" title="vue的事件修饰符："></a>vue的事件修饰符：</h2><ol><li>prevent：阻止默认事件（常用） ——@click.prevent</li><li>stop:阻止事件冒泡</li><li>once：事件只触发一次。（常用）</li><li>capture：使用事件的捕获模式<br>            tip:捕获模式：<br>                        先从外层开始捕获到点击</li><li>sefl:只有event.target是当前操作的元素时才触发事件——也可用作防止事件冒泡</li><li>passive：事件的默认行为立即执行，无须等待时间回调执行完毕。</li></ol><h2 id="修饰符饰符特点："><a href="#修饰符饰符特点：" class="headerlink" title="修饰符饰符特点："></a>修饰符饰符特点：</h2><ul><li>可以连续写：<ul><li>EG:@click.prevent.stop(阻止默认行为+阻止冒泡)</li></ul></li></ul><h3 id="额外的知识："><a href="#额外的知识：" class="headerlink" title="额外的知识："></a>额外的知识：</h3><ol><li>scroll为滚动条滚动事件，滚动条抵达边缘后不再出发</li><li>wheel为鼠标滚轮滚动事件，滚动条抵达边缘后依旧触发</li></ol><h2 id="以下为各个修饰符用法的介绍"><a href="#以下为各个修饰符用法的介绍" class="headerlink" title="以下为各个修饰符用法的介绍"></a>以下为各个修饰符用法的介绍</h2><blockquote><p>这是一个全局的例子，接下来让我们来细细诉说</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">        *&#123;</span><br><span class="line">            margin-top: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        .box1&#123;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">        .box2&#123;</span><br><span class="line">            background-color: azure;</span><br><span class="line">        &#125;</span><br><span class="line">        .scroll&#123;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: blueviolet;</span><br><span class="line">            overflow: auto;</span><br><span class="line">        &#125;</span><br><span class="line">        .scroll li&#123;</span><br><span class="line">            height: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        修饰符特点：</span><br><span class="line">            可以连续写</span><br><span class="line">            EG:@click.prevent.stop(阻止默认行为+阻止冒泡)</span><br><span class="line">        vue的大事件修饰符：</span><br><span class="line">        1.prevent：阻止默认事件（常用） ——@click.prevent</span><br><span class="line">        2.stop:阻止事件冒泡</span><br><span class="line">        3.once：事件只触发一次。（常用）</span><br><span class="line">        4.capture：使用事件的捕获模式</span><br><span class="line">                tip:捕获模式：</span><br><span class="line">                            先从外层开始捕获到点击</span><br><span class="line">                            然后从里层开始冒泡</span><br><span class="line">        5.sefl:只有event.target是当前操作的元素时才触发事件——也可用作防止事件冒泡</span><br><span class="line">        6.passive：事件的默认行为立即执行，无须等待时间回调执行完毕。</span><br><span class="line">        </span><br><span class="line">        额外的知识：</span><br><span class="line">        1.scroll为滚动条滚动事件，滚动条抵达边缘后不再出发</span><br><span class="line">        2.wheel为鼠标滚轮滚动事件，滚动条抵达边缘后依旧触发</span><br><span class="line"></span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 阻止默认事件 --&gt;</span><br><span class="line">        &lt;a href=&quot;https://www.baidu.com&quot; @click.prevent=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt;</span><br><span class="line">        &lt;!-- 阻止事件冒泡 --&gt;</span><br><span class="line">        &lt;div style=&quot;background-color: blanchedalmond;&quot;@click=&quot;showInfo&quot;&gt;</span><br><span class="line">            &lt;button @click.stop=&quot;showInfo2&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">            &lt;!-- 修饰符可以连续写 --&gt;</span><br><span class="line">            &lt;a href=&quot;https://www.baidu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 事件只触发一次 --&gt;</span><br><span class="line">        &lt;button @click.once=&quot;showInfo2&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">        &lt;!-- 事件的捕获模式  --&gt;</span><br><span class="line">        &lt;!--   捕获模式：</span><br><span class="line">                        先从外层开始捕获到点击</span><br><span class="line">                        然后从里层开始冒泡 </span><br><span class="line">                            这里体现为 box1先捕获到事件，然后到button，但</span><br><span class="line">                        冒泡是由button ——→  div </span><br><span class="line">                        冒泡的结果时，div中触发的点击时间event.target也是button     </span><br><span class="line">                    --&gt;</span><br><span class="line">        &lt;div @click.capture=&quot;click(1)&quot; class=&quot;box1&quot;&gt;</span><br><span class="line">            &lt;button @click=&quot;click(2)&quot;&gt;事件的捕获模式&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div @click.self=&quot;self($event)&quot; class=&quot;box2&quot;&gt;</span><br><span class="line">            &lt;button @click=&quot;self($event)&quot;&gt;事件修饰符self&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 6.passive：事件的默认行为立即执行，无须等待时间回调执行完毕。 --&gt;</span><br><span class="line">        &lt;!-- 事件执行的流程为：一执行回调函数，并且等待执行完成后 →二、渲染效果，</span><br><span class="line">            在这个案例中，scroll函数内事件执行时间过长，会影响滚动条的渲染 ，</span><br><span class="line">            这里使用passive不等待回调函数执行完成，直接渲染--&gt;</span><br><span class="line">        &lt;ul class=&quot;scroll&quot; @wheel=&quot;scroll&quot;&gt;</span><br><span class="line">            &lt;!-- wheel 为滚轮滚动事件</span><br><span class="line">            scroll 为滑动条滚动事件 --&gt;</span><br><span class="line">            &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">   &lt;script&gt;</span><br><span class="line">   new Vue(&#123;</span><br><span class="line">   el:&#x27;#root&#x27;,</span><br><span class="line">   data:&#123;</span><br><span class="line">    name:&#x27;helloworld&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            showInfo(e)&#123;</span><br><span class="line">                alert(&quot;欢迎你&quot;);</span><br><span class="line">                //这里弹出窗口后会默认执行href</span><br><span class="line">            &#125;,</span><br><span class="line">            showInfo2(e)&#123;</span><br><span class="line">                alert(&quot;同学你好&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            self(event)&#123;</span><br><span class="line">                console.log(event.target);</span><br><span class="line">            &#125;,</span><br><span class="line">            click(number)&#123;</span><br><span class="line">                console.log(number);</span><br><span class="line">            &#125;,</span><br><span class="line">            scroll()&#123;</span><br><span class="line">                for(let i=0;i&lt;100;i++)&#123;</span><br><span class="line">                    console.log(&quot;f&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"> &lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件处理基础</title>
      <link href="/2022/07/24/vue/06-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/1.%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/07/24/vue/06-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/1.%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h2><pre><code>            1. 使用v-on:xxx或 @xxx 绑定事件，其中xx为事件名            1. 事件的回调需要配置在methods对象中，最终会出添加到vm对象上</code></pre><ol start="3"><li>methods配置的函数，不要使用&#x3D;&#x3D;箭头函数&#x3D;&#x3D;！否则this的就不是vm了</li><li>methods配置的函数，都是被vue所管理的函数，this的指向是vm或 组件实例对象</li><li>@click&#x3D;”demo” 和@click&#x3D;”demo($event)”效果一样，但后者可以传</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">        事件的基本使用</span></span><br><span class="line"><span class="comment">                1.使用v-on:xxx或 @xxx 绑定事件，其中xx为事件名</span></span><br><span class="line"><span class="comment">                2. 事件的回调需要配置在methods对象中，最终会出添加到vm对象上</span></span><br><span class="line"><span class="comment">                3. methods配置的函数，不要使用==箭头函数==！否则this的就不是vm了</span></span><br><span class="line"><span class="comment">4. methods配置的函数，都是被vue所管理的函数，this的指向是vm或 组件实例对象</span></span><br><span class="line"><span class="comment">5。 @click=&quot;demo&quot; 和@click=&quot;demo($event)&quot;效果一样，但后者可以传参</span></span><br><span class="line"><span class="comment">               --&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- 添加一个容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;         --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1(不传参)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 传递参数  ,如果想保留event，使用关键词 $event --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示信息2(传递参数)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm= <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 事件要配置在methods 对象中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// alert(&quot;同学你好&quot;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">//此处的this就是指vue实例</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo1</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;同学你好&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo2</span>(<span class="params">evnet,number</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(number);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(vm);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02何为数据代理</title>
      <link href="/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/02%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/02%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> &lt;!-- 数据代理：通过一个对象代理对领一个对象中的属性的操作（读/写）  --&gt;</span><br><span class="line"></span><br><span class="line">​    &lt;!-- 这里是ojb2通过数据代理操作和使用object1的x --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        let obj1=&#123;x:100&#125;;</span><br><span class="line">        let obj2=&#123;y:200&#125;;</span><br><span class="line">        Object.defineProperty(obj2,&quot;x&quot;,&#123;</span><br><span class="line">            get()&#123;</span><br><span class="line">                return obj1.x</span><br><span class="line">            &#125;,</span><br><span class="line">            set(value)&#123;</span><br><span class="line">                obj1.x=value</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">​        &#125;)</span><br><span class="line">​    &lt;/script&gt;</span><br><span class="line">​    &lt;!-- </span><br><span class="line">​        1.Vue中的数据代理：</span><br><span class="line">​            通过vm对象来代理data对象中属性的操作 （读/写）</span><br><span class="line">​        2.Vue中数据代理的好处</span><br><span class="line">​            更加方便的操作data中的数据</span><br><span class="line">​        3.基本原理</span><br><span class="line">​            通过object.defineProperty()把data对象中所有属性都添加到vm上。</span><br><span class="line">​            并为每一个添加到vm上的属性，都指定一个getter/setter</span><br><span class="line">​            在getter/setter内部去操作（读/写）data中相应的属性</span><br><span class="line">​     --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        new Vue(&#123;</span><br><span class="line">        el:&#x27;#root&#x27;,</span><br><span class="line">        data:&#123;</span><br><span class="line">        name:&#x27;helloworld&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">​    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="数据代理图示："><a href="#数据代理图示：" class="headerlink" title="数据代理图示："></a>数据代理图示：</h2><ol><li>Vue中的数据代理：<ol><li>通过vm对象来代理data对象中属性的操作 （读&#x2F;写）</li></ol></li><li>Vue中数据代理的好处<ol><li>更加方便的操作data中的数据</li></ol></li><li>基本原理</li><li>通过object.defineProperty()把data对象中所有属性都添加到vm上。<br>并为每一个添加到vm上的属性，都指定一个getter&#x2F;setter<br>在getter&#x2F;setter内部去操作（读&#x2F;写）data中相应的属性</li></ol><p><img src="/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/02%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/image-20220724171845259.png" alt="image-20220724171845259"></p><h2 id="额外补充："><a href="#额外补充：" class="headerlink" title="额外补充："></a>额外补充：</h2><ol><li>在vm对象中的_data,vue为了能做响应式，在_data做了&#x3D;&#x3D;<strong>数据劫持</strong>&#x3D;&#x3D;。所以打开_data后看到的不是跟原始data对象一样，而是经过了数据劫持的处理</li></ol><p><img src="/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/02%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/image-20220724171956764.png" alt="image-20220724171956764"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06.Object.defineProperty方法</title>
      <link href="/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/06-Object-defineProperty%E6%96%B9%E6%B3%95/"/>
      <url>/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/06-Object-defineProperty%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Vue中重要的数据代理函数 ——Object.defineProperty函数介绍</p><span id="more"></span><h2 id="1-组成"><a href="#1-组成" class="headerlink" title="1. 组成"></a>1. 组成</h2> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(object,keyName,&#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">let number =21;</span><br><span class="line">    let person=&#123;</span><br><span class="line">        name:&#x27;张三&#x27;,</span><br><span class="line">        sex:&#x27;男&#x27;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object.defineProperty(person,&#x27;ages&#x27;,&#123;</span><br><span class="line">        // value:18,</span><br><span class="line">        // enumerable:true  默认添加的value是不可以 枚举 的，即不可以用来循环等</span><br><span class="line">        // for(val in person)&#123;</span><br><span class="line">        // console.log(val);</span><br><span class="line">        //             &#125;</span><br><span class="line">        // writable:true 控制属性是否可以被修改，默认为FALSE</span><br><span class="line">        // configurable:true 控制属性是否可以被删除，默认为FALSE</span><br><span class="line">        //当有人读取person的ages属性时，get函数(getter)就会被调用，且返回值就是age的值</span><br><span class="line">        get()&#123;</span><br><span class="line">            console.log(&quot;有人读取属性了&quot;);</span><br><span class="line">            return number</span><br><span class="line">        &#125;,</span><br><span class="line">        //当有人修改person的ages属性时，set函数(setter)就会被调用,且会接收到修改的具体指</span><br><span class="line">        set(value)&#123;</span><br><span class="line">            console.log(value);</span><br><span class="line">            number=value;//由于get方法中，将number返回当做ages的值，所以这里修改</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h2 id="2-get方法说明"><a href="#2-get方法说明" class="headerlink" title="2. get方法说明"></a>2. get方法说明</h2><blockquote><p>1.当使用此方法时不能再在配置对象中使用value</p><p>2.输出查看以….形式呈现</p></blockquote><p><img src="/2022/07/24/vue/05-%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/06-Object-defineProperty%E6%96%B9%E6%B3%95/image-20220724153402562.png" alt="image-20220724153402562"></p><h2 id="3-set方法"><a href="#3-set方法" class="headerlink" title="3.set方法"></a>3.set方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//当有人修改person的ages属性时，set函数(setter)就会被调用,且会接收到修改的具体指</span><br><span class="line">        set(value)&#123;</span><br><span class="line">            console.log(value);</span><br><span class="line">            number=value;//由于get方法中，将number返回当做ages的值，所以这里修改</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>vue通过两个方法实现数据的沟通</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2022/07/23/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/07/23/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>🎢利用hexo+github的pages功能，搭建简易版的个人博客！🐼</p><p style="color:red">来动手试试吧！</p><span id="more"></span><p>[TOC]</p><h2 id="一、搭建准备工作"><a href="#一、搭建准备工作" class="headerlink" title="一、搭建准备工作"></a>一、搭建准备工作</h2><ol><li><p>配置安装好Node.js和Npm(NPM默认跟随Node.js安装)</p><blockquote><p>官方推荐(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</p></blockquote></li></ol><img src="/2022/07/23/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220723202332590.png" alt="image-20220723202332590"><ol start="2"><li>配置好Git环境</li></ol><h2 id="二、搭建和hexo常用命令"><a href="#二、搭建和hexo常用命令" class="headerlink" title="二、搭建和hexo常用命令"></a>二、搭建和hexo常用命令</h2><h3 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1. 安装hexo"></a>1. 安装hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="2-初始化hexo。首先进入你想创建blog的文件夹，启动powershell"><a href="#2-初始化hexo。首先进入你想创建blog的文件夹，启动powershell" class="headerlink" title="2. 初始化hexo。首先进入你想创建blog的文件夹，启动powershell"></a>2. 初始化hexo。首先进入你想创建blog的文件夹，启动powershell</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><blockquote><p>folder 为你想 创建的名字，这里可以自定义，我使用blog<br>hexo init blog</p></blockquote><h3 id="3-进入初始化好的hexo。再使用npm安装配套组件。然后再进入步骤2创建的文件夹，我这里是blog文件夹，你将会看到如下的文件结构。"><a href="#3-进入初始化好的hexo。再使用npm安装配套组件。然后再进入步骤2创建的文件夹，我这里是blog文件夹，你将会看到如下的文件结构。" class="headerlink" title="3. 进入初始化好的hexo。再使用npm安装配套组件。然后再进入步骤2创建的文件夹，我这里是blog文件夹，你将会看到如下的文件结构。"></a>3. 进入初始化好的hexo。再使用npm安装配套组件。然后再进入步骤2创建的文件夹，我这里是blog文件夹，你将会看到如下的文件结构。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">blog/文件下</span></span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这些我们后面再讲</span></span><br></pre></td></tr></table></figure><h3 id="4-开始创建你的第一个hexo博客"><a href="#4-开始创建你的第一个hexo博客" class="headerlink" title="4. 开始创建你的第一个hexo博客"></a>4. 开始创建你的第一个hexo博客</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g #编译生成静态文件 即 ——————&gt;将md文件配合其他文件生成 html+css+js文件</span><br><span class="line">hexo s # 启动本地调试</span><br></pre></td></tr></table></figure><h3 id="5-使用浏览器打开-localhost-4000"><a href="#5-使用浏览器打开-localhost-4000" class="headerlink" title="5. 使用浏览器打开 localhost:4000"></a>5. 使用浏览器打开 localhost:4000</h3><p>**Surprise  !**你的第一个hexo已经完成。</p><p><img src="/2022/07/23/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220723215707288.png" alt="image-20220723215707288"></p><h3 id="6-如果你不太喜欢官方给的主题，那让我们一起来完成主题的更换吧"><a href="#6-如果你不太喜欢官方给的主题，那让我们一起来完成主题的更换吧" class="headerlink" title="6. 如果你不太喜欢官方给的主题，那让我们一起来完成主题的更换吧"></a>6. 如果你不太喜欢官方给的主题，那让我们一起来完成主题的更换吧</h3><h4 id="a-去官方或者github-x2F-gitee-下载你喜欢的主题，并将其保存在themes文件下。"><a href="#a-去官方或者github-x2F-gitee-下载你喜欢的主题，并将其保存在themes文件下。" class="headerlink" title="a. 去官方或者github&#x2F;gitee 下载你喜欢的主题，并将其保存在themes文件下。"></a>a. 去官方或者github&#x2F;gitee 下载你喜欢的主题，并将其保存在themes文件下。</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我这里用 next-pure主题做演示</span></span><br><span class="line">cd themes/</span><br><span class="line">git clone git@gitee.com:mirrors_cofess/hexo-theme-pure.git</span><br></pre></td></tr></table></figure><h4 id="b-修改-config-yml文件（blog文件夹下的，这里称为客户端配置文件），主题文件中也有一个，我将它称为主题配置文件"><a href="#b-修改-config-yml文件（blog文件夹下的，这里称为客户端配置文件），主题文件中也有一个，我将它称为主题配置文件" class="headerlink" title="b. 修改_config.yml文件（blog文件夹下的，这里称为客户端配置文件），主题文件中也有一个，我将它称为主题配置文件"></a>b. 修改_config.yml文件（blog文件夹下的，这里称为客户端配置文件），主题文件中也有一个，我将它称为主题配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Extensions</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Themes: https://hexo.io/themes/</span></span></span><br><span class="line">theme: landscape</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里的thems 修改为你<span class="built_in">clone</span>后的文件名</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">eg:</span></span><br><span class="line">theme: hexo-theme-pure</span><br></pre></td></tr></table></figure><blockquote><p>注意thems 与值之间有  ”空格“</p></blockquote><h4 id="c-重新执行构建文件"><a href="#c-重新执行构建文件" class="headerlink" title="c. 重新执行构建文件"></a>c. 重新执行构建文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清理一下缓存，为了更好的使用主题</span><br><span class="line">hexo generate #直接使用hexo g也可以</span><br><span class="line">hexo server #直接使用hexo s也可以</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新打开，surprise！</span></span><br></pre></td></tr></table></figure><blockquote><p>具体的美化修改可以看官方的文档。<a href="https://gitee.com/mirrors_cofess/hexo-theme-pure">点击这里进入官方文档</a></p><blockquote><p>另外不要安装官方文档上的<code>hexo-generator-baidu-sitemap</code>插件，这个插件会导致程序报错。</p></blockquote></blockquote><h3 id="7-配置文件介绍"><a href="#7-配置文件介绍" class="headerlink" title="7. 配置文件介绍"></a>7. 配置文件介绍</h3><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> (查看详细请点击)信息，你可以在此配置大部分的参数</p><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package.json&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.8.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p><a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当你新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果你修改scaffold&#x2F;post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><blockquote><p>hexo n “blogName”</p><p>这里默认使用的模板就是post</p></blockquote><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><blockquote><p>我们使用 hexo n “blogName”命令生成新文档后。</p><p>md文件就储存在source&#x2F;_post&#x2F;下</p></blockquote><h3 id="8-如何配置github-x2F-gitee的部署"><a href="#8-如何配置github-x2F-gitee的部署" class="headerlink" title="8. 如何配置github&#x2F;gitee的部署"></a>8. 如何配置github&#x2F;gitee的部署</h3><ol><li>创建github&#x2F;gitee仓库，仓库名称为 [用户名称].github.io。并且要开启github pages服务</li></ol><p><img src="/2022/07/23/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220723223227122.png" alt="image-20220723223227122"></p><blockquote><p>ps:国内的gitee需要实名验证才能开启，但不晓得为什么我就是一直显示在审核中。</p></blockquote><ol start="2"><li>安装deploy插件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><pre><code> 3. 配置 _config.yml文件</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 对应仓库地址 </span><br><span class="line">  branch: #github为main，gitee为master</span><br></pre></td></tr></table></figure><ol start="4"><li>部署到github&#x2F;gitee上</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p> &#x3D;&#x3D;<strong>Congratulation ！完成啦</strong>&#x3D;&#x3D;</p><h2 id="三、解决一些小问题"><a href="#三、解决一些小问题" class="headerlink" title="三、解决一些小问题"></a>三、解决一些小问题</h2><h3 id="1-如何配置实现本地Typora和网页端都能正常显示图片？"><a href="#1-如何配置实现本地Typora和网页端都能正常显示图片？" class="headerlink" title="1. 如何配置实现本地Typora和网页端都能正常显示图片？"></a>1. 如何配置实现本地Typora和网页端都能正常显示图片？</h3><ol><li>安装<a href="https://github.com/EricGerry/hexo-asset-image-0.0.5.git">hexo-asset-image</a>,可以上传本地图片的插件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/EricGerry/hexo-asset-image-0.0.5.git --save</span><br></pre></td></tr></table></figure><blockquote><p>注意，这里必须使用&#x3D;&#x3D;<strong>0.0.5版本</strong>&#x3D;&#x3D;</p></blockquote><ol start="2"><li>配置_config.yml启用文件管理插件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在文件中使用查找功能</span></span><br><span class="line">post_asset_folder: false</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改为</span></span><br><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><ol start="3"><li>重新生成文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;test&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li>然后你会发现在souce&#x2F;_post&#x2F;目录下同时出现了 <em>test.md</em>和<em>test文件夹</em>，将你需要的图片资源丢到里面即可</li><li>最后一步，配置Typora。</li></ol><p><img src="/2022/07/23/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220723222234769.png" alt="image-20220723222234769"></p><blockquote><p>这里一定要勾选 &#x3D;&#x3D;优先使用相对路径&#x3D;&#x3D;</p></blockquote><ol start="6"><li>测试一下，恭喜完成！</li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前段界面响应式布局</title>
      <link href="/2022/07/23/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
      <url>/2022/07/23/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>🎢响应式布局！🐼</p><p><img src="/2022/07/23/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/image-20220720145858207.png" alt="image-20220720145858207"></p><p><img src="/2022/07/23/%E5%89%8D%E7%AB%AF%E4%B8%89%E5%89%91%E5%AE%A2/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/image-20220720145844309.png" alt="image-20220720145844309"></p>]]></content>
      
      
      <categories>
          
          <category> 响应式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前段三剑客 </tag>
            
            <tag> 响应式开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2022/07/23/JavaScript/Promise/1.Promise%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/23/JavaScript/Promise/1.Promise%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>🎢Promise的使用！🐼</p><p style="color:red">来动手试试吧！</p><span id="more"></span><p>promise的当</p><p><img src="/2022/07/23/JavaScript/Promise/1.Promise%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E4%BD%BF%E7%94%A8/image-20220720223120295.png" alt="image-20220720223120295"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2022/07/23/vue/16-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/07/23/vue/16-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<hr><span id="more"></span><p>[TOC]</p><h2 id="自定义指令总结："><a href="#自定义指令总结：" class="headerlink" title="自定义指令总结："></a>自定义指令总结：</h2><p>​        一、定义语法</p><p>​          （1）局部指令：</p><p>​            new Vue({          </p><p>​              directives:{</p><p>​                指令名:配置对象  或</p><p>​              }</p><p>​            })</p><p>​            或</p><p>​            new Vue({</p><p>​              directives:{</p><p>​                指令名:回调函数</p><p>​              }</p><p>​            })</p><p>​          (2)全局指令：</p><p>​            Vue.directive(指令名,配置对象) 或 Vue.directive(指令名,回调函数)</p><p>​        </p><p>​         二、配置对象中常用的3个回调：</p><p>​            (1).bind:指令与元素绑定陈功时调用</p><p>​            (2).inserted:指令所在元素被插入页面时调用</p><p>​            (3).update：指令所在模板结构被重新解析时调用</p><p>​        三、备注</p><p>​            1.指令定义时不加v-，但使用时要加v-</p><p>​            2.指令名如果是多个单词，则要使用kebab-case命名方式，</p><p>​              不要使用camelCase命名（驼峰）</p><h2 id="自定义指令的坑"><a href="#自定义指令的坑" class="headerlink" title="自定义指令的坑:"></a>自定义指令的坑:</h2><ol><li><p>多个单词命名时，不推荐使用 <strong>&#x3D;&#x3D;驼峰命名法&#x3D;&#x3D;</strong></p><p>why ? </p><p>​当你写成 v-bigNumber ，vue会将其转化为 v-bignumber</p><p>当你在directive中使用时就要写</p><p>​bignumber(){}</p><p>Vue推荐的是what?</p><p>​ 使用 ‘-‘ 进行分隔  v-big-number</p><p>在directive配置时，</p><p>​‘big-number’:function(){}</p><blockquote><p>tip : 在书写对象 时，原本的写法就是</p><p>​——–&gt;”key”:value</p><p>只是我们经常使用简写</p><p>​———————-&gt;big(){}</p><p>但简写不支持-这种符号</p><p>​so，需要写回本来的形式</p><p>​—————–’big-number’:function(){}</p></blockquote></li><li><p>**&#x3D;&#x3D;局部指令&#x3D;&#x3D;**只能在同一个Vue实例中使用</p><p>​how？配置全局</p><p>​Vue.directive(‘name’,function&#x2F;Object)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的开始</title>
      <link href="/2022/07/22/vue/01-%E5%88%9D%E5%A7%8Bvue/01.%E5%88%9D%E8%AF%86Vue/"/>
      <url>/2022/07/22/vue/01-%E5%88%9D%E5%A7%8Bvue/01.%E5%88%9D%E8%AF%86Vue/</url>
      
        <content type="html"><![CDATA[<p>VUe的引入</p><span id="more"></span><h1 id="Vue的开始"><a href="#Vue的开始" class="headerlink" title="Vue的开始"></a>Vue的开始</h1><h2 id="1-引入"><a href="#1-引入" class="headerlink" title="1.引入"></a>1.引入</h2><blockquote><p>vue.js是开发板的js文件，带有错误提示；vuemi.js是线上版，不会有提示</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入vuescript,引入完成后HTML中会多了一个vue的构造器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span>=<span class="literal">false</span>;<span class="comment">//阻止vue在启动时生成提示</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//创建Vue实例,参数为配置对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> x=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 链接vue实例与HTML元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,<span class="comment">//element,el用于指定当前vue实例为哪个容器服务，值通常为css选择器字符串。</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// el:documenet.getElementById(&#x27;root&#x27;),这样子写也可以</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>想要Vue工作，就必须创建一个Vue实例，且要传入一个配置对象</li><li>在HTML中创建容器，并在配置对象中用<em><strong>el</strong></em>，传入</li><li>容器内的代码依旧符合HTML规范，只不过混入了一些&#x3D;&#x3D;特殊的Vue语法&#x3D;&#x3D;。</li><li>容器里的代码被称为vue模块</li><li>Vue实例与容器只能是&#x3D;&#x3D;一一对应&#x3D;&#x3D;的关系</li><li>中的xxx要写==js表达式==,且xxx可以直接读取到data中的==所有属性==。</li><li>当Vue实例中的data发生变化是，页面中用到该数据的地方也会自动刷新。</li></ol><h3 id="区分什么是-x3D-x3D-js表达式-x3D-x3D-，什么是-x3D-x3D-js代码（或者说语句）-x3D-x3D"><a href="#区分什么是-x3D-x3D-js表达式-x3D-x3D-，什么是-x3D-x3D-js代码（或者说语句）-x3D-x3D" class="headerlink" title="区分什么是&#x3D;&#x3D;js表达式&#x3D;&#x3D;，什么是&#x3D;&#x3D;js代码（或者说语句）&#x3D;&#x3D;"></a>区分什么是&#x3D;&#x3D;js表达式&#x3D;&#x3D;，什么是&#x3D;&#x3D;js代码（或者说语句）&#x3D;&#x3D;</h3><ol><li><p>表达式：一个表达式会产生一个&#x3D;&#x3D;值&#x3D;&#x3D;，可以放在任何需要值的地方。</p><p>eg:</p><pre><code>- a(在已经定义好a变量后，再使用a，就会得到它对应的值)- a+b，这明显是一个 ‘加法运算的表达式’- function(1) ——这是一个调用函数并得到其返回值的形式- x==y?a:b ——三元表达式</code></pre></li><li><p>js代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 控制顺序，例如 <span class="keyword">if</span>()&#123;&#125;</span><br><span class="line">- <span class="keyword">for</span>()&#123;&#125;、、</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的MVVM设计模式</title>
      <link href="/2022/07/22/vue/04.Vue%E4%B8%AD%E7%9A%84MVVM/04.Vue%E4%B8%AD%E7%9A%84MVVM/"/>
      <url>/2022/07/22/vue/04.Vue%E4%B8%AD%E7%9A%84MVVM/04.Vue%E4%B8%AD%E7%9A%84MVVM/</url>
      
        <content type="html"><![CDATA[<p>Vue中的MVVM设计模式</p><span id="more"></span><h1 id="Mvvw"><a href="#Mvvw" class="headerlink" title="Mvvw"></a>Mvvw</h1><p><img src="/2022/07/22/vue/04.Vue%E4%B8%AD%E7%9A%84MVVM/04.Vue%E4%B8%AD%E7%9A%84MVVM/image-20220721001442128.png" alt="image-20220721001442128"></p><p><img src="/2022/07/22/vue/04.Vue%E4%B8%AD%E7%9A%84MVVM/04.Vue%E4%B8%AD%E7%9A%84MVVM/image-20220721001558095.png" alt="image-20220721001558095"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>M：模型(Model) ：data中的数据</li><li>V：视图(View) ：模板代码</li><li>VM：视图模型(ViewModel)：Vue实例</li></ul><h3 id="观察发现"><a href="#观察发现" class="headerlink" title="观察发现"></a>观察发现</h3><p>​MVM模型：</p><ol><li>data上的所有属性，最终都会出现在vm身上。</li><li>vm身上所有的属性，及vue原型上所有属性，在vue模块上都可以直接使用</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的模块语法及数据的双向绑定</title>
      <link href="/2022/07/22/vue/02.Vue%E7%9A%84%E6%A8%A1%E5%9D%97%E8%AF%AD%E6%B3%95%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/02.Vue%E7%9A%84%E6%A8%A1%E5%9D%97%E8%AF%AD%E6%B3%95%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
      <url>/2022/07/22/vue/02.Vue%E7%9A%84%E6%A8%A1%E5%9D%97%E8%AF%AD%E6%B3%95%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/02.Vue%E7%9A%84%E6%A8%A1%E5%9D%97%E8%AF%AD%E6%B3%95%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>VUe的的基本语法</p><span id="more"></span><h1 id="1-2模块语法、数据单-双-向绑定"><a href="#1-2模块语法、数据单-双-向绑定" class="headerlink" title="1.2模块语法、数据单(双)向绑定"></a>1.2模块语法、数据单(双)向绑定</h1><h2 id="一、模块语法"><a href="#一、模块语法" class="headerlink" title="一、模块语法"></a>一、模块语法</h2><blockquote><p>可分为：1.插值语法、2.指令语法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">      &lt;!-- 插值语法--&gt;</span><br><span class="line">      &lt;h1&gt;插值语法&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;!-- 指令语法--&gt;</span><br><span class="line">      &lt;h1&gt;指令语法&lt;/h1&gt;</span><br><span class="line">      &lt;a v-bind:href=&quot;url&quot;&gt;点我进入百度&lt;/a&gt;</span><br><span class="line">      &lt;!--简写--&gt;</span><br><span class="line">      &lt;a :href=&quot;school.url&quot;&gt;点我进入bing&lt;/a&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">      el:&#x27;#root&#x27;,</span><br><span class="line">      data:&#123;</span><br><span class="line">          name:&#x27;helloworld&#x27;,</span><br><span class="line">          url:&#x27;www.baidu.com&#x27;,</span><br><span class="line">          school:&#123;</span><br><span class="line">              url:&#x27;www.bing.com&#x27;</span><br><span class="line">          &#125;,</span><br><span class="line">          input:&#x27;value&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Vue模块语法有2大类：</p><ol><li><p>插值语法</p><ul><li><p>功能：用于解析&#x3D;&#x3D;标签体内容&#x3D;&#x3D;</p></li><li><p>写法：，xxx是&#x3D;&#x3D;js表达式&#x3D;&#x3D;,且可以&#x3D;&#x3D;直接读取&#x3D;&#x3D;(如果是date里面对象的值则需要使用object.propertyName访问)到data中的所有属性</p></li><li><p>备注：</p><ul><li>如果同一个变量在同一级中进行了多次赋值，则以&#x3D;&#x3D;最后一次赋值&#x3D;&#x3D;为准</li></ul></li></ul></li><li><p>指令语法</p><ul><li>功能：用于解析标签（包括标签属性、标签体内容、绑定时间……）</li><li>写法举例：<ul><li>绑定标签属性：v-bind:href&#x3D;’xxx’, <strong>xxx直接为名字</strong></li><li>或简写为 :href&#x3D;’xxx’,xxx同样要写&#x3D;&#x3D;js表达式&#x3D;&#x3D;</li></ul></li><li>备注：<ul><li><ol><li>Vue中有许多的指令，且形式都是 v-??，这里只是一个举例</li><li>v-bind是&#x3D;&#x3D;<strong>单向数据绑定</strong>&#x3D;&#x3D;</li></ol></li></ul></li></ul><blockquote><p>这里需要注意一下，微信小程序中的指令语法写法与插值语法相同</p><p>eg: <view width> </view></p></blockquote></li></ol><h2 id="二、双向数据绑定"><a href="#二、双向数据绑定" class="headerlink" title="二、双向数据绑定"></a>二、双向数据绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">v-mode</span>=<span class="string">&#x27;name&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 普通写法 单向数据绑定 --&gt;</span></span><br><span class="line">    单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 简写 v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值--&gt;</span></span><br><span class="line">    单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>Vue中有2种数据绑定的方式：</p><ol><li><p>单向绑定(v-bind)：数据只能从data流向页面</p></li><li><p>双向绑定(v-model)：数据不仅能从data流向页面，还可以从&#x3D;&#x3D;页面流向data&#x3D;&#x3D;</p></li></ol><blockquote><p>1.双向绑定一般都应用在表单类元素上（如：input、select等）</p></blockquote><blockquote><p>2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el与data的两种写法+vue实例</title>
      <link href="/2022/07/22/vue/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/"/>
      <url>/2022/07/22/vue/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>el与data的两种写法+vue实例</p><span id="more"></span><h1 id="el与data的两种写法-vue实例"><a href="#el与data的两种写法-vue实例" class="headerlink" title="el与data的两种写法+vue实例"></a>el与data的两种写法+vue实例</h1><h2 id="一、-认识vue实例"><a href="#一、-认识vue实例" class="headerlink" title="一、.认识vue实例"></a>一、.认识vue实例</h2><p><img src="/2022/07/22/vue/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/image-20220720233419940.png" alt="image-20220720233419940"></p><p> 1.1，以$开头的字符都是vue准备好给小程序用的</p><p>1.2 以_是vue底层在使用的</p><p><img src="/2022/07/22/vue/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/image-20220720234345244.png" alt="image-20220720234345244"></p><p>1.3 使用vue原型缔造对象的方法</p><p><img src="/2022/07/22/vue/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/image-20220720234416167.png" alt="image-20220720234416167"></p><h2 id="二、el的第二种写法"><a href="#二、el的第二种写法" class="headerlink" title="二、el的第二种写法"></a>二、el的第二种写法</h2><ol><li>简介</li></ol><p>​vue实例构造器里的方法</p><p>​v.#mount(‘xx’) ——xxx为<strong>css的选择器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// el:&#x27;#root&#x27;, //第一种写法</span></span></span><br><span class="line"><span class="language-javascript">     <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">name</span>:<span class="string">&#x27;helloworld&#x27;</span></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript">     v.$mount(<span class="string">&#x27;#root&#x27;</span>) <span class="comment">//第二种写法</span></span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、-data的两种写法"><a href="#三、-data的两种写法" class="headerlink" title="三、 data的两种写法"></a>三、 data的两种写法</h2>   <script>       new Vue({        // el:'#root', //el第一种写法        data:{//data的第一种写法        name:'helloworld'        }        v.$mount('#root') //el第二种写法        //data第二种写法,函数式              data:function(){           return{               name:'尚硅谷'           }       }       or:       data:      })        </script><p>​      </p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>el有2种写法</p><ul><li>new Vue时候配置el属性</li><li>先创建Vue实例，随后再通过使用vue原型中的mount方法，vm.$mount(‘#root’)指定el的值</li></ul><p>data有2种写法</p><ul><li><p>对象式</p></li><li><p>函数式</p><blockquote><p>如何选择：在组件中，data必须使用函数式</p></blockquote></li></ul><p>一个重要的原则：由vue管理的函数，一定不要写&#x3D;&#x3D;箭头函数&#x3D;&#x3D;，一旦写了箭头函数，this就不再是vue实例了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4-%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8/1-%E6%9E%84%E9%80%A0%E5%99%A8/"/>
      <url>/2022/07/20/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4-%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8/1-%E6%9E%84%E9%80%A0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><h3 id="一、构造器的简介："><a href="#一、构造器的简介：" class="headerlink" title="一、构造器的简介："></a>一、构造器的简介：</h3><p>​是类的一种特殊的方法，它的主要作用是完成对<code>==新对象的初始化==</code>。</p><p>​&#x3D;&#x3D;&#x3D;&gt;在创建完对象后，才进行的初始化，而不是用它来创建对象。</p><p><img src="/2022/07/20/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4-%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8/1-%E6%9E%84%E9%80%A0%E5%99%A8/image-20221012220702986.png" alt="image-20221012220702986"></p><h3 id="二、构造器的特点"><a href="#二、构造器的特点" class="headerlink" title="二、构造器的特点"></a>二、构造器的特点</h3><ol><li><p>方法名和类名相同。</p></li><li><p>没有返回值。（&#x3D;&#x3D;同时不能写void关键字，留空即可！！！！&#x3D;&#x3D;）</p></li><li><p>在创建对象时，系统会自动的调用该类的构造器完成对对象的初始化。</p></li></ol><p><img src="/2022/07/20/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4-%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8/1-%E6%9E%84%E9%80%A0%E5%99%A8/image-20220720234732290.png" alt="image-20220720234732290"></p><h3 id="三、构造器的注意事项和细节"><a href="#三、构造器的注意事项和细节" class="headerlink" title="三、构造器的注意事项和细节"></a>三、构造器的注意事项和细节</h3><ol><li>一个类中可以定义多个不同的构造器，即&#x3D;&#x3D;构造器重载&#x3D;&#x3D;</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class sequenceArray&#123;</span><br><span class="line">    int age;</span><br><span class="line">    String name;</span><br><span class="line">    sequenceArray()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    sequenceArray(int age,String name)&#123;</span><br><span class="line">        this.age=age;</span><br><span class="line">        this.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>构造器名与类名相同</p></li><li><p>构造器没有返回值（不能写void!!!!!!!!）</p></li><li><p>构造器是完成对对象的初始化，并不是创建对象！</p></li><li><p>在创建对象时，系统自动的调用该类的构造方法</p></li><li><p>如果程序猿没有定义构造器，系统会自动给类生成一个默认午参构造器(也叫默认构造器)，比如Dog()，使用<code>javap指令</code>进行反编译。</p><ol><li><img src="/2022/07/20/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4-%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8/1-%E6%9E%84%E9%80%A0%E5%99%A8/image-20221012224832331.png" alt="image-20221012224832331"></li></ol></li><li><p>一旦定义了自己的构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显式的定义一下，即Dog(){}（这点很重要）</p></li><li><p>在构造器中可以使用this()方法调用本类中的另一个构造器，且this方法只能在第一行。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/JavaScript/ES6/"/>
      <url>/2022/07/20/JavaScript/ES6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ES6</p></blockquote><ol><li>双引号&#x2F;单引号， ’‘，普通的单&#x2F;双引号 <code>==不能实现换行==</code>,如果想要<code>内容中换行</code>，需要使用 &#x3D;&#x3D;反单引号&#96;&#x3D;&#x3D;</li></ol><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var test=`</span><br><span class="line">213213</span><br><span class="line">`</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/JavaScript/Untitled/"/>
      <url>/2022/07/20/JavaScript/Untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/JavaScript/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/07/20/JavaScript/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>构造函数就相当于 java 中的class ，具有泛指的类，是具有一些方法和属性的集合  ——————&gt; &#x3D;&#x3D;抽象的&#x3D;&#x3D;</p><p>而对象是一个**&#x3D;&#x3D;具体的实物&#x3D;&#x3D;**</p><p>​new 构造函数()，使用构造函数创建对象的过程 ——————&gt; 对象的实例化</p><p><img src="/2022/07/20/JavaScript/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E8%B1%A1/image-20220720205459754.png" alt="image-20220720205459754"></p><p>new关键字执行过程</p><ol><li><p>当构造函数遇到new时，就会在内存中创建一个新的空对象</p></li><li><p>函数的 <strong>&#x3D;&#x3D;this&#x3D;&#x3D;</strong> 指向刚刚创建的空对象</p></li><li><p>执行构造函数里面的代码，给这个空对象添加属性和方法</p></li><li><p>返回这个对象</p></li></ol><p><img src="/2022/07/20/JavaScript/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E8%B1%A1/image-20220720210308949.png" alt="image-20220720210308949"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/JAVA/0-Java%E7%BB%86%E8%8A%82/Java%E5%BC%80%E5%8F%91%E7%BB%86%E8%8A%82/"/>
      <url>/2022/07/20/JAVA/0-Java%E7%BB%86%E8%8A%82/Java%E5%BC%80%E5%8F%91%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote><p>Java中有一些细节的问题需要我们注意,这里进行详细的解释,避免后期踩坑.</p></blockquote><ol><li><p>如果Java文件中<code>有且只能有##一个##public类</code>,</p><ol><li><p>如果public存在时， 文件名<code>必须</code>按该类名来命名。</p></li><li><p>其他类的个数不限制。</p><ol><li><blockquote><p>同时，每一个类，在编译后都对应一个.class文件</p></blockquote></li></ol></li></ol></li><li><p>main方法是java的程序入口，它具有固定的写法。</p><ul><li><p>只能有一个，但是位置不限（可存在public类，或其他类中）</p></li><li><p>可以将main方法写在其他非public类中，然后<code>指定运行</code>非public类，这样入口方法就是非public的main方法。</p></li><li><blockquote><p>指定运行，即运行时，使用 java xxx(类名)</p></blockquote></li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老韩推荐的学习方法：</p><p><img src="/2022/07/20/JAVA/0-Java%E7%BB%86%E8%8A%82/Java%E5%BC%80%E5%8F%91%E7%BB%86%E8%8A%82/image-20220921204316192.png" alt="image-20220921204316192"></p><p>3.可变参数一定要写在形参的第一个位置。</p><p>4· 在构造器中使用this调用另一个构造器时，一定要把把把this调用语句放在第一位。0</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/vue/18-%E9%9D%9E%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/VueComponent/"/>
      <url>/2022/07/20/vue/18-%E9%9D%9E%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/VueComponent/</url>
      
        <content type="html"><![CDATA[<h2 id="vueComponet的分析"><a href="#vueComponet的分析" class="headerlink" title="vueComponet的分析"></a>vueComponet的分析</h2><p>关于VueComponent：<br>            1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</p><blockquote><p>​ 2.我们只需要写<school>或<school></school>，Vue解析时会帮我们创建school组件的实例对象，<br>​即Vue帮我们执行的：new VueComponent(options)。<br>​                        当我们书写<school>或 <shcool></shcool></school>时，vue会自动解析并帮我们调用new VueComponet(options)创建出一个新的实例<br>​3.特别注意：<code>每次</code>调用Vue.extend，返回的都是一个<code>全新</code>的VueComponent！！！！</school></p></blockquote><p>​—-&gt; 验证过程如下</p><blockquote><p>​4.关于this指向：<br>​(1).组件配置中：<br>​data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。<br>​(2).new Vue(options)配置中：<br>​data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。<br>​5.VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。<br>​Vue的实例对象，以后简称vm。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;school&gt;&lt;/school&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.config.productionTip = false;</span><br><span class="line">    var school=Vue.extend(&#123;</span><br><span class="line">        name:&quot;school&quot;,</span><br><span class="line">        template:`</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;school&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;`,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                hello:&quot;hello&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    var student=Vue.extend(&#123;</span><br><span class="line">        name:&quot;student&quot;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                hello:&quot;hello&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    这里为验证过程</span><br><span class="line">    // 验证两个vuecomponent</span><br><span class="line">    // 方式一 直接判断</span><br><span class="line">    // console.log(student==school); --&gt;false</span><br><span class="line">    // </span><br><span class="line">    //方式二往school上添加东西,如果school和student是同一个东西,那student上也会有</span><br><span class="line">    // 结果为undefined</span><br><span class="line">    // school.a=99</span><br><span class="line">    // console.log(school.a,student.a); </span><br><span class="line">    //             --&gt; 99 undefined</span><br><span class="line">    // 方式三查看源码</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    /* </span><br><span class="line">``      Vue.extend=function(extendOptions)&#123;</span><br><span class="line">    ……</span><br><span class="line">    var Sub =function vueComponet (options)&#123;</span><br><span class="line">        this._init(options);</span><br><span class="line">        //这里每次调用vuecomponent时，就会创建一个sub函数变量，并且返回该函数变量</span><br><span class="line">        //每一次调用时，sub都是现定义的</span><br><span class="line">        //固</span><br><span class="line">        //</span><br><span class="line">        //每次调用vue.extend时，都会生成一个新的vuecompont的构造器函数</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br><span class="line">    return Sub;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line">console.log(student);</span><br><span class="line">    var vm=new Vue(&#123;</span><br><span class="line">        el:&#x27;#root&#x27;,</span><br><span class="line">        components:&#123;school,student&#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/vue/24-vueX/vuex/"/>
      <url>/2022/07/20/vue/24-vueX/vuex/</url>
      
        <content type="html"><![CDATA[<h1 id="vueX"><a href="#vueX" class="headerlink" title="vueX"></a>vueX</h1><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><blockquote><p> 在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信。</p></blockquote><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​     &#x3D;&#x3D;多个组件&#x3D;&#x3D;需要共享数据时</p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   actions,</span><br><span class="line">   mutations,</span><br><span class="line">   state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">   <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">   store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line">   <span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line">   <span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">      state.<span class="property">sum</span> += value</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   actions,</span><br><span class="line">   mutations,</span><br><span class="line">   state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">   <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   ......</span><br><span class="line">   getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/%E6%A0%91%E8%8E%93%E6%B4%BE/%E4%BF%AE%E6%94%B9usb%E5%90%AF%E5%8A%A8/"/>
      <url>/2022/07/20/%E6%A0%91%E8%8E%93%E6%B4%BE/%E4%BF%AE%E6%94%B9usb%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>引脚图</p><p><img src="https://img-blog.csdnimg.cn/2020030311551983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjE2NDcx,size_16,color_FFFFFF,t_70" alt="图1.1 树莓派4B引脚分布"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正式开始之前先说一下为什么4B的USB启动这么姗姗来迟。</p><p>要了解这个问题，我们先要了解一下4B之前的版本的启动流程，主要分为四个阶段：</p><ol><li>GPU读取芯片上一个ROM的内容并执行</li><li>ROM中的程序挂载SD卡并加载第一个FAT分区上的bootcode.bin</li><li>bootcode.bin从FAT分区加载start.elf</li><li>start.elf从FAT分区加载kernel.img，然后唤醒CPU,CPU开始执行kernel.img</li></ol><p>从这个流程中可以看到，第一阶段的BootLoader是从芯片上的ROM中读取的，ROM里的代码是出厂定制好的后期不能再改变。然而随着4B的硬件升级，USB被移到了PCIe总线，网卡也用了新的型号，再加上4B启动过程和SDRAM的设置远比之前的型号要复杂的多，继续使用集成在SoC ROM中的代码是有很大风险的，所以4B增加了一块EEPROM来解决这个问题，启动程序写入到EEPROM中来取代bootcode.bin的工作，启动程序的bug修复和新功能添加都方便了很多。</p><p>启动机制改动还是挺大的，所以USB启动姗姗来迟还是可以理解的。</p><p>关于EEPROM和4B启动流程的内容可以参考下面两篇文章：</p><ul><li><a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/booteeprom.md">pi4 eeprom</a></li><li><a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bootmodes/bootflow_2711.md">pi4 bootflow</a></li></ul><h2 id="更新eeprom"><a href="#更新eeprom" class="headerlink" title="更新eeprom"></a>更新eeprom</h2><h3 id="1、使用rpi-eeprom更新"><a href="#1、使用rpi-eeprom更新" class="headerlink" title="1、使用rpi-eeprom更新"></a>1、使用<code>rpi-eeprom</code>更新</h3><p>最新的官方系统里已经集成了rpi-eeprom包来升级eeprom，官方github上有这个项目的源码，如果不是官方系统可以clone此项目来升级eeprom，项目地址是：<a href="https://github.com/raspberrypi/rpi-eeprom%EF%BC%8C%E9%87%8C%E9%9D%A2%E5%8C%85%E5%90%AB%E5%8D%87%E7%BA%A7%E8%84%9A%E6%9C%AC%E5%92%8C%E5%9B%BA%E4%BB%B6%E3%80%82">https://github.com/raspberrypi/rpi-eeprom，里面包含升级脚本和固件。</a></p><p>三方系统(例如树莓派爱好者基地2.0系统)升级方法<a href="https://blog.csdn.net/nanhantianyi/article/details/106542883">请看这里</a>，这篇文章介绍官方系统的升级方法：</p><p>整个升级过程都需要root权限，如果你是用pi用户登录的，先执行<code>sudo -i</code>切换到root用户。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#升级系统软件包</span><br><span class="line">apt update</span><br><span class="line">apt upgrade</span><br></pre></td></tr></table></figure><p>然后编辑<code>/etc/default/rpi-eeprom-update</code>文件，把内容改为<code>FIRMWARE_RELEASE_STATUS=&quot;beta&quot;</code></p><p>如果想用固件的默认配置直接执行<code>rpi-eeprom-update -d -a</code>，然后重启完成升级。</p><p>如果想修改eeprom的参数配置，请参考<a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2711_bootloader_config.md">这里</a>。</p><p>重启后进入系统验证一下eeprom固件版本，执行<code>rpi-eeprom-update</code>，如果BOOTLOADER的版本在<code>2020-05-15</code>及以上就可以USB启动了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/2-%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2022/07/20/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/2-%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>为了保护java类中的属性&#x2F;方法&#x2F;类本身—&gt;封装</p><h3 id="一、类型"><a href="#一、类型" class="headerlink" title="一、类型"></a>一、类型</h3><ol><li>public<ol><li>特点：<ol><li>本类—–&gt; yes</li><li>子类—–&gt; yes</li><li></li></ol></li></ol></li></ol><table><thead><tr><th align="center">访问级别</th><th>访问控制修饰符</th><th>同类</th><th>同包</th><th>子类</th><th>不同包</th></tr></thead><tbody><tr><td align="center">公开</td><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td align="center">受保护的</td><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td align="center">默认</td><td>没有修饰符</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td align="center">私有</td><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h3 id="二、使用的注意事项"><a href="#二、使用的注意事项" class="headerlink" title="二、使用的注意事项"></a>二、使用的注意事项</h3><ol><li>修饰符可以用来修饰类的属性、成员方法及类本身</li><li>只有默认修饰符和public可以修饰class</li><li>成员方法的访问规则和属性完全一样。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/%E9%9A%8F%E8%BA%ABWiFi%E7%9A%84%E6%8A%98%E8%85%BE/Debian/"/>
      <url>/2022/07/20/%E9%9A%8F%E8%BA%ABWiFi%E7%9A%84%E6%8A%98%E8%85%BE/Debian/</url>
      
        <content type="html"><![CDATA[<ol><li><p>安装base.zip</p></li><li><p>刷写Debian系统</p></li><li><p>配置驱动程序</p><ol><li><p>修改ADB</p></li><li><p>安装NDIS驱动</p><ol><li><p>这里会有一个未知设备（由于我已经安装完成驱动则不会出现)<img src="/2022/07/20/%E9%9A%8F%E8%BA%ABWiFi%E7%9A%84%E6%8A%98%E8%85%BE/Debian/image-20220720133912744.png" alt="image-20220720133912744"></p></li><li><p>选择驱动</p><ol><li><p><img src="/2022/07/20/%E9%9A%8F%E8%BA%ABWiFi%E7%9A%84%E6%8A%98%E8%85%BE/Debian/image-20220720134031763.png" alt="image-20220720134031763"></p></li><li><p><img src="/2022/07/20/%E9%9A%8F%E8%BA%ABWiFi%E7%9A%84%E6%8A%98%E8%85%BE/Debian/image-20220720134053046.png" alt="image-20220720134053046"></p></li><li><p>选择网络适配器，然后选择 Microsoft —-&gt;NDIS<img src="/2022/07/20/%E9%9A%8F%E8%BA%ABWiFi%E7%9A%84%E6%8A%98%E8%85%BE/Debian/image-20220720134209911.png" alt="image-20220720134209911"></p></li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/vue/22-%E6%8F%92%E6%A7%BDslot/%E6%8F%92%E6%A7%BD/"/>
      <url>/2022/07/20/vue/22-%E6%8F%92%E6%A7%BDslot/%E6%8F%92%E6%A7%BD/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/vue/%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
      <url>/2022/07/20/vue/%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<ol><li>Vetur     author—–pine WU</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/%E7%A1%AC%E7%9B%98%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/07/20/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/%E7%A1%AC%E7%9B%98%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>硬盘的组成 : 主控、DRAM、NAND</p><blockquote><p>各类介绍</p></blockquote><p>一、 NAND的分类:</p><ol><li>SLC(Single Level Cell 单层单元)</li><li>MLT(Mutil Level Ceil)</li><li>TLC(Triple Level Ceil)</li></ol><p>二、DRAM：</p><p>​1. 存储FTL（flash translation ): </p><p>​当操作系统向硬盘写入数据时，主控会根据情况挑选NAND中的一块区域，在写入数据的同时，也会将数据的位置 nand2 dieChip03 114 区块 51页——&gt; 即为 flash translation layer 记录到DRAM中。</p><p><img src="/2022/07/20/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/%E7%A1%AC%E7%9B%98%E7%9F%A5%E8%AF%86/image-20220919105645209.png" alt="image-20220919105645209"></p><ol start="2"><li>缓解写放大:<ol><li>在硬盘向</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/20/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>引出</strong></p><blockquote><p>以下的updatemei方法中直接更新了数组下表为1的整个元素，但在vue开发者工具中没有体现 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line">       new Vue(&#123;</span><br><span class="line">           el: &#x27;#root&#x27;,</span><br><span class="line">           data: &#123;</span><br><span class="line">               name: &#x27;helloworld&#x27;,</span><br><span class="line">               sortType:0,//1为升序，2位降序，0默认不变,</span><br><span class="line">               persons: [</span><br><span class="line">                   &#123; id: &#x27;001&#x27;, name: &#x27;马冬梅&#x27;, age: 30, sex: &#x27;女&#x27; &#125;,</span><br><span class="line">                   &#123; id: &#x27;002&#x27;, name: &#x27;周冬雨&#x27;, age: 19, sex: &#x27;女&#x27; &#125;,</span><br><span class="line">                   &#123; id: &#x27;003&#x27;, name: &#x27;周杰伦&#x27;, age: 18, sex: &#x27;男&#x27; &#125;,</span><br><span class="line">                   &#123; id: &#x27;004&#x27;, name: &#x27;温兆伦&#x27;, age: 20, sex: &#x27;男&#x27; &#125;</span><br><span class="line"></span><br><span class="line">               ],</span><br><span class="line">               keyWord:&#x27;&#x27;</span><br><span class="line">           &#125;,</span><br><span class="line">           </span><br><span class="line">           methods: &#123;</span><br><span class="line">               //这样修改vue并没有认可你的修改</span><br><span class="line">               updatemei()&#123;</span><br><span class="line">                   this.persons[0] = &#123;id: &#x27;001&#x27;, name: &#x27;马老师&#x27;, age: 30, sex: &#x27;女&#x27;&#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       </span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>点击事件后</p></blockquote><p><img src="/2022/07/20/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220720103341490.png" alt="image-20220720103341490"></p><h2 id="Vue更新的原理"><a href="#Vue更新的原理" class="headerlink" title="Vue更新的原理"></a>Vue更新的原理</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/20/%E9%82%AE%E4%BB%B6%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
      <url>/2022/07/20/%E9%82%AE%E4%BB%B6%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---1. 先引入jquery库 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-1.12.4.js&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">integrity</span>=<span class="string">&quot;sha256-Qw82+bXyGq6MydymqBxNPYTaUXXq7c8v3CwiYwLLNXU=&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里使用cdn引入，亦可以使用本地文件引入 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!---2. 调用jquery中的Ajax发送请求 --&gt;</span></span><br><span class="line"> $.ajax(&#123;</span><br><span class="line">            url: &#x27;https://mousehao.fun/api/sendEmail/public/index.php/index/SendEmail/send&#x27;,</span><br><span class="line">            type: &#x27;POST&#x27;,</span><br><span class="line">            // 设置的是请求参数</span><br><span class="line">            data: &#123;</span><br><span class="line">                passCode:&quot;xxx&quot;,  //接口使用授权码，请联系吴部获取</span><br><span class="line">SMTPHost:&quot;smtp.qq.com&quot;, //你的邮箱对应的SMTP服务器 ， 这里以QQ邮箱举例</span><br><span class="line">AuthorizationCode:&quot;xxxx&quot;,  //你的smtp授权码</span><br><span class="line">From:&quot;yinghao_wu@qq.com&quot;,  //发件的邮箱(即你的邮箱)</span><br><span class="line">To:&quot;1412xxxx91@qq.com&quot;, //收件人邮箱</span><br><span class="line">FromName:&quot;广师大科教@网络研发部&quot;,   //发件人</span><br><span class="line">Title:&quot;接口测试&quot;, // 邮件主题</span><br><span class="line">Body:&#x27;<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:pink&quot;</span>&gt;</span>粉色字体<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;  //这里为邮件内容</span><br><span class="line">            &#125;</span><br><span class="line">            success: function (res) &#123;</span><br><span class="line">                </span><br><span class="line">                console.log(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
