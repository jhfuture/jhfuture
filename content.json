{"meta":{"title":"jhfuture","subtitle":"","description":"持续奔赴热爱","author":"jhfuture","url":"https://jhfuture.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-07-22T15:46:36.028Z","updated":"2022-07-22T15:46:36.028Z","comments":false,"path":"/404.html","permalink":"https://jhfuture.github.io/404.html","excerpt":"","text":""},{"title":"书单","date":"2022-07-22T15:46:36.029Z","updated":"2022-07-22T15:46:36.029Z","comments":false,"path":"books/index.html","permalink":"https://jhfuture.github.io/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-07-23T04:26:55.741Z","updated":"2022-07-23T04:26:55.741Z","comments":false,"path":"about/index.html","permalink":"https://jhfuture.github.io/about/index.html","excerpt":"","text":"这是一个简单的经验分享和笔记记录博客，欢迎你的到来 ——————2022/7/23@jhfuture"},{"title":"分类","date":"2022-07-22T15:46:36.030Z","updated":"2022-07-22T15:46:36.030Z","comments":false,"path":"categories/index.html","permalink":"https://jhfuture.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-07-22T15:46:36.031Z","updated":"2022-07-22T15:46:36.031Z","comments":false,"path":"tags/index.html","permalink":"https://jhfuture.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-07-22T17:15:12.116Z","updated":"2022-07-22T15:46:36.030Z","comments":false,"path":"repository/index.html","permalink":"https://jhfuture.github.io/repository/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-07-22T15:46:36.030Z","updated":"2022-07-22T15:46:36.030Z","comments":true,"path":"links/index.html","permalink":"https://jhfuture.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"05.object方法","slug":"vue/05-object方法","date":"2022-07-23T04:46:50.000Z","updated":"2022-07-23T05:30:04.222Z","comments":true,"path":"2022/07/23/vue/05-object方法/","link":"","permalink":"https://jhfuture.github.io/2022/07/23/vue/05-object%E6%96%B9%E6%B3%95/","excerpt":"","text":"hello world","categories":[],"tags":[]},{"title":"e","slug":"e","date":"2022-07-23T03:57:11.000Z","updated":"2022-07-23T03:57:11.258Z","comments":true,"path":"2022/07/23/e/","link":"","permalink":"https://jhfuture.github.io/2022/07/23/e/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"d","slug":"d","date":"2022-07-23T03:57:05.000Z","updated":"2022-07-23T03:57:05.235Z","comments":true,"path":"2022/07/23/d/","link":"","permalink":"https://jhfuture.github.io/2022/07/23/d/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"c","slug":"c","date":"2022-07-23T03:57:01.000Z","updated":"2022-07-23T03:57:01.817Z","comments":true,"path":"2022/07/23/c/","link":"","permalink":"https://jhfuture.github.io/2022/07/23/c/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"b","slug":"b","date":"2022-07-23T03:56:57.000Z","updated":"2022-07-23T03:56:57.852Z","comments":true,"path":"2022/07/23/b/","link":"","permalink":"https://jhfuture.github.io/2022/07/23/b/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"a","slug":"a","date":"2022-07-23T03:56:44.000Z","updated":"2022-07-23T03:56:44.710Z","comments":true,"path":"2022/07/23/a/","link":"","permalink":"https://jhfuture.github.io/2022/07/23/a/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Vue的开始","slug":"vue/01.初识Vue","date":"2022-07-22T15:09:14.000Z","updated":"2022-07-22T17:25:45.754Z","comments":true,"path":"2022/07/22/vue/01.初识Vue/","link":"","permalink":"https://jhfuture.github.io/2022/07/22/vue/01.%E5%88%9D%E8%AF%86Vue/","excerpt":"VUe的引入","text":"VUe的引入 Vue的开始1.引入 vue.js是开发板的js文件，带有错误提示；vuemi.js是线上版，不会有提示 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;!-- 引入vuescript,引入完成后HTML中会多了一个vue的构造器--&gt; &lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 准备一个容器 --&gt; &lt;div id=&quot;root&quot;&gt; &lt;h1&gt;hello&#123;&#123;name&#125;&#125;&lt;/h1&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; Vue.config.productionTip=false;//阻止vue在启动时生成提示 //创建Vue实例,参数为配置对象 const x=new Vue(&#123; // 链接vue实例与HTML元素 el:&#x27;#root&#x27;,//element,el用于指定当前vue实例为哪个容器服务，值通常为css选择器字符串。 // el:documenet.getElementById(&#x27;root&#x27;),这样子写也可以 data:&#123; name:&#x27;尚硅谷&#x27;, &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 总结 想要Vue工作，就必须创建一个Vue实例，且要传入一个配置对象 在HTML中创建容器，并在配置对象中用el，传入 容器内的代码依旧符合HTML规范，只不过混入了一些&#x3D;&#x3D;特殊的Vue语法&#x3D;&#x3D;。 容器里的代码被称为vue模块 Vue实例与容器只能是&#x3D;&#x3D;一一对应&#x3D;&#x3D;的关系 中的xxx要写==js表达式==,且xxx可以直接读取到data中的==所有属性==。 当Vue实例中的data发生变化是，页面中用到该数据的地方也会自动刷新。 区分什么是&#x3D;&#x3D;js表达式&#x3D;&#x3D;，什么是&#x3D;&#x3D;js代码（或者说语句）&#x3D;&#x3D; 表达式：一个表达式会产生一个&#x3D;&#x3D;值&#x3D;&#x3D;，可以放在任何需要值的地方。 eg: - a(在已经定义好a变量后，再使用a，就会得到它对应的值) - a+b，这明显是一个 ‘加法运算的表达式’ - function(1) ——这是一个调用函数并得到其返回值的形式 - x==y?a:b ——三元表达式 js代码: - 控制顺序，例如 if()&#123;&#125; - for()&#123;&#125;、、","categories":[{"name":"Vue","slug":"Vue","permalink":"https://jhfuture.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://jhfuture.github.io/tags/Vue/"},{"name":"前端","slug":"前端","permalink":"https://jhfuture.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Vue的语法","slug":"vue/02.语法","date":"2022-07-22T15:09:14.000Z","updated":"2022-07-22T17:25:41.676Z","comments":true,"path":"2022/07/22/vue/02.语法/","link":"","permalink":"https://jhfuture.github.io/2022/07/22/vue/02.%E8%AF%AD%E6%B3%95/","excerpt":"VUe的的基本语法","text":"VUe的的基本语法 1.2模块语法、数据单(双)向绑定一、模块语法 可分为：1.插值语法、2.指令语法 1234567891011121314151617181920212223 &lt;div id=&quot;root&quot;&gt; &lt;h1&gt;插值语法&lt;/h1&gt; &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;/p&gt; &lt;h1&gt;指令语法&lt;/h1&gt; &lt;a v-bind:href=&quot;url&quot;&gt;点我进入百度&lt;/a&gt; &lt;a :href=&quot;school.url&quot;&gt;点我进入bing&lt;/a&gt; &lt;br&gt; &lt;/div&gt;&lt;script&gt; new Vue(&#123; el:&#x27;#root&#x27;, data:&#123; name:&#x27;helloworld&#x27;, url:&#x27;www.baidu.com&#x27;, school:&#123; url:&#x27;www.bing.com&#x27; &#125;, input:&#x27;value&#x27; &#125; &#125;)&lt;/script&gt; 总结Vue模块语法有2大类： 插值语法 功能：用于解析&#x3D;&#x3D;标签体内容&#x3D;&#x3D; 写法：，xxx是&#x3D;&#x3D;js表达式&#x3D;&#x3D;,且可以&#x3D;&#x3D;直接读取&#x3D;&#x3D;(如果是date里面对象的值则需要使用object.propertyName访问)到data中的所有属性 备注： 如果同一个变量在同一级中进行了多次赋值，则以&#x3D;&#x3D;最后一次赋值&#x3D;&#x3D;为准 指令语法 功能：用于解析标签（包括标签属性、标签体内容、绑定时间……） 写法举例： 绑定标签属性：v-bind:href&#x3D;’xxx’,或简写为 :href&#x3D;’xxx’,xxx同样要写&#x3D;&#x3D;js表达式&#x3D;&#x3D; 备注： Vue中有许多的指令，且形式都是 v-??，这里只是一个举例 v-bind是单项绑定 这里需要注意一下，微信小程序中的指令语法写法与插值语法相同 eg: 二、双向数据绑定1234567891011121314151617181920&lt;input type=&#x27;text&#x27; v-mode=&#x27;name&#x27;&gt;&lt;div id=&quot;root&quot;&gt; &lt;!-- 普通写法 单向数据绑定 --&gt; 单向数据绑定：&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;br/&gt; 双向数据绑定：&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;&lt;br/&gt; &lt;!-- 简写 v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值--&gt; 单向数据绑定：&lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;&lt;br/&gt; 双向数据绑定：&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;&lt;br/&gt;&lt;/div&gt;&lt;script&gt; new Vue(&#123; el:&#x27;#root&#x27;, data:&#123; name:&#x27;jack&#x27;, &#125; &#125;)&lt;/script&gt; 总结：Vue中有2种数据绑定的方式： 单向绑定(v-bind)：数据只能从data流向页面 双向绑定(v-model)：数据不仅能从data流向页面，还可以从&#x3D;&#x3D;页面流向data&#x3D;&#x3D; 1.双向绑定一般都应用在表单类元素上（如：input、select等） 2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值","categories":[],"tags":[]},{"title":"el与data的两种写法+vue实例","slug":"vue/03.el与data的两种写法","date":"2022-07-22T15:09:14.000Z","updated":"2022-07-22T17:26:59.784Z","comments":true,"path":"2022/07/22/vue/03.el与data的两种写法/","link":"","permalink":"https://jhfuture.github.io/2022/07/22/vue/03.el%E4%B8%8Edata%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95/","excerpt":"el与data的两种写法+vue实例","text":"el与data的两种写法+vue实例 el与data的两种写法+vue实例一、.认识vue实例 1.1，以$开头的字符都是vue准备好给小程序用的 1.2 以_是vue底层在使用的 1.3 使用vue原型缔造对象的方法 二、el的第二种写法 简介 ​ vue实例构造器里的方法 ​ v.#mount(‘xx’) ——xxx为css的选择器 123456789&lt;script&gt; new Vue(&#123; // el:&#x27;#root&#x27;, //第一种写法 data:&#123; name:&#x27;helloworld&#x27; &#125; &#125;) v.$mount(&#x27;#root&#x27;) //第二种写法 &lt;/script&gt; 三、 data的两种写法 new Vue({ // el:'#root', //el第一种写法 data:{//data的第一种写法 name:'helloworld' } v.$mount('#root') //el第二种写法 //data第二种写法,函数式 data:function(){ return{ name:'尚硅谷' } } or: data: }) ​ 小结el有2种写法 new Vue时候配置el属性 先创建Vue实例，随后再通过使用vue原型中的mount方法，vm.$mount(‘#root’)指定el的值 data有2种写法 对象式 函数式 如何选择：在组件中，data必须使用函数式 一个重要的原则：由vue管理的函数，一定不要写&#x3D;&#x3D;箭头函数&#x3D;&#x3D;，一旦写了箭头函数，this就不再是vue实例了","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"https://jhfuture.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"vue","slug":"vue","permalink":"https://jhfuture.github.io/tags/vue/"}]},{"title":"Vue中的MVVM设计模式","slug":"vue/04.Vue中的MVVM","date":"2022-07-22T15:09:14.000Z","updated":"2022-07-22T17:26:13.648Z","comments":true,"path":"2022/07/22/vue/04.Vue中的MVVM/","link":"","permalink":"https://jhfuture.github.io/2022/07/22/vue/04.Vue%E4%B8%AD%E7%9A%84MVVM/","excerpt":"Vue中的MVVM设计模式","text":"Vue中的MVVM设计模式 Mvvw 总结 M：模型(Model) ：data中的数据 V：视图(View) ：模板代码 VM：视图模型(ViewModel)：Vue实例 观察发现​ MVM模型： data上的所有属性，最终都会出现在vm身上。 vm身上所有的属性，及vue原型上所有属性，在vue模块上都可以直接使用","categories":[],"tags":[]}],"categories":[{"name":"Vue","slug":"Vue","permalink":"https://jhfuture.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://jhfuture.github.io/tags/Vue/"},{"name":"前端","slug":"前端","permalink":"https://jhfuture.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"vue","slug":"vue","permalink":"https://jhfuture.github.io/tags/vue/"}]}