<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jhfuture</title>
  
  
  <link href="https://jhfuture.github.io/atom.xml" rel="self"/>
  
  <link href="https://jhfuture.github.io/"/>
  <updated>2022-10-17T16:08:33.767Z</updated>
  <id>https://jhfuture.github.io/</id>
  
  <author>
    <name>jhfuture</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安装mysql</title>
    <link href="https://jhfuture.github.io/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/"/>
    <id>https://jhfuture.github.io/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/</id>
    <published>2022-10-17T15:10:24.000Z</published>
    <updated>2022-10-17T16:08:33.767Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>[TOC]</p><h2 id="一、下载-MySQL"><a href="#一、下载-MySQL" class="headerlink" title="一、下载 MySQL"></a>一、下载 MySQL</h2><ol><li>打开mysql官网<a href="https://www.mysql.com/downloads/">MySQL :: MySQL Downloads</a>，选择 GPL版本下载<ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017232115705.png" alt="image-20221017232115705"></li></ol></li></ol><h2 id="二、安装MySQL"><a href="#二、安装MySQL" class="headerlink" title="二、安装MySQL"></a>二、安装MySQL</h2><ol><li><p>选择安装类型</p><ol><li><h3 id="1-选择设置类型"><a href="#1-选择设置类型" class="headerlink" title="***1. 选择设置类型*****"></a><em>*<em>*</em>*1. 选择设置类型****</em>*</h3><p>“Developer Default”是开发者默认；</p><p>“Server only”仅作为服务器安装；</p><p>“Clientonly”仅作为客户端安装；</p><p>“Full”是完整安装；</p><p>“Custom”是自定义安装；</p></li><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017233008602.png" alt="image-20221017233008602"></p></li></ol></li><li><p>一路下一步即可</p></li><li><p>这里选择设置密码</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017233934424.png" alt="image-20221017233934424"></li></ol></li><li><p>设置密码</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234054198.png" alt="image-20221017234054198"></li></ol></li><li><p>选择账户</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234302264.png" alt="image-20221017234302264"></li></ol></li><li><p>配置权限</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234527109.png" alt="image-20221017234527109"></li></ol></li><li><p>执行一些配置</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234735958.png" alt="image-20221017234735958"></li></ol></li><li><p>配置mysql router（直接默认即可）</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234710589.png" alt="image-20221017234710589"></li></ol></li><li><p>链接测试server，输入第三步中设置的密码</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017234835921.png" alt="image-20221017234835921"></li></ol></li><li><p>最后完成，出现cmd窗口和mysql workbench则成功</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221017235021486.png" alt="image-20221017235021486"></li></ol></li><li><p>配置系统Path变量</p><ol><li><p>找到mysql的安装路径，默认为</p><ol><li><pre><code>C:\Program Files\MySQL\MySQL Server 8.0\bin</code></pre></li></ol></li><li><p>打开系统变量 此电脑右键属性—–&gt;关于–&gt;高级系统设置—–&gt;高级—–&gt;环境变量—&gt;选择Path,编辑—&gt;新建，把mysql的安装路径粘贴</p><ol><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000240473.png" alt="image-20221018000240473"></p></li><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000321376.png" alt="image-20221018000321376"></p></li><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000415838.png" alt="image-20221018000415838"></p></li><li><p><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000451402.png" alt="image-20221018000451402"></p></li></ol></li><li><p>按键  win+R ,输入cmd ，然后输入myssql，有反应即正常</p><ol><li><img src="/2022/10/17/MySQL/1.%E5%AE%89%E8%A3%85mysql/image-20221018000826285.png" alt="image-20221018000826285"></li></ol></li></ol></li></ol><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;



&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、下载-MySQL&quot;&gt;&lt;a href=&quot;#一、下载-MySQL&quot; class=&quot;headerlink&quot; title=&quot;一、下载 MySQL&quot;&gt;&lt;/a&gt;一、下载 MySQL&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/17/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99/"/>
    <id>https://jhfuture.github.io/2022/10/17/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E5%86%99/</id>
    <published>2022-10-17T02:24:29.257Z</published>
    <updated>2022-10-17T02:38:16.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><h3 id="一、方法重写"><a href="#一、方法重写" class="headerlink" title="一、方法重写"></a>一、方法重写</h3><p>方法重写也叫方法覆盖，需要满足下面的条件</p><ol><li><p>子类的方法&#x3D;&#x3D;参数，方法名城&#x3D;&#x3D;，要和父类的参数，方法名称完全一样。</p></li><li><p>子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类。</p><ol><li><p>eg: 父类返回的类型是Object,子类方法返回类型是 String</p><ol><li><p>public Object getinfo()  public String getinfo()</p></li><li><pre><code class="java">pu</code></pre></li><li></li></ol></li></ol></li><li><p>子类方法不能缩小父类方法的&#x3D;&#x3D;访问权限&#x3D;&#x3D;</p><ol><li>父类： void sayOk()   子类：public void sayOk() </li><li>默认—-&gt; public   public&gt;protected&gt; 默认&gt; private</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;方法重写&quot;&gt;&lt;a href=&quot;#方法重写&quot; class=&quot;headerlink&quot; title=&quot;方法重写&quot;&gt;&lt;/a&gt;方法重写&lt;/h3&gt;&lt;h3 id=&quot;一、方法重写&quot;&gt;&lt;a href=&quot;#一、方法重写&quot; class=&quot;headerlink&quot; title=&quot;一、方法重</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/16/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/2-%E7%BB%A7%E6%89%BF%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>https://jhfuture.github.io/2022/10/16/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/2-%E7%BB%A7%E6%89%BF%E7%9A%84%E6%9C%AC%E8%B4%A8/</id>
    <published>2022-10-16T08:18:51.891Z</published>
    <updated>2022-10-16T08:36:01.337Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class ExtendTheory&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">     Son son=new Son();   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class  GrandPa&#123;</span><br><span class="line">    String name=&quot;大头爷爷&quot;;</span><br><span class="line">&#125;</span><br><span class="line">class Father extends  GrandPa &#123;</span><br><span class="line">    String name=&quot;大头爸爸&quot;;</span><br><span class="line">&#125;</span><br><span class="line">class Son extends Father&#123;</span><br><span class="line">    String name=&quot;大头儿子&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先加载类信息-&gt; GrandPa信息–&gt;  Father—-&gt;son</li><li>在堆中开辟 内存空间 —-&gt; 储存GrandPa—&gt;储存 Father—&gt;储存son</li></ol><p><img src="/2022/10/16/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/2-%E7%BB%A7%E6%89%BF%E7%9A%84%E6%9C%AC%E8%B4%A8/image-20221016163319682.png" alt="image-20221016163319682"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    <id>https://jhfuture.github.io/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/</id>
    <published>2022-10-14T10:00:36.863Z</published>
    <updated>2022-10-14T10:08:43.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows内存优化"><a href="#Windows内存优化" class="headerlink" title="Windows内存优化"></a>Windows内存优化</h2><h3 id="一、fetch"><a href="#一、fetch" class="headerlink" title="一、fetch"></a>一、fetch</h3><p>a)</p><p>​简介：</p><p>超级预读是系统会根据用户的使用习惯，将经常使用的程序和文件预加载到空闲的物理内存中，从而总体提高系统的速度。</p><p>b)操作</p><ol><li>打开注册表编辑器 Win+R—&gt; regedit</li><li>打开路径</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters</span><br></pre></td></tr></table></figure><ol start="3"><li><p>修改</p><ol><li><p>- 0 – 禁用</p><p>- 1 – 启用应用程序预读</p><p>- 2 – 启用系统引导预读</p><p>- 3 – 启用应用程序和系统引导预读</p></li></ol><p><img src="/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/image-20221014180556322.png" alt="image-20221014180556322"></p></li><li><p>打开任务管理器，关闭sysmain服务</p><ol><li>ctrl+shift+Esc启动任务管理器</li><li>服务<img src="/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/image-20221014180749957.png" alt="image-20221014180749957"></li><li><img src="/2022/10/14/Windows/3-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/image-20221014180809492.png" alt="image-20221014180809492">设置为禁止</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Windows内存优化&quot;&gt;&lt;a href=&quot;#Windows内存优化&quot; class=&quot;headerlink&quot; title=&quot;Windows内存优化&quot;&gt;&lt;/a&gt;Windows内存优化&lt;/h2&gt;&lt;h3 id=&quot;一、fetch&quot;&gt;&lt;a href=&quot;#一、fetch&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/1-%E7%BB%A7%E6%89%BF%E5%85%A5%E9%97%A8/"/>
    <id>https://jhfuture.github.io/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/1-%E7%BB%A7%E6%89%BF%E5%85%A5%E9%97%A8/</id>
    <published>2022-10-14T09:54:56.521Z</published>
    <updated>2022-10-16T08:15:47.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><p><img src="/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/1-%E7%BB%A7%E6%89%BF%E5%85%A5%E9%97%A8/image-20221016144937017.png" alt="image-20221016144937017"></p><h3 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extend 关键词</span><br></pre></td></tr></table></figure><h3 id="三、继承的使用细节"><a href="#三、继承的使用细节" class="headerlink" title="三、继承的使用细节"></a>三、继承的使用细节</h3><ol><li><p>子类继承了所有的属性和方法，非私有的属性和方法可以直接在子类中进行访问，但是私有属性和方法不能在子类直接访问，要通过&#x3D;&#x3D;父类提供&#x3D;&#x3D;的公共方法去访问。</p></li><li><p>子类必须调用父类的构造器，完成父类的初始化</p><ol><li><blockquote><p>在子类的构造器中会有 super</p></blockquote></li></ol></li><li><p>当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的<code>无参构造器</code>。如果父类没有提供无参构造器，则必须在子类的构造器中使用super去指定使用父类的哪个构造器完成对父类</p><blockquote><p>如果父类中没有构造器，那编译器会自动添加一个空的同名构造器，如果父类中有其他构造器，则编译器不会创建空形参的同名构造器下面这段代码就会报错</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">base</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String n1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  String n2;</span><br><span class="line">String n3=<span class="string">&quot;n3&quot;</span>;</span><br><span class="line"><span class="keyword">private</span>  String n4=<span class="string">&quot;n4&quot;</span>;</span><br><span class="line">base(String name)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//缺少构造器的显式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sub</span>  <span class="keyword">extends</span> <span class="title class_">base</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">sub</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(n1+n2+n3+getn4());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//另一个类进行调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">sub</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p style="color:red">java: 无法将类 com.jhfuture.extend.base中的构造器 base应用到给定类型;  需要: java.lang.String  找到: 没有参数  原因: 实际参数列表和形式参数列表长度不同      </p><ol start="4"><li><p>如果需要指定使用父类的构造器，在子类构造器中使用super()</p><ol><li>调用无参构造器 —–&gt; super() &#x2F;什么都不写</li><li>调用有参构造器 ——&gt; super( parameter)</li></ol></li><li><p>super在使用时，需要放在&#x3D;&#x3D;构造器的第一行&#x3D;&#x3D;（super只能在构造器中使用)</p></li><li><p>super()和this()都只能放在构造器第一行，因此这两个方法不能共存在一个构造器</p></li><li><p>Java所有类都是object类的子类，object是所有类的基类。</p><ol><li><img src="/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/3-%E7%BB%A7%E6%89%BF/1-%E7%BB%A7%E6%89%BF%E5%85%A5%E9%97%A8/image-20221016160315556.png" alt="image-20221016160315556"></li></ol></li><li><p>父类构造器的调用不限于直接父类！将一直往上追溯到object类（顶级父类）</p></li><li><p>子类最多只能继承一个父类（指直接继承），即java中是&#x3D;&#x3D;单继承机制&#x3D;&#x3D;</p><ol><li>思考，如何让A类继承B类和C类。</li><li>A继承B–》继承C</li></ol></li><li><p>不能滥用继承，子类和父类之间必须满足is-a的逻辑关系</p><ol><li>animal<ol><li>Cat extents Animal 合理</li></ol></li><li>Person is Music<ol><li>person extend &#x2F;&#x2F;不合理</li></ol></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;h3 id=&quot;一、定义&quot;&gt;&lt;a href=&quot;#一、定义&quot; class=&quot;headerlink&quot; title=&quot;一、定义&quot;&gt;&lt;/a&gt;一、定义&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/1-%E5%8C%85/"/>
    <id>https://jhfuture.github.io/2022/10/14/JAVA/4-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1(%E4%B8%AD%E7%BA%A7)/1-%E5%8C%85/</id>
    <published>2022-10-14T09:25:16.067Z</published>
    <updated>2022-10-16T07:05:46.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="一、包的本质"><a href="#一、包的本质" class="headerlink" title="一、包的本质"></a>一、包的本质</h3><p>文件夹</p><h3 id="二、导入包"><a href="#二、导入包" class="headerlink" title="二、导入包"></a>二、导入包</h3><ol><li><p>按需导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xxx.xxx.className;</span><br></pre></td></tr></table></figure></li><li><p>完整导入</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xxx.xxx</span><br></pre></td></tr></table></figure><p>三、包的注意事项</p><ol><li><p>命名规范：</p><ol><li>不能含关键字</li><li>不能以数字开头</li><li>以数字、字母、下划线组成</li></ol></li><li><p>java lang中的包是默认导入的。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;包&quot;&gt;&lt;a href=&quot;#包&quot; class=&quot;headerlink&quot; title=&quot;包&quot;&gt;&lt;/a&gt;包&lt;/h2&gt;&lt;h3 id=&quot;一、包的本质&quot;&gt;&lt;a href=&quot;#一、包的本质&quot; class=&quot;headerlink&quot; title=&quot;一、包的本质&quot;&gt;&lt;/a&gt;一、包的本</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/14/Windows/%E5%AE%89%E8%A3%85office2016/"/>
    <id>https://jhfuture.github.io/2022/10/14/Windows/%E5%AE%89%E8%A3%85office2016/</id>
    <published>2022-10-14T09:23:55.335Z</published>
    <updated>2022-10-14T09:23:55.335Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/13/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FFAT/"/>
    <id>https://jhfuture.github.io/2022/10/13/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FFAT/</id>
    <published>2022-10-13T15:37:00.401Z</published>
    <updated>2022-07-20T05:37:19.427Z</updated>
    
    <content type="html"><![CDATA[<p><strong>● FAT16</strong></p><p>优点：兼容性最好，某些数码设备可能对FAT32和NTFS格式的存储卡支持不太好，因此只能使用FAT16。</p><p>缺点：最大仅支持2GB分区，空间浪费大。</p><p>备注：赶紧看看U盘是不是FAT格式，如果是就改用FAT32吧！</p><p><strong>● FAT32</strong></p><p>优点：兼容性好。</p><p>缺点：单个文件不能超过4GB，不支持512MB以下容量的U盘。</p><p>备注：如果U盘容量达8GB以上，发现4GB文件拷不进去的话，可以考虑换用NTFS或ExFAT格式了。</p><p><strong>● ExFAT</strong></p><p>优点：专为闪存和U盘设计，空间浪费小。</p><p><strong>● NTFS</strong></p><p>优点：兼容性好，支持任意大小的U盘。</p><p>缺点：会缩短闪存寿命。</p><p>备注：反正U盘超便宜，不怕坏的朋友们使用NTFS其实挺好。</p><p><strong>FatFs和FAT32是什么关系？</strong></p><p>搞嵌入式的应该对FatFs并不陌生，那么肯定有人会问：<strong>FatFs和FAT32是什么关系？</strong></p><p>我们说的FatFs是指FAT Filesystem，是一个通用的文件系统(FAT&#x2F;exFAT)模块，用于在小型嵌入式系统中实现FAT文件系统。一种供MS-DOS及其它Windows操作系统对文件进行组织与管理的文件系统。</p><p>FAT 文件系统起源于 1980 年左右，是 MS-DOS 首先支持的文件系统。</p><p>而FAT32可以说是经过FatFs发展而来：</p><p>###一些操作</p><ol><li><a href="https://www.disktool.cn/jiaocheng/convert-ntfs.html">NTS格式无损数据转fat—分区助手</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;● FAT16&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优点：兼容性最好，某些数码设备可能对FAT32和NTFS格式的存储卡支持不太好，因此只能使用FAT16。&lt;/p&gt;
&lt;p&gt;缺点：最大仅支持2GB分区，空间浪费大。&lt;/p&gt;
&lt;p&gt;备注：赶紧看看U盘是不是FAT格式</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>安装Windows系统(使用微PE)</title>
    <link href="https://jhfuture.github.io/2022/10/13/Windows/installWindows/"/>
    <id>https://jhfuture.github.io/2022/10/13/Windows/installWindows/</id>
    <published>2022-10-13T12:00:24.000Z</published>
    <updated>2022-10-13T13:24:44.856Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="安装-x2F-重装Windows系统"><a href="#安装-x2F-重装Windows系统" class="headerlink" title="安装&#x2F;重装Windows系统"></a>安装&#x2F;重装Windows系统</h2><p>[TOC]</p><h3 id="一、制作PE系统盘"><a href="#一、制作PE系统盘" class="headerlink" title="一、制作ＰＥ系统盘"></a>一、制作ＰＥ系统盘</h3><ol><li><p>准备好一个U盘，并备份好其中的文件(制作启动盘时会清空u盘所有文件！！！！)</p></li><li><p>下载<a href="https://www.wepe.com.cn/download.html">微PE工具箱</a></p></li><li><p>使用PE工具箱制作u盘</p><ol><li><img src="/2022/10/13/Windows/installWindows/image-20221013201439305.png" alt="image-20221013201439305"></li></ol></li><li><p>选择后点击确定</p></li></ol><h3 id="二、下载Windows镜像"><a href="#二、下载Windows镜像" class="headerlink" title="二、下载Windows镜像"></a>二、下载Windows镜像</h3><ol><li><p>打开<a href="https://msdn.itellyou.cn/">msdn下载站</a></p></li><li><p>选择操作系统镜像</p><ol><li>这里以Windows10镜像为演示<img src="/2022/10/13/Windows/installWindows/image-20221013201956842.png" alt="image-20221013201956842"></li><li>复制下载链接，并用迅雷打开<img src="/2022/10/13/Windows/installWindows/image-20221013202212437.png" alt="image-20221013202212437"></li><li>下载完成后复制到u盘中即可。</li></ol></li></ol><blockquote><p>business为企业版，consumer为零售版，x64代表64位系统，x86为32位系统</p></blockquote><p>​</p><h3 id="三、重启电脑／开启需要安装的电脑，选择从U盘启动"><a href="#三、重启电脑／开启需要安装的电脑，选择从U盘启动" class="headerlink" title="三、重启电脑／开启需要安装的电脑，选择从Ｕ盘启动"></a>三、重启电脑／开启需要安装的电脑，选择从Ｕ盘启动</h3><ol><li><p>上百度查询 &#x3D;&#x3D;xxxx电脑如何从U盘启动&#x3D;&#x3D;&#x3D;。这里以联想笔记本为例&#x3D;&#x3D;&gt; 开机时连续摁F12</p></li><li><p>进入PE后选择Windows安装器</p></li><li><p>选择第二步下载的iso镜像。<img src="/2022/10/13/Windows/installWindows/image-20221013210934557.png" alt="image-20221013210934557">&#x3D;&#x3D;》点击选择进行选择</p></li><li><p>第二栏和第三栏选择你要安装的磁盘分区即可。</p></li><li><p>显示安装完成&#x3D;&#x3D;&#x3D;&#x3D;》手动或自动重启即可。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;安装-x2F-重装Windows系统&quot;&gt;&lt;a href=&quot;#安装-x2F-重装Windows系统&quot; class=&quot;headerlink&quot; title=&quot;安装&amp;#x2F;重装Windows系统&quot;&gt;&lt;/a&gt;安装&amp;#x2</summary>
      
    
    
    
    <category term="Windows使用技巧" scheme="https://jhfuture.github.io/categories/Windows%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Windows" scheme="https://jhfuture.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Untitled/"/>
    <id>https://jhfuture.github.io/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Untitled/</id>
    <published>2022-10-12T17:01:34.137Z</published>
    <updated>2022-10-12T17:01:34.137Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/Untitled/"/>
    <id>https://jhfuture.github.io/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/Untitled/</id>
    <published>2022-10-12T17:01:11.584Z</published>
    <updated>2022-10-12T17:01:11.584Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/1-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/"/>
    <id>https://jhfuture.github.io/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/1-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/</id>
    <published>2022-10-12T16:57:53.262Z</published>
    <updated>2022-10-12T17:00:33.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法重载："><a href="#方法重载：" class="headerlink" title="方法重载："></a>方法重载：</h2><p>即方法同名的方法：</p><p>特点：</p><ol><li>方法名相同</li><li>形参列表：必须不同（形参类型或个数或顺序，至少其中的一类不同，参数名无要求（不影响）)</li><li>返回类型：无要求&#x3D;&#x3D;&#x3D;&gt;无法形成方法重载。</li></ol><p><img src="/2022/10/13/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/1-%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/image-20221013005835441-16655939244151.png" alt="image-20221013005835441"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;方法重载：&quot;&gt;&lt;a href=&quot;#方法重载：&quot; class=&quot;headerlink&quot; title=&quot;方法重载：&quot;&gt;&lt;/a&gt;方法重载：&lt;/h2&gt;&lt;p&gt;即方法同名的方法：&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方法名相同&lt;/li&gt;
&lt;li&gt;形参列表：必须不同</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/07/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://jhfuture.github.io/2022/10/07/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-10-07T13:37:15.775Z</published>
    <updated>2022-07-20T13:41:42.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基本数据类型</p></blockquote><p>基本数据类型：</p><p>​只有值拷贝。</p><p><img src="/2022/10/07/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220720213940526.png" alt="image-20220720213940526"></p><p>内存空间：</p><blockquote><p>本质是jvm中不同方法体的栈</p></blockquote><p><img src="/2022/10/07/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/1-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20220720214141265.png" alt="image-20220720214141265"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;基本数据类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本数据类型：&lt;/p&gt;
&lt;p&gt;​	只有值拷贝。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/10/07/JAVA/3-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/07/IDEA/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://jhfuture.github.io/2022/10/07/IDEA/%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2022-10-07T12:11:27.397Z</published>
    <updated>2022-07-20T13:48:41.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDEA的相关快捷键"><a href="#IDEA的相关快捷键" class="headerlink" title="IDEA的相关快捷键"></a>IDEA的相关快捷键</h2><p>一、自带通用<br>     1. ctrl +&#x2F; 注释</p><pre><code>2. alt+/ 补全3. import  package自动导入包      1. ![image-20221007201550828](快捷键/image-20221007201550828.png)2022直接设置完即可，其他版本设置完后 ，在需要导入package的地方点击 ``alt +enter``即可4. ctrl+alt+L   格式化代码5.  alt +insert 生成构造器 6. Ctrl +H 查看一个类的层级关系    1. 将鼠标放在想要查看的类上    2. 摁下 Ctrl + H     3. 生成可视图 鼠标右键--&gt;diagrams---&gt; show diagram7. Ctrl+ B 查看方法所在的class 8. ==```.var  自动分配变量名```==    1. ``` java    new Person().var ---&gt;回车     |     |自动生成     ↓    Person Person= new Person();    ```</code></pre><p>​        </p><p>​        </p><p>​    </p><p>二、自定义</p><pre><code>1. ctrl+d删除当前行 ---&gt; delete1. ctrl+alt + ↓ 复制当前行 -----&gt;duplicate1. alt +R 快速运行 ---------&gt; run</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IDEA的相关快捷键&quot;&gt;&lt;a href=&quot;#IDEA的相关快捷键&quot; class=&quot;headerlink&quot; title=&quot;IDEA的相关快捷键&quot;&gt;&lt;/a&gt;IDEA的相关快捷键&lt;/h2&gt;&lt;p&gt;一、自带通用&lt;br&gt;     1. ctrl +&amp;#x2F; 注释&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/06/vue/25-%E6%93%8D%E4%BD%9CDOM/ref/"/>
    <id>https://jhfuture.github.io/2022/10/06/vue/25-%E6%93%8D%E4%BD%9CDOM/ref/</id>
    <published>2022-10-06T14:21:05.998Z</published>
    <updated>2022-10-06T14:29:49.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li>被用来给元素(纯粹的html元素)或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是<code>组件实例对象（vc）</code><ol><li>html标签<ol><li>使用docum.getElementByID()，与使用ref并无区别</li></ol></li><li><code>组件</code> ☸<ol><li>如果使用docum.getElementByID()，则获取的只是该DOM元素<code>&lt;div id=&quot;school&quot;&gt;&lt;h1&gt;学校名称:尚硅谷&lt;/h1&gt;&lt;/div&gt;</code></li><li>使用ref,则获取的是vc实例对象  vueCompont{xxxxxxxxxx}</li></ol></li></ol></li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ref属性&quot;&gt;&lt;a href=&quot;#ref属性&quot; class=&quot;headerlink&quot; title=&quot;ref属性&quot;&gt;&lt;/a&gt;ref属性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;被用来给元素(纯粹的html元素)或子组件注册引用信息（id的替代者）&lt;/li&gt;
&lt;li&gt;应用在html</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/06/vue/18-%E9%9D%9E%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB/"/>
    <id>https://jhfuture.github.io/2022/10/06/vue/18-%E9%9D%9E%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB/</id>
    <published>2022-10-06T13:12:07.874Z</published>
    <updated>2022-10-06T13:42:42.114Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>1.一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype</p><p>2.为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</p></blockquote><p>图示：</p><p>​vue在vueComponet的原型对象与vue的原型对象中加了一条线</p><p>​让vc能用到vue原型对象上的诸多优秀方法</p><p><img src="/2022/10/06/vue/18-%E9%9D%9E%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6/%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB/image-20221006214133088.png" alt="image-20221006214133088"></p><p>一、验证该关系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> school=<span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;school&quot;</span>,</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;school&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;`</span>,</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                <span class="attr">hello</span>:<span class="string">&quot;hello&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">        <span class="attr">components</span>:&#123;school,student&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内置关系成立吗&quot;</span>,school.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>===<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>二、原型链中的解释。</p><p>构造函数上的原型属性和 <code>构造器所创建的对象</code>上的隐式属性所指向的为<code>同一个原型对象</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个构造函数</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">b</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个Demo的实例对象</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">Demo</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">//显示原型属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">__proto__</span>) <span class="comment">//隐式原型属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span> === d.<span class="property">__proto__</span>) <span class="comment">//t</span></span><br><span class="line">----&gt;<span class="literal">true</span>;</span><br><span class="line"><span class="comment">//程序员通过显示原型属性操作原型对象，追加一个x属性，值为99</span></span><br><span class="line"><span class="title class_">Demo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">x</span> = <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>,d) </span><br></pre></td></tr></table></figure><p>二、内置关系的使用</p><ol><li>全局事件总线</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;1.一个重要的内置关系：VueComponent.prototype.&lt;strong&gt;proto&lt;/strong&gt; &amp;#x3D;&amp;#x3D;&amp;#x3D; Vue.prototype&lt;/p&gt;
&lt;p&gt;2.为什么要有这个关系：让组件实例对象（vc）可以访</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/10/05/JavaScript/Promise/promiseAll%E5%92%8CpromiseRace/"/>
    <id>https://jhfuture.github.io/2022/10/05/JavaScript/Promise/promiseAll%E5%92%8CpromiseRace/</id>
    <published>2022-10-05T13:14:32.292Z</published>
    <updated>2022-10-05T14:19:40.437Z</updated>
    
    <content type="html"><![CDATA[<p>PromiseApi的使用</p><blockquote><p>API为处理异步操作而生</p></blockquote><blockquote><p>一、promiseAll(promiseArr)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">promiseArr</span>: 包含 n 个 promise 的数组</span><br><span class="line">  说明: 返回一个新的 promise, 只有所有的 promise<span class="string">`都成功才成功`</span>且成功的value是所有promise成功的value的数组, 只要有一    个失败了就直接失败。</span><br><span class="line">         --》并且只要检测到失败的，就##立即返回##失败的promise</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>二、Promise.Race(promiseArr)</p><p>   promiseArr: 包含 n 个 promise 的数组<br>       说明: 返回一个新的 promise, <code>第一个完成</code>的 promise 的结果状态就是最终的结果状态,<br>         和all方法一样，获取到当<code>第一个完成</code>的 promise 的结果状态，就立即返回 *&#x2F;</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="title class_">Promise</span> 构造函数：<span class="keyword">new</span> <span class="title class_">Promise</span>(executor)</span><br><span class="line">        executor 函数：是同步执行的，(resolve, reject) =&gt; &#123; &#125;</span><br><span class="line">        resolve 函数：调用 resolve 将 <span class="title class_">Promise</span> 实例内部状态改为成功(fulfiled)。</span><br><span class="line">        reject 函数：调用 reject 将 <span class="title class_">Promise</span> 实例内部状态改为失败(rejected)。</span><br><span class="line">        说明：executor 函数会在 <span class="title class_">Promise</span> 内部立即同步调用，异步代码放在 executor 函数中。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> 方法：<span class="title class_">Promise</span> 实例.<span class="title function_">then</span>(onFulfilled, onRejected)</span><br><span class="line">        onFulfilled：成功的回调函数 —— (value) =&gt; &#123; &#125;</span><br><span class="line">        onRejected：失败的回调函数 —— (reason) =&gt; &#123; &#125;</span><br><span class="line">        注意：then 方法会返回一个新的 <span class="title class_">Promise</span> 实例对象。 </span><br><span class="line">        </span><br><span class="line"><span class="number">3.</span><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">catch</span>(onRejected) 方法</span><br><span class="line">        (<span class="number">1</span>) onRejected 函数: 失败的回调函数(reason) =&gt; &#123; &#125;</span><br><span class="line">          说明: <span class="title function_">then</span>()的语法糖, 相当于: <span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected)</span><br><span class="line">        (<span class="number">2</span>) 异常穿透使用: 当运行到最后, 没被处理的所有异常错误都会进入这个方法的回调函数中 </span><br><span class="line"> <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;失败原因&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// promise.then(</span></span><br><span class="line">    <span class="comment">//   undefined,  //成功的回调可以是undefined</span></span><br><span class="line">    <span class="comment">//   (reason) =&gt; &#123; console.log(`失败原因：$&#123;reason&#125;`); &#125;  //失败的回调必须有，否则会报错</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line">    <span class="comment">// then()的语法糖</span></span><br><span class="line">    promise.<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`失败原因：<span class="subst">$&#123;reason&#125;</span>`</span>); &#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 关于then()的成功回调为undefined问题</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;成功的value&#x27;</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(</span><br><span class="line">      <span class="literal">undefined</span>,    <span class="comment">//成功的回调undefined，但是Promise底层做了处理，加上了成功回调 value =&gt; value</span></span><br><span class="line">      <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败原因：&#x27;</span>, reason); &#125;</span><br><span class="line">    ).<span class="title function_">then</span>(</span><br><span class="line">      <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功的value：&#x27;</span>, value); &#125;,</span><br><span class="line">      <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败原因：&#x27;</span>, reason); &#125;</span><br><span class="line">    ) </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PromiseApi的使用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;API为处理异步操作而生&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;一、promiseAll(promiseArr)&lt;/p&gt;
&lt;figure class=&quot;highlight ja</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/09/21/JAVA/2-%E5%8E%9F%E3%80%81%E5%8F%8D%E3%80%81%E8%A1%A5%E7%A0%81/%E4%B8%89%E7%A0%81/"/>
    <id>https://jhfuture.github.io/2022/09/21/JAVA/2-%E5%8E%9F%E3%80%81%E5%8F%8D%E3%80%81%E8%A1%A5%E7%A0%81/%E4%B8%89%E7%A0%81/</id>
    <published>2022-09-21T13:55:06.337Z</published>
    <updated>2022-09-21T14:01:54.402Z</updated>
    
    <content type="html"><![CDATA[<ol><li>二进制的<code>最高位</code>是<code>符号位</code></li><li>正数的三码合一</li><li>负数的反码&#x3D;符号位不变，其他位<code>取反</code>    or  补码-1</li><li>负数的补码&#x3D;反码+1， </li><li>0的反码、补码都是0</li><li>java没有无符号数，换言之，java中的数都是有符号的。</li><li>计算机在运算时，都是以<code>补码的形式来运算</code>的</li><li>在看运算结果时，要看他的原码(!!，最终呈现的是原码)</li></ol><p><img src="/2022/09/21/JAVA/2-%E5%8E%9F%E3%80%81%E5%8F%8D%E3%80%81%E8%A1%A5%E7%A0%81/%E4%B8%89%E7%A0%81/image-20220921215536101.png" alt="image-20220921215536101"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;二进制的&lt;code&gt;最高位&lt;/code&gt;是&lt;code&gt;符号位&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;正数的三码合一&lt;/li&gt;
&lt;li&gt;负数的反码&amp;#x3D;符号位不变，其他位&lt;code&gt;取反&lt;/code&gt;    or  补码-1&lt;/li&gt;
&lt;li&gt;负数的补码&amp;#x3D</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/09/21/JAVA/0-Java%E7%BB%86%E8%8A%82/%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>https://jhfuture.github.io/2022/09/21/JAVA/0-Java%E7%BB%86%E8%8A%82/%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</id>
    <published>2022-09-21T13:46:16.527Z</published>
    <updated>2022-09-21T13:46:50.011Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/09/21/JAVA/0-Java%E7%BB%86%E8%8A%82/%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/image-20220921214648842.png" alt="image-20220921214648842"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/09/21/JAVA/0-Java%E7%BB%86%E8%8A%82/%E6%A0%87%E8%AF%86%E7%AC%A6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/image-202209212146488</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/09/21/JAVA/java%E7%9A%84%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://jhfuture.github.io/2022/09/21/JAVA/java%E7%9A%84%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2022-09-21T13:11:34.209Z</published>
    <updated>2022-09-21T13:15:58.350Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java与JavaScript中的三元运算符相似，这里只说注意的地方</p></blockquote><p>TernaryoperatorDetail.Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx条件 ? 表达式<span class="number">1</span>：表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><ol><li><p>表达式1和表达式2要为可以赋给变量的类型（或可以自动转换&#x2F;或者强制换)</p><blockquote><p>自动转换 int —&gt; double</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;java与JavaScript中的三元运算符相似，这里只说注意的地方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TernaryoperatorDetail.Java&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table</summary>
      
    
    
    
    
  </entry>
  
</feed>
