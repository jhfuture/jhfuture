<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jhfuture</title>
  
  
  <link href="https://jhfuture.github.io/atom.xml" rel="self"/>
  
  <link href="https://jhfuture.github.io/"/>
  <updated>2022-09-13T12:00:07.575Z</updated>
  <id>https://jhfuture.github.io/</id>
  
  <author>
    <name>jhfuture</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue组件中的通讯方式</title>
    <link href="https://jhfuture.github.io/2022/09/06/vue/19-%E7%BB%84%E4%BB%B6/2-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>https://jhfuture.github.io/2022/09/06/vue/19-%E7%BB%84%E4%BB%B6/2-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</id>
    <published>2022-09-06T13:52:51.000Z</published>
    <updated>2022-09-13T12:00:07.575Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h2><p>相互的组件之间一定会进行数据交互，那一定就会用到<code>组件之间的通讯</code>。</p><ol><li>父子之间的通讯———————-&gt;a、a.1父给子，property直接传递 。a.2子给父，父先给子偷偷传递一个函数，然后子再调用该函数进行参数传递。&#x3D;&#x3D;或&#x3D;&#x3D;  a.3父给子绑定自定义函数<br>                                                                                                      b、使用全局总线<br>                                                                                           c、订阅消息</li><li>同级兄弟之间的通讯—————–&gt;a、全局总线 b、订阅消息</li><li>亲戚关系比较复制——————–&gt;  a、全局总线 b、订阅消息</li></ol><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><h3 id="１．最简单的方法的方法————–property"><a href="#１．最简单的方法的方法————–property" class="headerlink" title="１．最简单的方法的方法————–property"></a>１．最简单的方法的方法————–property</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">//使用</span><br><span class="line">//父--to--&gt;子</span><br><span class="line">&lt;student  :propertyName=&quot;parameterName/functionName&quot;&gt;&lt;/student&gt;</span><br><span class="line">//子--accept--父</span><br><span class="line">props:[&quot;parameterName/functionName&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//案例</span><br><span class="line">//父组件，使用property传递参数、函数，实现父子之间通讯</span><br><span class="line"></span><br><span class="line">&lt;MyFooter :todos=&quot;todos&quot; :checkAllTodo=&quot;checkAllTodo&quot; :clearAllTodo=&quot;clearAllTodo&quot;/&gt;</span><br><span class="line"></span><br><span class="line">//子组件,通过接收property，然后收到来自父的参数，并调用函数来传递方法。</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyFooter&#x27;,</span><br><span class="line">props:[&#x27;todos&#x27;,&#x27;checkAllTodo&#x27;,&#x27;clearAllTodo&#x27;],</span><br><span class="line">computed: &#123;</span><br><span class="line">//总数</span><br><span class="line">total()&#123;</span><br><span class="line">return this.todos.length</span><br><span class="line">&#125;,</span><br><span class="line">//已完成数</span><br><span class="line">doneTotal()&#123;</span><br><span class="line">//此处使用reduce方法做条件统计</span><br><span class="line">/* const x = this.todos.reduce((pre,current)=&gt;&#123;</span><br><span class="line">console.log(&#x27;@&#x27;,pre,current)</span><br><span class="line">return pre + (current.done ? 1 : 0)</span><br><span class="line">&#125;,0) */</span><br><span class="line">//简写</span><br><span class="line">return this.todos.reduce((pre,todo)=&gt; pre + (todo.done ? 1 : 0) ,0)</span><br><span class="line">&#125;,</span><br><span class="line">//控制全选框</span><br><span class="line">isAll:&#123;</span><br><span class="line">//全选框是否勾选</span><br><span class="line">get()&#123;</span><br><span class="line">return this.doneTotal === this.total &amp;&amp; this.total &gt; 0</span><br><span class="line">&#125;,</span><br><span class="line">//isAll被修改时set被调用</span><br><span class="line">set(value)&#123;</span><br><span class="line">this.checkAllTodo(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">/* checkAll(e)&#123;</span><br><span class="line">this.checkAllTodo(e.target.checked)</span><br><span class="line">&#125; */</span><br><span class="line">//清空所有已完成</span><br><span class="line">clearAll()&#123;</span><br><span class="line">this.clearAllTodo()</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="２-使用自定义事件给子组件的实例对象的绑定事件。"><a href="#２-使用自定义事件给子组件的实例对象的绑定事件。" class="headerlink" title="２. 使用自定义事件给子组件的实例对象的绑定事件。"></a>２. 使用自定义事件给子组件的实例对象的绑定事件。</h3><blockquote><p>然后在子组件中用 <code>this.$emit(&quot;functionName&quot;,parameter)</code>进行调用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//使用</span><br><span class="line">//父--to--&gt;子</span><br><span class="line">//方法一  直接写 </span><br><span class="line">//父</span><br><span class="line">&lt;student  @functionName=&#x27;fucNa&#x27;&gt;&lt;/student&gt;</span><br><span class="line">//子</span><br><span class="line">this.$emit(&quot;fucNa&quot;)</span><br><span class="line">//方法二  通过ref</span><br><span class="line">//父</span><br><span class="line">&lt;student ref=&#x27;student&#x27;&gt;&lt;/student&gt;</span><br><span class="line">this.$ref.student.$on(&quot;functionName&quot;,parameterName)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//子&lt;--accept--&gt;父</span><br><span class="line">this.$emit(&quot;functionName&quot;)</span><br><span class="line">//使用emit调用即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-使用全局总线"><a href="#3-使用全局总线" class="headerlink" title="3.使用全局总线"></a>3.使用全局总线</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 在main.js中进行全局总线的挂载安装</span></span><br><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line"><span class="comment">//安装全局事件总线,尽量早的进行安装</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 在A组件中调用this.$bus.$on()绑定事件</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;School&#x27;,this)</span></span><br><span class="line">            <span class="comment">//在vc加载完成后就进行绑定</span></span><br><span class="line">   <span class="comment">// tip:</span></span><br><span class="line">      <span class="comment">//      这里也需要注意this指向的问题，如果想this指向为当前vc，就使用箭头函数/写在methods中的函数（详细看前一篇）</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;hello&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是School组件，收到了数据&#x27;</span>,data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">//</span></span><br><span class="line">            <span class="comment">//在beforedestroy是最好进行解绑 ,适当的给它减少压力</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="comment">//3. 在B组件中调用this.$bus.$emit()调用事件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;Student&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;Student&#x27;,this.x)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">sendStudentName</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;hello&#x27;</span>,<span class="variable language_">this</span>.<span class="property">name</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里简要说明一下全局总线的工作原理：</p><pre><code>1. 全局总线的要求: - 全部组件都能访问到 - 可以调用 this.\$on(FunctionName,function) 方法进行事件的绑定、this.\$emit(fuctionName,parameter)方法进行方法的触发</code></pre><p>​2. 一个重要的内置关系： VueComponent.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype</p><p>​        2.为什么要有这个关系：让&#x3D;&#x3D;组件实例对象（vc）&#x3D;&#x3D;可以<strong>访问</strong>到 &#x3D;&#x3D;Vue原型&#x3D;&#x3D;上的属性、方法。</p><blockquote><p>这里涉及到了一部分原型链的知识：<br>    简要说明一下： 由构造函数创建的对像（这里为vueComponet创建的vc对象），可以通过 &#x3D;&#x3D;_proto_（隐形原型）&#x3D;&#x3D;访问到构造函数上的&#x3D;&#x3D;原型&#x3D;&#x3D;</p><p>​而构造函数自身可以通过 &#x3D;&#x3D;prototype（显示原型）&#x3D;&#x3D;直接访问自身的&#x3D;&#x3D;原型对象&#x3D;&#x3D;</p><p><img src="/2022/09/06/vue/19-%E7%BB%84%E4%BB%B6/2-%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/%E5%8E%9F%E5%9E%8B%E9%93%BE-16630694336681.png" alt="原型链"></p></blockquote><h3 id="4-使用订阅信息推送。"><a href="#4-使用订阅信息推送。" class="headerlink" title="4. 使用订阅信息推送。"></a>4. 使用订阅信息推送。</h3><blockquote><p>订阅消息与全局总线的原理相近，这里不展开叙说，只说明简要的使用方法</p></blockquote><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、引入&quot;&gt;&lt;a href=&quot;#一、引入&quot; class=&quot;headerlink&quot; title=&quot;一、引入&quot;&gt;&lt;/a&gt;一、引入&lt;/h2&gt;&lt;p&gt;相互的组件之间一定会进行数据交互，那一定就会用到&lt;code&gt;组件之间的通讯&lt;/code&gt;。&lt;/p&gt;</summary>
      
    
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/categories/Vue/"/>
    
    
    <category term="Vue组件" scheme="https://jhfuture.github.io/tags/Vue%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vue绑定样式</title>
    <link href="https://jhfuture.github.io/2022/09/04/vue/08-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/"/>
    <id>https://jhfuture.github.io/2022/09/04/vue/08-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/</id>
    <published>2022-09-04T10:58:14.000Z</published>
    <updated>2022-09-04T14:10:09.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h2><ol><li><p>网页的组件元素的样式通常由 1. 绑定class，然后通过css文件书写，或者 2. 直接在标签中书写style。</p></li><li><p>如果我们想要修改样式，无非也是改动他们。在jquery&#x2F;JavaScript中我们可以通过直接操作DOM元素实现，而在vue中，vue帮我们实现了虚拟DOM的操作，使得我们可以不用去直接操作DOM来实现这个功能。在vue中我们使用：a)class绑定与、b)style绑定进行实现</p><blockquote><p>tips :  如果原本就有class属性，那使用:class&#x3D;xxx时，只会在原来的基础上进行添加，而不会<code>覆盖</code></p></blockquote></li></ol><h2 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h2><h3 id="1-通过-class-39-xxx-39-实现、xxx可以是字符串、数组、对象。"><a href="#1-通过-class-39-xxx-39-实现、xxx可以是字符串、数组、对象。" class="headerlink" title="1. 通过:class=&#39;xxx&#39;实现、xxx可以是字符串、数组、对象。"></a>1. 通过<code>:class=&#39;xxx&#39;</code>实现、xxx可以是字符串、数组、对象。</h3><ol><li><p>通过<code>字符串</code>实现适用于：只有一个，但是类名不确定，需要<code>动态获取</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">changeMood()&#123;</span><br><span class="line">const arr = [&#x27;happy&#x27;,&#x27;sad&#x27;,&#x27;normal&#x27;]</span><br><span class="line">const index = Math.floor(Math.random()*3)</span><br><span class="line">this.mood = arr[index]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>通过<code>数组</code>实现，适用于：需要绑定多个属性，且数量未知，类名未知。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">return&#123;</span><br><span class="line">classArr:[&#x27;normal&#x27;,&#x27;bad&#x27;,&quot;good&quot;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>通过<code>对象实现</code>，使用于：要绑定的个数确定(通常情况，但也可以添加)，类名确定，但要<code>动态决定用不用</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">return&#123;</span><br><span class="line">classObj:&#123;</span><br><span class="line">atguigu1:false,</span><br><span class="line">atguigu2:false,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-通过style实现-style-xxx-xxx可以是对象、对象数组"><a href="#2-通过style实现-style-xxx-xxx可以是对象、对象数组" class="headerlink" title="2. 通过style实现  style=xxx,xxx可以是对象、对象数组"></a>2. 通过style实现  <code>style=xxx</code>,xxx可以是对象、对象数组</h3><ol><li>通过配置对象</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;basic&quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">styleObj2:&#123;</span><br><span class="line">backgroundColor:&#x27;orange&#x27;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>通过数组对线</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;basic&quot; :style=&quot;styleArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">styleArr:[</span><br><span class="line">&#123;</span><br><span class="line">fontSize: &#x27;40px&#x27;,</span><br><span class="line">color:&#x27;blue&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">backgroundColor:&#x27;gray&#x27;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、引入&quot;&gt;&lt;a href=&quot;#一、引入&quot; class=&quot;headerlink&quot; title=&quot;一、引入&quot;&gt;&lt;/a&gt;一、引入&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;网页的组件元素的样式通常由 1. 绑定class，然后通过css文件书写，或者 2. 直接在标签中书写st</summary>
      
    
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/tags/Vue/"/>
    
    <category term="vue绑定样式" scheme="https://jhfuture.github.io/tags/vue%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/09/03/vue/20-%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/localstorage/"/>
    <id>https://jhfuture.github.io/2022/09/03/vue/20-%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/localstorage/</id>
    <published>2022-09-03T13:16:37.559Z</published>
    <updated>2022-09-03T13:40:59.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>localxlocalStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>             该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>localStorage.getItem(&#39;person&#39;);</code></p><pre><code>     该方法接受一个键名作为参数，返回键名对应的值。</code></pre></li><li><p><code>localStorage.removeItem(&#39;key&#39;);</code></p><pre><code>     该方法接受一个键名作为参数，并把该键名从存储中删除。</code></pre></li><li><p><code> localStorage.clear()</code></p><pre><code>     该方法会清空存储中的所有数据。</code></pre></li></ol></li><li><p>备注：</p><ol><li><code>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</code></li><li>LocalStorage存储的内容，需要<code>手动清除</code>才会消失。</li><li><code>localStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>session————&gt; 对话，网页结束后就消失了，而localstorage————&gt; 不删除就不会消失</p></li><li><p>如果是一个对象，那需要使用<code>JSON.stringfy()</code>转换为字符串，然后再<code>储存</code>，</p><p>同时，在<code>读取</code>时，需要使用<code>JSON.parse()</code>进行解析，然后再使用，否则会发生<code>类型问题</code></p><p><img src="/2022/09/03/vue/20-%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/localstorage/image-20220903213957106.png" alt="image-20220903213957106"></p></li></ol><blockquote><p>这里 ‘test’本来应该是object类型，但储存的时候进行了转换，而读取时没有进行转换，则最终读取的数据，类型为 ‘String’</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;webStorage&quot;&gt;&lt;a href=&quot;#webStorage&quot; class=&quot;headerlink&quot; title=&quot;webStorage&quot;&gt;&lt;/a&gt;webStorage&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;存储内容大小一般支持5MB左右（不同浏览器可能还不一样）&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/"/>
    <id>https://jhfuture.github.io/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/</id>
    <published>2022-08-21T07:12:50.568Z</published>
    <updated>2022-08-21T13:51:41.090Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一、部门职能"><a href="#一、部门职能" class="headerlink" title="一、部门职能"></a>一、部门职能</h1><ol><li>科教招新项目的开发</li></ol><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821151559325.png" alt="image-20220821151559325"></p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821151809684.png" alt="image-20220821151809684"></p><ol start="2"><li><p>广师大网页管理</p></li><li><p>贴上我们的作品</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821152050558.png" alt="image-20220821152050558"></p></li></ol><h1 id="二、部门的招新要求"><a href="#二、部门的招新要求" class="headerlink" title="二、部门的招新要求"></a>二、部门的招新要求</h1><ul><li><p><strong>&#x3D;&#x3D;自身具有明确的职业规划&#x3D;&#x3D;</strong>,将来从事软件开发相关的职业。</p></li><li><p>&#x3D;&#x3D;对编程具有较高的兴趣&#x3D;&#x3D;，小白也没关系，部门内有学长学姐专业指导。</p></li><li><p>&#x3D;&#x3D;不好高骛远，脚踏实地&#x3D;&#x3D;，做到认真并按时的完成部门任务。</p></li><li><p>&#x3D;&#x3D;<strong>具有一定的自主学习能力</strong>&#x3D;&#x3D;遇到问题及时沟通。</p></li><li><p>&#x3D;&#x3D;<strong>乐观积极，百折不挠</strong>&#x3D;&#x3D;，希望你能在变强的路上越走越远</p><h1 id="三、成员介绍"><a href="#三、成员介绍" class="headerlink" title="三、成员介绍"></a>三、成员介绍</h1><p>1.正部</p><p>副部，以下排名不分先后</p><p>2.xxxx</p><p>3.xxxx</p><p>4.xxxx</p></li></ul><h1 id="四、部门活动介绍"><a href="#四、部门活动介绍" class="headerlink" title="四、部门活动介绍"></a>四、部门活动介绍</h1><p>谁说程序猿都是冷冰冰的一群人，我们也有许多有趣的时刻。</p><ol><li><p>部门合照</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821154555782.png" alt="image-20220821154555782"></p></li><li><p>部门团建</p><ol><li>团建的大pizza！</li></ol><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821154507943.png" alt="image-20220821154507943"></p><p>2.团建的奶茶+烧烤！</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821154659655.png" alt="image-20220821154659655"></p></li></ol><p>团建一起玩游戏！！！</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/image-20220821155413221.png" alt="image-20220821155413221"></p><p>3.他们都说程序猿各个都是直男直女，莫得感情，但我们！会在元宵节给每一位小骨干送上一碗**&#x3D;&#x3D;温馨的小汤圆&#x3D;&#x3D;**！！！！</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220821161244.jpg" alt="微信图片_20220821161244"></p><h1 id="五、结尾"><a href="#五、结尾" class="headerlink" title="五、结尾"></a>五、结尾</h1><p>1.鼓舞</p><p>加入<strong>网络研发部</strong>，一起在<strong>验前端编程学习</strong>的海洋里遨游，</p><p>如果你已经确定在<strong>IT行业</strong>方向发展</p><p>我们能让你</p><p>在前端学习上<strong>领先</strong>于同专业同学</p><p>我们还能帮你</p><p>解答<strong>C&#x2F;C++、Java编程语言</strong>学习上的疑惑</p><p>还在犹豫什么！</p><ol start="2"><li><p>报名方式</p><p>点击下方的小程序链接，选择投递**&#x3D;&#x3D;网络研发部&#x3D;&#x3D;**吧！</p><p><img src="/2022/08/21/%E9%83%A8%E9%97%A8%E6%8B%9B%E6%96%B0/gh_c897a4e417c2_258.jpg" alt="gh_c897a4e417c2_258"></p><ul><li></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;一、部门职能&quot;&gt;&lt;a href=&quot;#一、部门职能&quot; class=&quot;headerlink&quot; title=&quot;一、部门职能&quot;&gt;&lt;/a&gt;一、部门职能&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;科教招新项目的开发&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/"/>
    <id>https://jhfuture.github.io/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/</id>
    <published>2022-08-20T13:11:26.970Z</published>
    <updated>2022-08-20T15:28:06.574Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820211218623.png" alt="image-20220820211218623"></p><p>自适应</p><p><img src="/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820211524694.png" alt="image-20220820211524694"></p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><h3 id="技术方案一："><a href="#技术方案一：" class="headerlink" title="技术方案一："></a>技术方案一：</h3><pre><code>- less- 媒体查询- 人</code></pre><p>技术方案2（推荐）</p><pre><code>- flexible.js- rem</code></pre><p>总结：</p><pre><code>1. 两种方案都存在1. 方案二更加简单</code></pre><p>动态设置html标签font-size大小</p><p>​<img src="/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820215730239.png" alt="image-20220820215730239"></p><p>rem实际开发的适配方案</p><p>rem&#x3D; 页面元素值(px)&#x2F;(屏幕宽度&#x2F;划分的分数)</p><p><img src="/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820221718183.png" alt="image-20220820221718183"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><img src="/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820232329513.png" alt="image-20220820232329513"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88/image-20220820211218623.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/less/"/>
    <id>https://jhfuture.github.io/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/less/</id>
    <published>2022-08-20T12:31:32.369Z</published>
    <updated>2022-08-20T15:47:01.035Z</updated>
    
    <content type="html"><![CDATA[<p>一、 Less是什么</p><p>​css的扩展语言</p><p>二、less的使用</p><pre><code>1. 变量    1. 变量时没有固定的值，可以改变的。    &gt; 1.书写less文件：    &gt;    &gt; ​@变量名 ：值    &gt;    &gt; 2.    2. 命名规范    1. ==**必须有@前嘴==**    2. 不能包含特殊字符    3. 不能以数字开头    4. 大小写敏感    3. 案例    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@color:pink</span><br><span class="line"></span><br><span class="line">.p&#123;</span><br><span class="line">color:@color</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>2. Less嵌套</code></pre><p>​    </p><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.子元素的样式直接写在父元素里面就好--&gt;</span></span><br><span class="line">.header&#123;</span><br><span class="line">color:red;</span><br><span class="line">a&#123;</span><br><span class="line">background-color:pink;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">添加伪类选择器</span><br><span class="line"><span class="comment">&lt;!--  如果有伪类选择器、交集选择器、伪类选择器 使用**==&amp;==**---&gt;</span> 内层选择器的前面需要加 ==&amp;==</span><br><span class="line">.header&#123;</span><br><span class="line">a&#123;</span><br><span class="line">&amp;:hover&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>![image-20220820210222137](less/image-20220820210222137.png)3. ==**Less运算**==☆   1. \+ \- \*  /    2. 运算顺序与四则运算相同，都是先乘数，后加减   ![image-20220820210628143](less/image-20220820210628143.png)   **注意：**   1. ==**运算符中间有空格隔开 1 px + 5**==   2. 对于不同的单位直接的运算，运算结果取==第一个值==的单位   ​![image-20220820210724170](less/image-20220820210724170.png)</code></pre><ol start="4"><li><p>@import 导入另一个样式文件（less）文件</p><p><strong>最后一定要加&#x3D;&#x3D;;&#x3D;&#x3D;</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;css文件&quot;</span> ;   //把一个样式文件导入到本样式文件中</span><br><span class="line">//link  将一个样式文件引入到<span class="selector-tag">html</span>页面</span><br></pre></td></tr></table></figure></li><li><p>编译less</p></li><li><p>Vscode 的easy less插件</p><ol><li>安装</li></ol></li></ol><p><img src="/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/less/image-20220820204947984.png" alt="image-20220820204947984"></p><p>​2. 插件会自动将less编译成一个css文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、 Less是什么&lt;/p&gt;
&lt;p&gt;​	css的扩展语言&lt;/p&gt;
&lt;p&gt;二、less的使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 变量

    1. 变量时没有固定的值，可以改变的。

    &amp;gt; 1.书写less文件：
    &amp;gt;
    &amp;gt; ​	@变量</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&amp;%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/"/>
    <id>https://jhfuture.github.io/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&amp;%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/</id>
    <published>2022-08-20T12:08:34.932Z</published>
    <updated>2022-08-20T12:27:10.989Z</updated>
    
    <content type="html"><![CDATA[<ol><li>物理像素比</li></ol><blockquote><p>电脑上当缩放比例为100%时，1px（css像素）则为电脑屏幕上的1个像素大小</p><blockquote><p>Windows10会自动将缩放比例调整为100%以上，例如125%</p><p><img src="/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/image-20220820201143115.png" alt="image-20220820201143115"><br>而手机上使用了视网膜技术。</p><p>1px(css像素)，在手机上显示的结果&#x3D;1px*像素缩放比</p><p>iphone8 : 1px(css像素)*2&#x3D;2</p><p>Tip:相当于直接把图片、文字这些放大两倍</p></blockquote></blockquote><p><img src="/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/image-20220820200923907.png" alt="image-20220820200923907"></p><p><img src="/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/image-20220820201423812.png" alt="image-20220820201423812"></p><ol start="2"><li><p>二倍图</p><p>如果直接将图片放大两倍，那可能就会变模糊，那怎么解决这个问题？</p><p>我们放一个100*100的，然后手动将这个图片缩小为50*50(css像素)，最终显示在屏幕上的是50(css像素)*2，显示的结果就是实际图片的效果</p></li></ol><p><img src="/2022/08/20/%E5%89%8D%E6%AE%B5%E4%B8%89%E5%89%91%E5%AE%A2/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94/image-20220820202429008.png" alt="image-20220820202429008"></p><ol start="3"><li>背景的缩放<ol><li>background-size: 图片的宽度 图片的高度</li><li>background-size: 图片宽度 (auto，默认)</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;物理像素比&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;电脑上当缩放比例为100%时，1px（css像素）则为电脑屏幕上的1个像素大小&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows10会自动将缩放比例调整为100%以上，例如125%&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/07/30/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://jhfuture.github.io/2022/07/30/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2022-07-30T14:13:23.353Z</published>
    <updated>2022-09-03T12:37:38.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、何为原型链？"><a href="#一、何为原型链？" class="headerlink" title="一、何为原型链？"></a>一、何为原型链？</h1><p>JavaScript中的原型关系</p><h1 id="二、原型链的解释"><a href="#二、原型链的解释" class="headerlink" title="二、原型链的解释"></a>二、原型链的解释</h1><ol><li><p>对象可以由a构造函数、b对象方法创建</p></li><li><p>来看下图。</p><p><img src="/2022/07/30/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/image-20220903202726634.png" alt="image-20220903202726634"></p><ol><li>f1和f2是function foo创建的对象。</li></ol></li></ol><p><img src="/2022/07/30/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE/%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="原型链"></p><p>1. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、何为原型链？&quot;&gt;&lt;a href=&quot;#一、何为原型链？&quot; class=&quot;headerlink&quot; title=&quot;一、何为原型链？&quot;&gt;&lt;/a&gt;一、何为原型链？&lt;/h1&gt;&lt;p&gt;JavaScript中的原型关系&lt;/p&gt;
&lt;h1 id=&quot;二、原型链的解释&quot;&gt;&lt;a href</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/"/>
    <id>https://jhfuture.github.io/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/</id>
    <published>2022-07-29T11:30:12.409Z</published>
    <updated>2022-09-03T13:50:37.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p><img src="/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/image-20220729200851143.png" alt="image-20220729200851143"></p><p><img src="/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/image-20220729193042248.png" alt="image-20220729193042248"></p><h2 id="单文件组件与非单文件组件"><a href="#单文件组件与非单文件组件" class="headerlink" title="单文件组件与非单文件组件"></a>单文件组件与非单文件组件</h2><h3 id="1-单文件组件："><a href="#1-单文件组件：" class="headerlink" title="1.单文件组件："></a>1.单文件组件：</h3><p>​一个文件只包含一个组件  ——&gt;a.html</p><h3 id="2-非单文件组件"><a href="#2-非单文件组件" class="headerlink" title="2. 非单文件组件"></a>2. 非单文件组件</h3><p>​一个文件中包含n个组件 ——&gt;a.vue</p><h2 id="Vuecomponent构造器的生成过程"><a href="#Vuecomponent构造器的生成过程" class="headerlink" title="Vuecomponent构造器的生成过程"></a>Vuecomponent构造器的生成过程</h2><p>​创建vue组件时，cost componentName &#x3D;Vue.extend()  ——————————&gt;调用了Vue.extend这个方法,而这个方法的源码每次调用都生成了一个新的VueComponent</p><p><img src="/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E6%88%90/image-20220729223553810.png" alt="image-20220729223553810"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2022/07/29/vue/19-%E7%BB%84%E4%BB%B6/1.%E7%BB%84%E4%BB%B6%E</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>带你领略Vue的风骚之路</title>
    <link href="https://jhfuture.github.io/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/"/>
    <id>https://jhfuture.github.io/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-07-29T06:58:51.000Z</published>
    <updated>2022-07-29T08:29:15.699Z</updated>
    
    <content type="html"><![CDATA[<p>先看完整的图。</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="生命周期"></p><h2 id="逐步解析"><a href="#逐步解析" class="headerlink" title="逐步解析"></a>逐步解析</h2><p>​1.Vue的初始化，两个生命周期函数</p><ul><li>beforecreate：在数据代理、数据监测之前</li><li>created：在完成数据代理、数据监测后</li></ul><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729150212600.png" alt="image-20220729150212600"></p><ol start="2"><li>Vue开始解析模块</li></ol><p>​Vue开始处理 插值语法、插值指令、计算属性……  ——&gt;不显示解析好的内容 ——</p><p>​————————&gt;这个过程进行虚拟DOM的生存</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729150411546.png" alt="image-20220729150411546"></p><ol start="3"><li>将虚拟DOM转换为真实DOM插入界面</li></ol><p>​上一步生成的虚拟DOM，Vue存了一份在vm.$el中，然后再用它来替换掉真实的那个el(绑定的模块)</p><p>​————————&gt;存在vm.$el中的虚拟DOM为后续的 虚拟DOM比较——&gt;即diff 提供准备</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729150931756.png" alt="image-20220729150931756"></p><ol start="4"><li><p>Vue的初始化完成，开始执行mounted生命周期函数。</p><p>​——————开启定时器，发送网络请求……</p></li></ol><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729152712878.png" alt="image-20220729152712878"></p><ol start="5"><li><p>检测变化 ——————&gt;这是一个闭环的过程</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729154420051.png" alt="image-20220729154420051"></p></li><li><p>销毁Vue</p></li></ol><p>destroy介绍</p><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729155152540.png" alt="image-20220729155152540"></p><blockquote><p>细节一：注意：</p><p>这里的事件监听器——&gt;指的是自定义事件</p><p>我们在 new Vue(</p><p>method:{<br>}</p><p>配置的方法都是原生的DOM事件，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    new Vue(</span><br><span class="line">method:&#123;</span><br><span class="line">        add()&#123;</span><br><span class="line">console.log(&#x27;add&#x27;)</span><br><span class="line">this.n++</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><p>​当vue执行时，最终会给button绑定 DOM原生的点击事件，这个事件是原生DOM上的，vue被杀死多少回都不会对其造成影响。</p></blockquote><p>​<img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729160100548.png" alt="image-20220729160100548"></p><h3 id="一个形象的比喻"><a href="#一个形象的比喻" class="headerlink" title="一个形象的比喻"></a>一个形象的比喻</h3><p><img src="/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/image-20220729161519962.png" alt="image-20220729161519962">   </p><h2 id="几个要注意的细节"><a href="#几个要注意的细节" class="headerlink" title="几个要注意的细节"></a>几个要注意的细节</h2><h3 id="细节一：注意："><a href="#细节一：注意：" class="headerlink" title="细节一：注意："></a>细节一：注意：</h3><p>这里的事件监听器——&gt;指的是自定义事件</p><p>我们在 new Vue(</p><p>method:{<br>}</p><p>配置的方法都是原生的DOM事件，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    new Vue(</span><br><span class="line">method:&#123;</span><br><span class="line">        add()&#123;</span><br><span class="line">console.log(&#x27;add&#x27;)</span><br><span class="line">this.n++</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><p>​当vue执行时，最终会给button绑定 DOM原生的点击事件，这个事件是原生DOM上的，vue被杀死多少回都不会对其造成影响</p><h3 id="细节二"><a href="#细节二" class="headerlink" title="细节二"></a>细节二</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;</span><br><span class="line">                /* 这里还能得到vm上的数据和方法，但是</span><br><span class="line">                修改后数据，页面不会刷新了。</span><br><span class="line">                ——&gt;因为vue已经进入销毁了，不会再加载 beforeupdata和update函数</span><br><span class="line">                */</span><br><span class="line">                console.log(&#x27;beforeDestory&#x27;);</span><br><span class="line">                console.log(this.n);</span><br><span class="line">                this.add();</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先看完整的图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/07/29/vue/17-Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A</summary>
      
    
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/tags/Vue/"/>
    
    <category term="硬核知识" scheme="https://jhfuture.github.io/tags/%E7%A1%AC%E6%A0%B8%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/07/28/vue/15-%E5%86%85%E9%83%A8%E6%8C%87%E4%BB%A4/2.v-html/"/>
    <id>https://jhfuture.github.io/2022/07/28/vue/15-%E5%86%85%E9%83%A8%E6%8C%87%E4%BB%A4/2.v-html/</id>
    <published>2022-07-28T14:22:11.862Z</published>
    <updated>2022-07-20T03:44:04.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="cookie简略图示"><a href="#cookie简略图示" class="headerlink" title="cookie简略图示"></a>cookie简略图示</h3><p><img src="/2022/07/28/vue/15-%E5%86%85%E9%83%A8%E6%8C%87%E4%BB%A4/2.v-html/image-20220728222602717.png" alt="image-20220728222602717"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;cookie简略图示&quot;&gt;&lt;a href=&quot;#cookie简略图示&quot; class=&quot;headerlink&quot; title=&quot;cookie简略图示&quot;&gt;&lt;/a&gt;cookie简略图示&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2022/07/28/vue/15-%E5%86%85</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/07/28/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/Vue.set/"/>
    <id>https://jhfuture.github.io/2022/07/28/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/Vue.set/</id>
    <published>2022-07-28T07:44:35.966Z</published>
    <updated>2022-07-28T07:45:31.831Z</updated>
    
    <content type="html"><![CDATA[<p>1.局限性</p><p>对象不能是vm &#x2F;  vm的根数据对象(vm._data)</p><p><img src="/2022/07/28/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/Vue.set/image-20220728154450525.png" alt="image-20220728154450525"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.局限性&lt;/p&gt;
&lt;p&gt;对象不能是vm &amp;#x2F;  vm的根数据对象(vm._data)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/07/28/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/Vue.set/image-20</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>姓名实例_methods</title>
    <link href="https://jhfuture.github.io/2022/07/28/vue/07-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/03.%E5%A7%93%E5%90%8D%E6%A1%88%E4%BE%8B_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
    <id>https://jhfuture.github.io/2022/07/28/vue/07-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/03.%E5%A7%93%E5%90%8D%E6%A1%88%E4%BE%8B_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</id>
    <published>2022-07-28T07:01:14.000Z</published>
    <updated>2022-07-28T07:01:54.262Z</updated>
    
    <content type="html"><![CDATA[<p>通过一个实例，简要介绍计算属性</p><span id="more"></span><p>​    1.定义：要用的属性不存在，要通过已有属性计算得来</p><p>​    2.原理；底层借助了object.defineproperty方法提供的getter和setter</p><p>​    3.get函数什么时候执行</p><p>​      (1).初次读取时会执行一次</p><p>​      (2).当依赖的数据发生改变时会被再次调用</p><p>​    4.优势：与methods相比，内部有缓存机制（复用），效率更高，调式方便</p><p>​    5.备注：</p><p>​      (1).计算属性最终会出现在vm上，直接读取&#x2F;操作使用即可</p><p>​      (2).如果计算属性要被修改，那必须写在set函数去响应修改，</p><p>​      且set中药引起&#x3D;&#x3D;<strong>计算时依赖的数据</strong>&#x3D;&#x3D;发生改变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">       姓 &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">       名 &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">       测试 &lt;input type=&quot;text&quot;  v-model=&quot;x&quot;&gt; &lt;br&gt;</span><br><span class="line">       全名 &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">       全名 &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">       全名 &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">       &lt;!-- //计算属性的get什么时候被调用？ </span><br><span class="line">               1.除此读取fullname时，后面使用时会进行缓存。 </span><br><span class="line">               2.所以来的数据发生改变时 --&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line"></span><br><span class="line">       const vm =new Vue(&#123;</span><br><span class="line">           el: &#x27;#root&#x27;,</span><br><span class="line">           data: &#123;</span><br><span class="line">               firstName: &#x27;张&#x27;,</span><br><span class="line">               lastName: &#x27;三&#x27;,</span><br><span class="line">               x:1</span><br><span class="line">           &#125;,</span><br><span class="line">           computed:&#123;</span><br><span class="line">               fullName:&#123;</span><br><span class="line">                   //get有什么用？当有人读取fullname时就会被调用，返回值就作为fullname的值</span><br><span class="line">                   //get什么时候被调用？ </span><br><span class="line">                   // 1.除此读取fullname时。 </span><br><span class="line">                   // 2.所以来的数据发生改变时</span><br><span class="line">                   get()&#123;</span><br><span class="line">                       console.log(&quot;get被调用了&quot;);</span><br><span class="line">                       console.log(this);//此处this是mv实例</span><br><span class="line">                       return this.firstName+&#x27;-&#x27;+this.lastName</span><br><span class="line">                       // 这里用到的值为 firstNmae、lastName</span><br><span class="line">                   &#125;,</span><br><span class="line">                   //set有什么用？当fullName被修改</span><br><span class="line">                   //set什么时候被调用？</span><br><span class="line">                   set(value)&#123;</span><br><span class="line">                       const arr=value.split(&#x27;-&#x27;)</span><br><span class="line">                       this.firstName=arr[0]</span><br><span class="line">                       this.lastName=arr[1]</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           // 计算属性，和data/methods不一样，它不是直接放在vm上，</span><br><span class="line">           // 而是调用了get方法，得到返回值后再将返回值放在vm上</span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过一个实例，简要介绍计算属性&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue的开始</title>
    <link href="https://jhfuture.github.io/2022/07/28/vue/11-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/"/>
    <id>https://jhfuture.github.io/2022/07/28/vue/11-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</id>
    <published>2022-07-28T06:25:14.000Z</published>
    <updated>2022-07-28T06:28:05.157Z</updated>
    
    <content type="html"><![CDATA[<p>Vue条件渲染 v-if与 v-show</p><span id="more"></span><p>​        条件渲染：</p><p>​              1.v-if</p><p>​                    写法：</p><p>​                        (1).v-if&#x3D;”表达式” </p><p>​                        (2).v-else-if&#x3D;”表达式”</p><p>​                        (3).v-else&#x3D;”表达式”</p><p>​                    适用于：切换频率较低的场景。</p><p>​                    特点：不展示的DOM元素直接被移除。（不会出现在HTML文件中）</p><p>​                    注意：v-if可以和:v-else-if、v-else一起使用，但要求&#x3D;&#x3D;<strong>结构不能被“打断”</strong>&#x3D;&#x3D;。</p><p>​              2.v-show</p><p>​                    写法：v-show&#x3D;”表达式”</p><p>​                    适用于：切换频率较高的场景。</p><p>​                    特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉（display：none）</p><p>​                </p><p>​              3.v-if可以和template配合使用，使多个元素一起显示&#x2F;隐藏，而不影响布局</p><p>​              4.备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</p><p>​                  因为 v-show，还存在于页面中，而v-if没有</p><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用v-if坐条件渲染 --&gt;</span><br><span class="line">        &lt;div v-if=&quot;表达式&quot;&gt; &lt;/div&gt;</span><br><span class="line">           &lt;div v-if=&quot;false&quot;&gt; &lt;/div&gt;</span><br><span class="line">           &lt;div v-if=&quot;1===1&quot;&gt; &lt;/div&gt;</span><br><span class="line">       </span><br><span class="line">      </span><br><span class="line">       &lt;!-- v-else和v-else-if  --&gt;</span><br><span class="line">       </span><br><span class="line">       &lt;div v-if=&quot;false&quot;&gt; &lt;/div&gt;</span><br><span class="line">       &lt;div v-elseif=&quot;1===1&quot;&gt; &lt;/div&gt; </span><br><span class="line"></span><br><span class="line">       &lt;!-- v-if,template配套使用，不破坏布局 --&gt;</span><br><span class="line">       &lt;template v-if=&quot;show&quot;&gt;</span><br><span class="line">           &lt;h2&gt;nihao$&lt;/h2&gt;</span><br><span class="line">           &lt;h2&gt;nihao$&lt;/h2&gt;</span><br><span class="line">           &lt;h2&gt;nihao$&lt;/h2&gt;</span><br><span class="line">       &lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用v-show做条件渲染 --&gt;</span><br><span class="line">       </span><br><span class="line">            &lt;div v-show=&quot;表达式&quot;&gt; &lt;/div&gt;</span><br><span class="line">            &lt;div v-show=&quot;false&quot;&gt; &lt;/div&gt;</span><br><span class="line">            &lt;div v-show=&quot;1===1&quot;&gt; &lt;/div&gt;</span><br><span class="line">         </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Vue条件渲染 v-if与 v-show&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/tags/Vue/"/>
    
    <category term="前端" scheme="https://jhfuture.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>class和style样式绑定</title>
    <link href="https://jhfuture.github.io/2022/07/28/vue/10.%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/class%E5%92%8Cstyle%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A/"/>
    <id>https://jhfuture.github.io/2022/07/28/vue/10.%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/class%E5%92%8Cstyle%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A/</id>
    <published>2022-07-28T06:18:14.000Z</published>
    <updated>2022-07-28T06:20:25.476Z</updated>
    
    <content type="html"><![CDATA[<p>class和style样式绑定</p><span id="more"></span><p>  绑定样式：</p><p>​      1.class样式</p><p>​        写法：:class&#x3D;’xxx’，xxx可以是对象、数组、字符串</p><p>​          字符串写法适用于：类名不确定，需要动态获取</p><p>​          数组写法使用与：要绑定多个样式，个数不确定，名字也不确定</p><p>​          对象写法：要绑定的样式名字、个数都确定，不确定应不应用</p><p>​      2.style样式</p><p>​          :style&#x3D;”xxx”，xxx可以是样式对象、样式对象数组</p><p>​        备注：</p><p>​          1.样式对象： key 不能瞎写，一定是&#x3D;&#x3D;<strong>存在的属性</strong>&#x3D;&#x3D;</p><p>​          2.属性中如果是两个单词，直接拼在一起 font-size -&gt; fontSize</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 准备好一个容器--&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;!-- 绑定class样式--字符串写法  适用于：样式的类名不确定，需要动态制定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :class=&quot;a&quot; @click=&quot;change()&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定class样式—--数组写法，适用于：要绑定的样式个数不确定，名字也不确定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定class样式——— 对象写法：适用于：要绑定的样式个数确定，名字确定，是否应用不确定--&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定style样式----对象写法 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定style样式----数组写法 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic &quot; :style=&quot;styleArray&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">   &lt;script&gt;</span><br><span class="line">   Vue.config.productionTip=false //阻止vue在启动时生成生产提示</span><br><span class="line">   new Vue(&#123;</span><br><span class="line">   el:&#x27;#root&#x27;,</span><br><span class="line">   data:&#123;</span><br><span class="line">    a:&#x27;&#x27;,</span><br><span class="line">   name:&#x27;helloworld&#x27;,</span><br><span class="line">   classArr:[&#x27;atguigu1&#x27;,&#x27;atguigu2&#x27;,&#x27;atguigu3&#x27;],</span><br><span class="line">   classObj:&#123;</span><br><span class="line">    atguigu1:false,</span><br><span class="line">    atguigu2:false</span><br><span class="line">   &#125;,</span><br><span class="line">   styleObj:&#123;</span><br><span class="line">    color:&#x27;red&#x27;,</span><br><span class="line">    fontSize: &#x27;20px&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">   styleOb2:&#123;</span><br><span class="line">    backgroundcolor:&#x27;orange&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">   styleArray:[&#123;</span><br><span class="line">    color:&#x27;red&#x27;,</span><br><span class="line">    fontSize: &#x27;20px&#x27;</span><br><span class="line">   &#125;,</span><br><span class="line">   </span><br><span class="line">   ,&#123;</span><br><span class="line">    backgroundcolor:&#x27;orange&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">],</span><br><span class="line">  </span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   methods:&#123;</span><br><span class="line">    change()&#123;</span><br><span class="line">        //0-1,1娶不到 0,0.11，1.xxx,.2.xxx向下取证</span><br><span class="line">        var index= Math.floor(Math.random()*3)</span><br><span class="line">        var arr=[&#x27;happy&#x27;,&#x27;sad&#x27;,&#x27;normal&#x27;]</span><br><span class="line">        this.a=arr[index]</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;class和style样式绑定&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A4/"/>
    <id>https://jhfuture.github.io/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A4/</id>
    <published>2022-07-27T15:51:52.318Z</published>
    <updated>2022-07-27T16:21:56.215Z</updated>
    
    <content type="html"><![CDATA[<p>一个vscode的使用技巧</p><p>自定义折叠</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//在开始的地方</span><br><span class="line">//#region</span><br><span class="line"></span><br><span class="line">//在结束的地方</span><br><span class="line">//#endregion</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个vscode的使用技巧&lt;/p&gt;
&lt;p&gt;自定义折叠&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jhfuture.github.io/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
    <id>https://jhfuture.github.io/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/</id>
    <published>2022-07-27T14:33:18.327Z</published>
    <updated>2022-07-27T15:14:40.482Z</updated>
    
    <content type="html"><![CDATA[<p>key的发挥作用：</p><blockquote><p>如果不写 key，那Vue会&#x3D;&#x3D;默认&#x3D;&#x3D;将index作为key </p></blockquote><ol><li>当使用index做索引时，Vue内部虚拟DOM的操作过程</li></ol><p>面试题： react、vue中key的有什么作用？（key的内部原理）<br>    1.虚拟dom中key 的作用</p><ul><li>key是虚拟DOM对象的标识符，当数据发生改变时，vue会根据【新数据】生成【新的虚拟DOM】</li><li>随后vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较——&#x3D;&#x3D;<strong>虚拟DOM比较算法</strong>&#x3D;&#x3D;，比较规则如下：</li></ul><ol start="2"><li><p>对比规则：</p><p>(1).若虚拟DOM中找到了与新虚拟DOM相同的key</p><ul><li>1.若虚拟DOM中内容没变，直接使用之前的真实DOM</li><li>2.若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li></ul></li></ol><p>​(2).旧虚拟DOM中没找到与新虚拟DOM中相同的key</p><p>​——&gt;创建新的真实DOM，随后渲染到页面</p><ol start="3"><li><p>用index作为key可能会引发的问题：</p><ol><li><p>若对数据进行：逆序添加（不是从尾部插入，而是从头部插入）、逆序删除等&#x3D;&#x3D;<strong>破坏顺序操作&#x3D;&#x3D;</strong><br>会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt;  页面效果没问题，但效率低</p></li><li><p>&#x3D;&#x3D;<strong>如果结构中还包含输入类的DOM</strong>：&#x3D;&#x3D;</p><p>​会产生错误DOM更新  &#x3D;&#x3D;&gt; 界面有问题</p></li></ol></li><li><p>开发中如何选择key？</p><ol><li>最好使用每条数据的&#x3D;&#x3D;<strong>唯一标识符</strong>&#x3D;&#x3D;作为key，比如id、手机号、身份证号、学号等唯一值</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅使用与渲染列表用于展示，使用index作为key是没有问题的</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 这里的案例为在persons数列 ==**前**== 添加一个新元素==---&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;!-- 遍历数组 --&gt;</span><br><span class="line">&lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;</span><br><span class="line">&lt;button @click.once=&quot;add&quot;&gt;添加一个老刘&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">add()&#123;</span><br><span class="line">const p = &#123;id:&#x27;004&#x27;,name:&#x27;老刘&#x27;,age:40&#125;</span><br><span class="line">this.persons.unshift(p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/image-20220727223334324.png" alt="image-20220727223334324"></p><p><img src="/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/image-20220727223639483.png" alt="image-20220727223639483"></p><ol start="2"><li>id（自定义为key）</li></ol><p><img src="/2022/07/27/vue/12-%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/image-20220727223718835.png" alt="image-20220727223718835"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;key的发挥作用：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果不写 key，那Vue会&amp;#x3D;&amp;#x3D;默认&amp;#x3D;&amp;#x3D;将index作为key &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;当使用index做索引时，Vue内部虚拟DOM的操作过</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>监视属性</title>
    <link href="https://jhfuture.github.io/2022/07/27/vue/09-%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/"/>
    <id>https://jhfuture.github.io/2022/07/27/vue/09-%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7/</id>
    <published>2022-07-27T05:54:14.000Z</published>
    <updated>2022-08-19T06:36:56.773Z</updated>
    
    <content type="html"><![CDATA[<p>VUe的引入</p><span id="more"></span><h2 id="一、-配置项"><a href="#一、-配置项" class="headerlink" title="一、 配置项"></a>一、 配置项</h2><ol><li>immediate</li></ol><blockquote><p>配置初始化时让handler被调用</p></blockquote><ol start="2"><li>handler(newValue,oldValue)</li></ol><blockquote><p>配置当对应的变量发生变化时调用的方法,可以接受两个参数</p></blockquote><ol start="3"><li>deep</li></ol><blockquote><p>配置是否进行多级目录</p></blockquote><h2 id="二、书写的方式"><a href="#二、书写的方式" class="headerlink" title="二、书写的方式"></a>二、书写的方式</h2><ol><li>直接在new Vue中配置</li></ol><blockquote><p>可以使用所有配置项</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//监视多级结构中某个属性的变化</span><br><span class="line">                &#x27;number.a&#x27;: &#123;</span><br><span class="line">                    immediate:true,//初始化时让handler被调用,</span><br><span class="line">                    deep:true,//检测多级</span><br><span class="line">                    // handler 在监听属性发生改变时会被调用</span><br><span class="line">                    handler(newValue,oldValue)&#123;</span><br><span class="line">                        console.log(&quot;a改变了&quot;,newValue,oldValue);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>简写，直接写hadler函数</li></ol><blockquote><p>不能添加配置项</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//简写</span><br><span class="line">               ishot(newValue,oldValue)&#123;</span><br><span class="line">                   console.log(&quot;a改变了&quot;,newValue,oldValue);</span><br><span class="line">                   console.log();</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用vm.$watch()配置</li></ol><blockquote><p>可以使用所有配置项</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//一、使用配置项</span><br><span class="line">         vm.$watch(&#x27;ishot&#x27;,&#123;</span><br><span class="line">             immediate:true,</span><br><span class="line">               console.log(&quot;ishot被改变了&quot;,newValue,oldValue);</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">//二、不使用配置项</span><br><span class="line"> vm.$watch(&#x27;ishot&#x27;,function()&#123;</span><br><span class="line">               console.log(&quot;ishot被改变了&quot;,newValue,oldValue);</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure><h2 id="三、watch与computed的区别"><a href="#三、watch与computed的区别" class="headerlink" title="三、watch与computed的区别"></a>三、watch与computed的区别</h2><ol><li>computed能完成的，watch都能完成。</li><li>watch能完成的功能，computed不一定能完成。例如：watch可以进行异步操作</li></ol><blockquote><p>两个重要的小原则：<br> 1.所被vue管理的函数，最好都写成普通函数，这样this的执行才是vm或 组件实例对象<br> 2.所有不被vue所管理的函数(定时器setTimeout、Ajax的回调函数等、promise问题等)<br> 最好写成箭头汗水，这样this的指向才是vm或    组件实例对象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">   </span><br><span class="line"> --&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">       姓 &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">       名 &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">    &lt;span&gt;全名 &#123;&#123;fullname&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line">       const vm= new Vue(&#123;</span><br><span class="line">            el: &#x27;#root&#x27;,</span><br><span class="line">            data: &#123;</span><br><span class="line">                firstName:&#x27;张&#x27;,</span><br><span class="line">                lastName:&#x27;三&#x27;,</span><br><span class="line">                fullname:&#x27;张三&#x27;//监视属性需要先创建一个变量便于后期修改</span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line">                // fullname()&#123;</span><br><span class="line">                //     return this.firstName+&#x27;-&#x27; +this.lastName</span><br><span class="line">                // &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                changeishot()&#123;</span><br><span class="line">                    this.ishot=!this.ishot</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            //监视属性</span><br><span class="line">            watch: &#123;</span><br><span class="line">                firstName()&#123;</span><br><span class="line">                    //setTimeout直接由浏览器执行，其this指向为Windows，固需要使用箭头函数，this指向往上找</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                    this.fullname=this.firstName+&#x27;-&#x27; +this.lastName</span><br><span class="line">                    &#125;, 1000);</span><br><span class="line">                &#125;,</span><br><span class="line">               lastName()&#123;</span><br><span class="line">                //setTimeout直接由浏览器执行，其this指向为Windows，固需要使用箭头函数，this指向往上找</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    console.log(this)</span><br><span class="line">                    this.fullname=this.firstName+&#x27;-&#x27; +this.lastName</span><br><span class="line">                    &#125;, 1000);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">    </span><br><span class="line">        &#125;)</span><br><span class="line">        // // 第二种配置方法</span><br><span class="line">        // vm.$watch(&#x27;ishot&#x27;,&#123;</span><br><span class="line">        //     immediate:true,</span><br><span class="line">        //     handler(newValue,oldValue)&#123;</span><br><span class="line">        //         console.log(&quot;ishot被改变了&quot;,newValue,oldValue);</span><br><span class="line">        //     &#125;</span><br><span class="line">        // &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;VUe的引入&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/tags/Vue/"/>
    
    <category term="前端" scheme="https://jhfuture.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue的技巧</title>
    <link href="https://jhfuture.github.io/2022/07/26/vue/08-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/vue%E6%8A%80%E5%B7%A7/"/>
    <id>https://jhfuture.github.io/2022/07/26/vue/08-%E7%BB%91%E5%AE%9A%E6%A0%B7%E5%BC%8F/vue%E6%8A%80%E5%B7%A7/</id>
    <published>2022-07-26T04:54:14.000Z</published>
    <updated>2022-09-04T10:42:21.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue中的坑"><a href="#Vue中的坑" class="headerlink" title="Vue中的坑"></a>Vue中的坑</h2><ol><li>如果Vue模块中没有使用data中的数据，那data中的数据发生改变时，vue的浏览器插件 Vue tool不会刷新</li><li>使用了定时器settimeout()的话，定时器是由浏览器直接调用的，所以它的this指向的是 **&#x3D;&#x3D;Windows&#x3D;&#x3D;**，而不是&#x3D;&#x3D;vue&#x3D;&#x3D;</li><li>Vue的绑定样式，使用style绑定要<code>注意的点</code><ol><li>如果是两个单词，类似background-color这种，要去掉中间的<code>“-”</code>,写成一个组合词backgroundColor</li><li></li></ol></li></ol><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ol><li>Vue上简单的操作可以直接写在Vue模块里，因为<strong>Vue模块可以直接访问Vue实例上的所有属性</strong></li></ol><p>eg: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div&gt; &#123;&#123;file&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;!- @xxx=&quot;yyyy&quot; xxx是事件名,yyy可以写一些简单的语句--&gt;</span><br><span class="line">    &lt;button @click=&quot;file=&#x27;炎热&#x27;&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">                file:&#x27;helloworld&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue中的坑&quot;&gt;&lt;a href=&quot;#Vue中的坑&quot; class=&quot;headerlink&quot; title=&quot;Vue中的坑&quot;&gt;&lt;/a&gt;Vue中的坑&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;如果Vue模块中没有使用data中的数据，那data中的数据发生改变时，vue的浏览器插件 Vu</summary>
      
    
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/tags/Vue/"/>
    
    <category term="Vue中的技巧" scheme="https://jhfuture.github.io/tags/Vue%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
    
    <category term="Vue中的坑" scheme="https://jhfuture.github.io/tags/Vue%E4%B8%AD%E7%9A%84%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>Vue的技巧</title>
    <link href="https://jhfuture.github.io/2022/07/26/vue/Top0-Vue%E4%B8%AD%E7%9A%84%E5%9D%91/vue%E6%8A%80%E5%B7%A7/"/>
    <id>https://jhfuture.github.io/2022/07/26/vue/Top0-Vue%E4%B8%AD%E7%9A%84%E5%9D%91/vue%E6%8A%80%E5%B7%A7/</id>
    <published>2022-07-26T04:54:14.000Z</published>
    <updated>2022-09-04T10:42:21.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue中的坑"><a href="#Vue中的坑" class="headerlink" title="Vue中的坑"></a>Vue中的坑</h2><ol><li>如果Vue模块中没有使用data中的数据，那data中的数据发生改变时，vue的浏览器插件 Vue tool不会刷新</li><li>使用了定时器settimeout()的话，定时器是由浏览器直接调用的，所以它的this指向的是 **&#x3D;&#x3D;Windows&#x3D;&#x3D;**，而不是&#x3D;&#x3D;vue&#x3D;&#x3D;</li><li>Vue的绑定样式，使用style绑定要<code>注意的点</code><ol><li>如果是两个单词，类似background-color这种，要去掉中间的<code>“-”</code>,写成一个组合词backgroundColor</li><li></li></ol></li></ol><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><ol><li>Vue上简单的操作可以直接写在Vue模块里，因为<strong>Vue模块可以直接访问Vue实例上的所有属性</strong></li></ol><p>eg: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">    &lt;div&gt; &#123;&#123;file&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;!- @xxx=&quot;yyyy&quot; xxx是事件名,yyy可以写一些简单的语句--&gt;</span><br><span class="line">    &lt;button @click=&quot;file=&#x27;炎热&#x27;&quot;&gt;&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.config.productionTip = false //阻止vue在启动时生成生产提示</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#x27;#root&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">                file:&#x27;helloworld&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue中的坑&quot;&gt;&lt;a href=&quot;#Vue中的坑&quot; class=&quot;headerlink&quot; title=&quot;Vue中的坑&quot;&gt;&lt;/a&gt;Vue中的坑&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;如果Vue模块中没有使用data中的数据，那data中的数据发生改变时，vue的浏览器插件 Vu</summary>
      
    
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://jhfuture.github.io/tags/Vue/"/>
    
    <category term="Vue中的技巧" scheme="https://jhfuture.github.io/tags/Vue%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/"/>
    
    <category term="Vue中的坑" scheme="https://jhfuture.github.io/tags/Vue%E4%B8%AD%E7%9A%84%E5%9D%91/"/>
    
  </entry>
  
</feed>
